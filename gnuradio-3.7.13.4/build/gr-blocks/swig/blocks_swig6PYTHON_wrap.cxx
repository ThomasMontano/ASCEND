/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_allocator_type swig_types[0]
#define SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t swig_types[1]
#define SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t swig_types[2]
#define SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t swig_types[3]
#define SWIGTYPE_p_boost__shared_ptrT_gr__block_t swig_types[4]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t swig_types[5]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t swig_types[6]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t swig_types[7]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t swig_types[8]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t swig_types[9]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t swig_types[10]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t swig_types[11]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t swig_types[12]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t swig_types[13]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t swig_types[14]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t swig_types[15]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t swig_types[16]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t swig_types[17]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t swig_types[18]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t swig_types[19]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t swig_types[20]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t swig_types[21]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t swig_types[22]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t swig_types[23]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t swig_types[24]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t swig_types[25]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t swig_types[26]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t swig_types[27]
#define SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t swig_types[28]
#define SWIGTYPE_p_boost__shared_ptrT_gr__buffer_reader_t swig_types[29]
#define SWIGTYPE_p_boost__shared_ptrT_gr__buffer_t swig_types[30]
#define SWIGTYPE_p_boost__shared_ptrT_gr__flat_flowgraph_t swig_types[31]
#define SWIGTYPE_p_boost__shared_ptrT_gr__flowgraph_t swig_types[32]
#define SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t swig_types[33]
#define SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t swig_types[34]
#define SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t swig_types[35]
#define SWIGTYPE_p_char swig_types[36]
#define SWIGTYPE_p_const_reference swig_types[37]
#define SWIGTYPE_p_difference_type swig_types[38]
#define SWIGTYPE_p_gr__basic_block swig_types[39]
#define SWIGTYPE_p_gr__block swig_types[40]
#define SWIGTYPE_p_gr__block_gateway swig_types[41]
#define SWIGTYPE_p_gr__blocks__kernel__unpack_k_bits swig_types[42]
#define SWIGTYPE_p_gr__blocks__tag_gate swig_types[43]
#define SWIGTYPE_p_gr__blocks__tag_share swig_types[44]
#define SWIGTYPE_p_gr__blocks__tagged_stream_align swig_types[45]
#define SWIGTYPE_p_gr__blocks__tagged_stream_multiply_length swig_types[46]
#define SWIGTYPE_p_gr__blocks__tagged_stream_mux swig_types[47]
#define SWIGTYPE_p_gr__blocks__tagged_stream_to_pdu swig_types[48]
#define SWIGTYPE_p_gr__blocks__tags_strobe swig_types[49]
#define SWIGTYPE_p_gr__blocks__tcp_server_sink swig_types[50]
#define SWIGTYPE_p_gr__blocks__test_tag_variable_rate_ff swig_types[51]
#define SWIGTYPE_p_gr__blocks__threshold_ff swig_types[52]
#define SWIGTYPE_p_gr__blocks__transcendental swig_types[53]
#define SWIGTYPE_p_gr__blocks__tuntap_pdu swig_types[54]
#define SWIGTYPE_p_gr__blocks__uchar_to_float swig_types[55]
#define SWIGTYPE_p_gr__blocks__udp_sink swig_types[56]
#define SWIGTYPE_p_gr__blocks__udp_source swig_types[57]
#define SWIGTYPE_p_gr__blocks__unpack_k_bits_bb swig_types[58]
#define SWIGTYPE_p_gr__blocks__unpacked_to_packed_bb swig_types[59]
#define SWIGTYPE_p_gr__blocks__unpacked_to_packed_ii swig_types[60]
#define SWIGTYPE_p_gr__blocks__unpacked_to_packed_ss swig_types[61]
#define SWIGTYPE_p_gr__blocks__vco_c swig_types[62]
#define SWIGTYPE_p_gr__blocks__vco_f swig_types[63]
#define SWIGTYPE_p_gr__blocks__xor_bb swig_types[64]
#define SWIGTYPE_p_gr__blocks__xor_ii swig_types[65]
#define SWIGTYPE_p_gr__blocks__xor_ss swig_types[66]
#define SWIGTYPE_p_gr__endianness_t swig_types[67]
#define SWIGTYPE_p_gr__hier_block2 swig_types[68]
#define SWIGTYPE_p_gr__rt_status_t swig_types[69]
#define SWIGTYPE_p_gr__sync_block swig_types[70]
#define SWIGTYPE_p_gr__sync_decimator swig_types[71]
#define SWIGTYPE_p_gr__sync_interpolator swig_types[72]
#define SWIGTYPE_p_gr__tagged_stream_block swig_types[73]
#define SWIGTYPE_p_gr__top_block swig_types[74]
#define SWIGTYPE_p_int swig_types[75]
#define SWIGTYPE_p_long_long swig_types[76]
#define SWIGTYPE_p_reference swig_types[77]
#define SWIGTYPE_p_short swig_types[78]
#define SWIGTYPE_p_signed_char swig_types[79]
#define SWIGTYPE_p_size_type swig_types[80]
#define SWIGTYPE_p_sptr swig_types[81]
#define SWIGTYPE_p_std__complexT_double_t swig_types[82]
#define SWIGTYPE_p_std__complexT_float_t swig_types[83]
#define SWIGTYPE_p_unsigned_char swig_types[84]
#define SWIGTYPE_p_unsigned_int swig_types[85]
#define SWIGTYPE_p_unsigned_long_long swig_types[86]
#define SWIGTYPE_p_unsigned_short swig_types[87]
#define SWIGTYPE_p_value_type swig_types[88]
static swig_type_info *swig_types[90];
static swig_module_info swig_module = {swig_types, 89, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodern' option"
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodernargs' option"
#endif

/*-----------------------------------------------
              @(target):= _blocks_swig6.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__blocks_swig6

#else
#  define SWIG_init    init_blocks_swig6

#endif
#define SWIG_name    "_blocks_swig6"

#define SWIGVERSION 0x020011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>



#define GR_PYTHON_BLOCKING_CODE(code) {                                 \
    PyThreadState *_save;                                               \
    _save = PyEval_SaveThread();                                        \
    try{code}                                                           \
    catch(...){PyEval_RestoreThread(_save); throw;}                     \
    PyEval_RestoreThread(_save);                                        \
}



#include "gnuradio_swig_bug_workaround.h"	// mandatory bug fix


#include <cstddef>


#include <stdexcept>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


#include <gnuradio/block.h>
#include <gnuradio/sync_block.h>
#include <gnuradio/sync_decimator.h>
#include <gnuradio/sync_interpolator.h>
#include <gnuradio/tagged_stream_block.h>
#include <gnuradio/block_gateway.h>
#include <gnuradio/feval.h>
#include <gnuradio/py_feval.h>
#include <gnuradio/high_res_timer.h>


  #define SWIG_From_long   PyLong_FromLong 


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


#include "gnuradio/blocks/tag_gate.h"
#include "gnuradio/blocks/tag_share.h"
#include "gnuradio/blocks/tagged_stream_align.h"
#include "gnuradio/blocks/tagged_stream_mux.h"
#include "gnuradio/blocks/tagged_stream_multiply_length.h"
#include "gnuradio/blocks/tagged_stream_to_pdu.h"
#include "gnuradio/blocks/tags_strobe.h"
#include "gnuradio/blocks/tcp_server_sink.h"
#include "gnuradio/blocks/test_tag_variable_rate_ff.h"
#include "gnuradio/blocks/threshold_ff.h"
#include "gnuradio/blocks/transcendental.h"
#include "gnuradio/blocks/tuntap_pdu.h"
#include "gnuradio/blocks/uchar_to_float.h"
#include "gnuradio/blocks/udp_sink.h"
#include "gnuradio/blocks/udp_source.h"
#include "gnuradio/blocks/unpack_k_bits.h"
#include "gnuradio/blocks/unpack_k_bits_bb.h"
#include "gnuradio/blocks/unpacked_to_packed_bb.h"
#include "gnuradio/blocks/unpacked_to_packed_ss.h"
#include "gnuradio/blocks/unpacked_to_packed_ii.h"
#include "gnuradio/blocks/vco_f.h"
#include "gnuradio/blocks/vco_c.h"
#include "gnuradio/blocks/xor_bb.h"
#include "gnuradio/blocks/xor_ss.h"
#include "gnuradio/blocks/xor_ii.h"


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


namespace swig {
  template <> struct traits<float > {
    typedef value_category category;
    static const char* type_name() { return"float"; }
  };  
  template <>  struct traits_asval<float > {   
    typedef float value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_float (obj, val);
    }
  };
  template <>  struct traits_from<float > {
    typedef float value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_float  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<float, std::allocator< float > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "float" "," "std::allocator< float >" " >";
	  }
	};
      }
    

namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_high_res_timer_now(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_now();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_high_res_timer_now_perfmon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_now_perfmon();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_high_res_timer_tps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_tps();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_high_res_timer_epoch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_epoch();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pdu_port_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pmt::pmt_t result;
  
  {
    try {
      result = gr::blocks::pdu::pdu_port_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_itemsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::pdu::vector_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "type", NULL 
  };
  size_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:itemsize",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "itemsize" "', argument " "1"" of type '" "gr::blocks::pdu::vector_type""'");
  } 
  arg1 = static_cast< gr::blocks::pdu::vector_type >(val1);
  {
    try {
      result = gr::blocks::pdu::itemsize(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_type_matches(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::pdu::vector_type arg1 ;
  pmt::pmt_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "type",(char *) "v", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:type_matches",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "type_matches" "', argument " "1"" of type '" "gr::blocks::pdu::vector_type""'");
  } 
  arg1 = static_cast< gr::blocks::pdu::vector_type >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "type_matches" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "type_matches" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)gr::blocks::pdu::type_matches(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_pdu_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::pdu::vector_type arg1 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "type",(char *) "buf",(char *) "items", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:make_pdu_vector",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "make_pdu_vector" "', argument " "1"" of type '" "gr::blocks::pdu::vector_type""'");
  } 
  arg1 = static_cast< gr::blocks::pdu::vector_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "make_pdu_vector" "', argument " "2"" of type '" "uint8_t const *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "make_pdu_vector" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = gr::blocks::pdu::make_pdu_vector(arg1,(unsigned char const *)arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_type_from_pmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pmt::pmt_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "vector", NULL 
  };
  gr::blocks::pdu::vector_type result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:type_from_pmt",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "type_from_pmt" "', argument " "1"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "type_from_pmt" "', argument " "1"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (gr::blocks::pdu::vector_type)gr::blocks::pdu::type_from_pmt(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_set_propagation(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::tag_gate *arg1 = (gr::blocks::tag_gate *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "propagate_tags", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_set_propagation",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tag_gate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_set_propagation" "', argument " "1"" of type '" "gr::blocks::tag_gate *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tag_gate * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_set_propagation" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_propagation(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  bool arg2 = (bool) false ;
  size_t val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "item_size",(char *) "propagate_tags", NULL 
  };
  gr::blocks::tag_gate::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:tag_gate_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tag_gate_make" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_make" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = gr::blocks::tag_gate::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tag_gate::sptr(static_cast< const gr::blocks::tag_gate::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_set_single_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::tag_gate *arg1 = (gr::blocks::tag_gate *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "single_key", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_set_single_key",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tag_gate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_set_single_key" "', argument " "1"" of type '" "gr::blocks::tag_gate *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tag_gate * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_gate_set_single_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_gate_set_single_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->set_single_key((std::string const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_single_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tag_gate *arg1 = (gr::blocks::tag_gate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_single_key",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tag_gate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_single_key" "', argument " "1"" of type '" "gr::blocks::tag_gate const *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tag_gate * >(argp1);
  {
    try {
      result = ((gr::blocks::tag_gate const *)arg1)->single_key();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tag_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tag_gate *arg1 = (gr::blocks::tag_gate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tag_gate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tag_gate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tag_gate" "', argument " "1"" of type '" "gr::blocks::tag_gate *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tag_gate * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tag_gate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__tag_gate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tag_share_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 = (size_t) 1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "sizeof_io_item",(char *) "sizeof_share_item",(char *) "vlen", NULL 
  };
  gr::blocks::tag_share::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:tag_share_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tag_share_make" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_size_t(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tag_share_make" "', argument " "3"" of type '" "size_t""'");
    } 
    arg3 = static_cast< size_t >(val3);
  }
  {
    try {
      result = gr::blocks::tag_share::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tag_share::sptr(static_cast< const gr::blocks::tag_share::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tag_share(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tag_share *arg1 = (gr::blocks::tag_share *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tag_share",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tag_share, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tag_share" "', argument " "1"" of type '" "gr::blocks::tag_share *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tag_share * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tag_share_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__tag_share, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tagged_stream_align_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "itemsize",(char *) "lengthtagname", NULL 
  };
  gr::blocks::tagged_stream_align::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tagged_stream_align_make" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_align_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_align_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gr::blocks::tagged_stream_align::make(arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tagged_stream_align::sptr(static_cast< const gr::blocks::tagged_stream_align::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_stream_align(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tagged_stream_align *arg1 = (gr::blocks::tagged_stream_align *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_stream_align",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tagged_stream_align, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_stream_align" "', argument " "1"" of type '" "gr::blocks::tagged_stream_align *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tagged_stream_align * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_stream_align_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__tagged_stream_align, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tagged_stream_mux_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 = (unsigned int) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "itemsize",(char *) "lengthtagname",(char *) "tag_preserve_head_pos", NULL 
  };
  gr::blocks::tagged_stream_mux::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:tagged_stream_mux_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tagged_stream_mux_make" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_mux_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_mux_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_mux_make" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  {
    try {
      result = gr::blocks::tagged_stream_mux::make(arg1,(std::string const &)*arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tagged_stream_mux::sptr(static_cast< const gr::blocks::tagged_stream_mux::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_stream_mux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tagged_stream_mux *arg1 = (gr::blocks::tagged_stream_mux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_stream_mux",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tagged_stream_mux, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_stream_mux" "', argument " "1"" of type '" "gr::blocks::tagged_stream_mux *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tagged_stream_mux * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_stream_mux_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__tagged_stream_mux, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_set_scalar(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::tagged_stream_multiply_length *arg1 = (gr::blocks::tagged_stream_multiply_length *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "scalar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_set_scalar",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tagged_stream_multiply_length, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_set_scalar" "', argument " "1"" of type '" "gr::blocks::tagged_stream_multiply_length *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tagged_stream_multiply_length * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_set_scalar" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_scalar(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "itemsize",(char *) "lengthtagname",(char *) "scalar", NULL 
  };
  gr::blocks::tagged_stream_multiply_length::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_stream_multiply_length_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tagged_stream_multiply_length_make" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_multiply_length_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_multiply_length_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_multiply_length_make" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = gr::blocks::tagged_stream_multiply_length::make(arg1,(std::string const &)*arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tagged_stream_multiply_length::sptr(static_cast< const gr::blocks::tagged_stream_multiply_length::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_stream_multiply_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tagged_stream_multiply_length *arg1 = (gr::blocks::tagged_stream_multiply_length *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_stream_multiply_length",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tagged_stream_multiply_length, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_stream_multiply_length" "', argument " "1"" of type '" "gr::blocks::tagged_stream_multiply_length *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tagged_stream_multiply_length * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_stream_multiply_length_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__tagged_stream_multiply_length, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::pdu::vector_type arg1 ;
  std::string const &arg2_defvalue = "packet_len" ;
  std::string *arg2 = (std::string *) &arg2_defvalue ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "type",(char *) "lengthtagname", NULL 
  };
  gr::blocks::tagged_stream_to_pdu::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:tagged_stream_to_pdu_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tagged_stream_to_pdu_make" "', argument " "1"" of type '" "gr::blocks::pdu::vector_type""'");
  } 
  arg1 = static_cast< gr::blocks::pdu::vector_type >(val1);
  if (obj1) {
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(obj1, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_to_pdu_make" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_to_pdu_make" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
  }
  {
    try {
      result = gr::blocks::tagged_stream_to_pdu::make(arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tagged_stream_to_pdu::sptr(static_cast< const gr::blocks::tagged_stream_to_pdu::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_stream_to_pdu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tagged_stream_to_pdu *arg1 = (gr::blocks::tagged_stream_to_pdu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_stream_to_pdu",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tagged_stream_to_pdu, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_stream_to_pdu" "', argument " "1"" of type '" "gr::blocks::tagged_stream_to_pdu *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tagged_stream_to_pdu * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_stream_to_pdu_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__tagged_stream_to_pdu, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tags_strobe_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  pmt::pmt_t arg2 ;
  uint64_t arg3 ;
  pmt::pmt_t arg4 = (pmt::pmt_t) pmt::intern("strobe") ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "sizeof_stream_item",(char *) "value",(char *) "nsamps",(char *) "key", NULL 
  };
  gr::blocks::tags_strobe::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:tags_strobe_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tags_strobe_make" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tags_strobe_make" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_make" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tags_strobe_make" "', argument " "3"" of type '" "uint64_t""'");
  } 
  arg3 = static_cast< uint64_t >(val3);
  if (obj3) {
    {
      res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tags_strobe_make" "', argument " "4"" of type '" "pmt::pmt_t""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_make" "', argument " "4"" of type '" "pmt::pmt_t""'");
      } else {
        pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp4);
        arg4 = *temp;
        if (SWIG_IsNewObj(res4)) delete temp;
      }
    }
  }
  {
    try {
      result = gr::blocks::tags_strobe::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tags_strobe::sptr(static_cast< const gr::blocks::tags_strobe::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_set_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::tags_strobe *arg1 = (gr::blocks::tags_strobe *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "value", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_set_value",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tags_strobe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_set_value" "', argument " "1"" of type '" "gr::blocks::tags_strobe *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tags_strobe * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tags_strobe_set_value" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_set_value" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_value(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_set_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::tags_strobe *arg1 = (gr::blocks::tags_strobe *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "key", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_set_key",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tags_strobe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_set_key" "', argument " "1"" of type '" "gr::blocks::tags_strobe *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tags_strobe * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tags_strobe_set_key" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_set_key" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_key(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tags_strobe *arg1 = (gr::blocks::tags_strobe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_value",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tags_strobe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_value" "', argument " "1"" of type '" "gr::blocks::tags_strobe const *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tags_strobe * >(argp1);
  {
    try {
      result = ((gr::blocks::tags_strobe const *)arg1)->value();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tags_strobe *arg1 = (gr::blocks::tags_strobe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_key",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tags_strobe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_key" "', argument " "1"" of type '" "gr::blocks::tags_strobe const *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tags_strobe * >(argp1);
  {
    try {
      result = ((gr::blocks::tags_strobe const *)arg1)->key();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_set_nsamps(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::tags_strobe *arg1 = (gr::blocks::tags_strobe *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "nsamps", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_set_nsamps",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tags_strobe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_set_nsamps" "', argument " "1"" of type '" "gr::blocks::tags_strobe *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tags_strobe * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_set_nsamps" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  {
    try {
      (arg1)->set_nsamps(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_nsamps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tags_strobe *arg1 = (gr::blocks::tags_strobe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_nsamps",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tags_strobe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_nsamps" "', argument " "1"" of type '" "gr::blocks::tags_strobe const *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tags_strobe * >(argp1);
  {
    try {
      result = (uint64_t)((gr::blocks::tags_strobe const *)arg1)->nsamps();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tags_strobe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tags_strobe *arg1 = (gr::blocks::tags_strobe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tags_strobe",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tags_strobe, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tags_strobe" "', argument " "1"" of type '" "gr::blocks::tags_strobe *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tags_strobe * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tags_strobe_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__tags_strobe, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tcp_server_sink_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool arg4 = (bool) false ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "itemsize",(char *) "host",(char *) "port",(char *) "noblock", NULL 
  };
  gr::blocks::tcp_server_sink::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:tcp_server_sink_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tcp_server_sink_make" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tcp_server_sink_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tcp_server_sink_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tcp_server_sink_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "tcp_server_sink_make" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      result = gr::blocks::tcp_server_sink::make(arg1,(std::string const &)*arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tcp_server_sink::sptr(static_cast< const gr::blocks::tcp_server_sink::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tcp_server_sink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tcp_server_sink *arg1 = (gr::blocks::tcp_server_sink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tcp_server_sink",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tcp_server_sink, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tcp_server_sink" "', argument " "1"" of type '" "gr::blocks::tcp_server_sink *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tcp_server_sink * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tcp_server_sink_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__tcp_server_sink, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  bool arg1 = (bool) false ;
  double arg2 = (double) 0.001 ;
  bool val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "update_once",(char *) "update_step", NULL 
  };
  gr::blocks::test_tag_variable_rate_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:test_tag_variable_rate_ff_make",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_bool(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "test_tag_variable_rate_ff_make" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_make" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      result = gr::blocks::test_tag_variable_rate_ff::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::test_tag_variable_rate_ff::sptr(static_cast< const gr::blocks::test_tag_variable_rate_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_test_tag_variable_rate_ff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::test_tag_variable_rate_ff *arg1 = (gr::blocks::test_tag_variable_rate_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_test_tag_variable_rate_ff",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__test_tag_variable_rate_ff, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_test_tag_variable_rate_ff" "', argument " "1"" of type '" "gr::blocks::test_tag_variable_rate_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::test_tag_variable_rate_ff * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *test_tag_variable_rate_ff_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__test_tag_variable_rate_ff, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_threshold_ff_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 = (float) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "lo",(char *) "hi",(char *) "initial_state", NULL 
  };
  gr::blocks::threshold_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:threshold_ff_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "threshold_ff_make" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "threshold_ff_make" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  {
    try {
      result = gr::blocks::threshold_ff::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::threshold_ff::sptr(static_cast< const gr::blocks::threshold_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_lo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::threshold_ff *arg1 = (gr::blocks::threshold_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_lo",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__threshold_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_lo" "', argument " "1"" of type '" "gr::blocks::threshold_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::threshold_ff * >(argp1);
  {
    try {
      result = (float)((gr::blocks::threshold_ff const *)arg1)->lo();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_set_lo(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::threshold_ff *arg1 = (gr::blocks::threshold_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lo", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_set_lo",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__threshold_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_set_lo" "', argument " "1"" of type '" "gr::blocks::threshold_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::threshold_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_set_lo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_lo(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_hi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::threshold_ff *arg1 = (gr::blocks::threshold_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_hi",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__threshold_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_hi" "', argument " "1"" of type '" "gr::blocks::threshold_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::threshold_ff * >(argp1);
  {
    try {
      result = (float)((gr::blocks::threshold_ff const *)arg1)->hi();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_set_hi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::threshold_ff *arg1 = (gr::blocks::threshold_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "hi", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_set_hi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__threshold_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_set_hi" "', argument " "1"" of type '" "gr::blocks::threshold_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::threshold_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_set_hi" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_hi(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_last_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::threshold_ff *arg1 = (gr::blocks::threshold_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_last_state",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__threshold_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_last_state" "', argument " "1"" of type '" "gr::blocks::threshold_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::threshold_ff * >(argp1);
  {
    try {
      result = (float)((gr::blocks::threshold_ff const *)arg1)->last_state();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_set_last_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::threshold_ff *arg1 = (gr::blocks::threshold_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "last_state", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_set_last_state",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__threshold_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_set_last_state" "', argument " "1"" of type '" "gr::blocks::threshold_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::threshold_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_set_last_state" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_last_state(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_threshold_ff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::threshold_ff *arg1 = (gr::blocks::threshold_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_threshold_ff",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__threshold_ff, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_threshold_ff" "', argument " "1"" of type '" "gr::blocks::threshold_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::threshold_ff * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *threshold_ff_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__threshold_ff, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_transcendental_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string const &arg2_defvalue = "float" ;
  std::string *arg2 = (std::string *) &arg2_defvalue ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "name",(char *) "type", NULL 
  };
  gr::blocks::transcendental::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:transcendental_make",kwnames,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_make" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transcendental_make" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  if (obj1) {
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(obj1, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transcendental_make" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transcendental_make" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
  }
  {
    try {
      result = gr::blocks::transcendental::make((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::transcendental::sptr(static_cast< const gr::blocks::transcendental::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_transcendental(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::transcendental *arg1 = (gr::blocks::transcendental *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_transcendental",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__transcendental, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_transcendental" "', argument " "1"" of type '" "gr::blocks::transcendental *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::transcendental * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *transcendental_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__transcendental, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tuntap_pdu_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 = (int) 10000 ;
  bool arg3 = (bool) false ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "dev",(char *) "MTU",(char *) "istunflag", NULL 
  };
  gr::blocks::tuntap_pdu::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:tuntap_pdu_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tuntap_pdu_make" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_make" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tuntap_pdu_make" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      result = gr::blocks::tuntap_pdu::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tuntap_pdu::sptr(static_cast< const gr::blocks::tuntap_pdu::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tuntap_pdu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tuntap_pdu *arg1 = (gr::blocks::tuntap_pdu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tuntap_pdu",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tuntap_pdu, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tuntap_pdu" "', argument " "1"" of type '" "gr::blocks::tuntap_pdu *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tuntap_pdu * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tuntap_pdu_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__tuntap_pdu, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_uchar_to_float_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::uchar_to_float::sptr result;
  
  {
    try {
      result = gr::blocks::uchar_to_float::make();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::uchar_to_float::sptr(static_cast< const gr::blocks::uchar_to_float::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_uchar_to_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::uchar_to_float *arg1 = (gr::blocks::uchar_to_float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_uchar_to_float",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__uchar_to_float, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_uchar_to_float" "', argument " "1"" of type '" "gr::blocks::uchar_to_float *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::uchar_to_float * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *uchar_to_float_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__uchar_to_float, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_udp_sink_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 = (int) 1472 ;
  bool arg5 = (bool) true ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "itemsize",(char *) "host",(char *) "port",(char *) "payload_size",(char *) "eof", NULL 
  };
  gr::blocks::udp_sink::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OO:udp_sink_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "udp_sink_make" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_sink_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_sink_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_sink_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "udp_sink_make" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "udp_sink_make" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  {
    try {
      result = gr::blocks::udp_sink::make(arg1,(std::string const &)*arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::udp_sink::sptr(static_cast< const gr::blocks::udp_sink::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_payload_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::udp_sink *arg1 = (gr::blocks::udp_sink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_payload_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__udp_sink, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_payload_size" "', argument " "1"" of type '" "gr::blocks::udp_sink *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::udp_sink * >(argp1);
  {
    try {
      result = (int)(arg1)->payload_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_connect(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::udp_sink *arg1 = (gr::blocks::udp_sink *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "host",(char *) "port", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:udp_sink_connect",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__udp_sink, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_connect" "', argument " "1"" of type '" "gr::blocks::udp_sink *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::udp_sink * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_sink_connect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_sink_connect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_sink_connect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->connect((std::string const &)*arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_disconnect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::udp_sink *arg1 = (gr::blocks::udp_sink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_disconnect",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__udp_sink, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_disconnect" "', argument " "1"" of type '" "gr::blocks::udp_sink *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::udp_sink * >(argp1);
  {
    try {
      (arg1)->disconnect();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_udp_sink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::udp_sink *arg1 = (gr::blocks::udp_sink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_udp_sink",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__udp_sink, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_udp_sink" "', argument " "1"" of type '" "gr::blocks::udp_sink *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::udp_sink * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *udp_sink_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__udp_sink, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_udp_source_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 = (int) 1472 ;
  bool arg5 = (bool) true ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "itemsize",(char *) "host",(char *) "port",(char *) "payload_size",(char *) "eof", NULL 
  };
  gr::blocks::udp_source::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OO:udp_source_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "udp_source_make" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_source_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_source_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_source_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "udp_source_make" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "udp_source_make" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  {
    try {
      result = gr::blocks::udp_source::make(arg1,(std::string const &)*arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::udp_source::sptr(static_cast< const gr::blocks::udp_source::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_connect(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::udp_source *arg1 = (gr::blocks::udp_source *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "host",(char *) "port", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:udp_source_connect",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__udp_source, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_connect" "', argument " "1"" of type '" "gr::blocks::udp_source *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::udp_source * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_source_connect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_source_connect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_source_connect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->connect((std::string const &)*arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_disconnect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::udp_source *arg1 = (gr::blocks::udp_source *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_disconnect",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__udp_source, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_disconnect" "', argument " "1"" of type '" "gr::blocks::udp_source *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::udp_source * >(argp1);
  {
    try {
      (arg1)->disconnect();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_payload_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::udp_source *arg1 = (gr::blocks::udp_source *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_payload_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__udp_source, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_payload_size" "', argument " "1"" of type '" "gr::blocks::udp_source *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::udp_source * >(argp1);
  {
    try {
      result = (int)(arg1)->payload_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_get_port(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::udp_source *arg1 = (gr::blocks::udp_source *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_get_port",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__udp_source, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_get_port" "', argument " "1"" of type '" "gr::blocks::udp_source *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::udp_source * >(argp1);
  {
    try {
      result = (int)(arg1)->get_port();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_udp_source(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::udp_source *arg1 = (gr::blocks::udp_source *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_udp_source",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__udp_source, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_udp_source" "', argument " "1"" of type '" "gr::blocks::udp_source *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::udp_source * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *udp_source_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__udp_source, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_unpack_k_bits(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "k", NULL 
  };
  gr::blocks::kernel::unpack_k_bits *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_unpack_k_bits",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_unpack_k_bits" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (gr::blocks::kernel::unpack_k_bits *)new gr::blocks::kernel::unpack_k_bits(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__kernel__unpack_k_bits, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unpack_k_bits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::kernel::unpack_k_bits *arg1 = (gr::blocks::kernel::unpack_k_bits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_unpack_k_bits",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__kernel__unpack_k_bits, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unpack_k_bits" "', argument " "1"" of type '" "gr::blocks::kernel::unpack_k_bits *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::kernel::unpack_k_bits * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_unpack(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::kernel::unpack_k_bits *arg1 = (gr::blocks::kernel::unpack_k_bits *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "bits",(char *) "bytes",(char *) "nbytes", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:unpack_k_bits_unpack",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__kernel__unpack_k_bits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_unpack" "', argument " "1"" of type '" "gr::blocks::kernel::unpack_k_bits const *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::kernel::unpack_k_bits * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpack_k_bits_unpack" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unpack_k_bits_unpack" "', argument " "3"" of type '" "unsigned char const *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "unpack_k_bits_unpack" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      ((gr::blocks::kernel::unpack_k_bits const *)arg1)->unpack(arg2,(unsigned char const *)arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_unpack_rev(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::blocks::kernel::unpack_k_bits *arg1 = (gr::blocks::kernel::unpack_k_bits *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "bits",(char *) "bytes",(char *) "nbytes", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:unpack_k_bits_unpack_rev",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__kernel__unpack_k_bits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_unpack_rev" "', argument " "1"" of type '" "gr::blocks::kernel::unpack_k_bits const *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::kernel::unpack_k_bits * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpack_k_bits_unpack_rev" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unpack_k_bits_unpack_rev" "', argument " "3"" of type '" "unsigned char const *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "unpack_k_bits_unpack_rev" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      ((gr::blocks::kernel::unpack_k_bits const *)arg1)->unpack_rev(arg2,(unsigned char const *)arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_k(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::kernel::unpack_k_bits *arg1 = (gr::blocks::kernel::unpack_k_bits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_k",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__kernel__unpack_k_bits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_k" "', argument " "1"" of type '" "gr::blocks::kernel::unpack_k_bits const *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::kernel::unpack_k_bits * >(argp1);
  {
    try {
      result = (int)((gr::blocks::kernel::unpack_k_bits const *)arg1)->k();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unpack_k_bits_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__kernel__unpack_k_bits, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "k", NULL 
  };
  gr::blocks::unpack_k_bits_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:unpack_k_bits_bb_make",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "unpack_k_bits_bb_make" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = gr::blocks::unpack_k_bits_bb::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::unpack_k_bits_bb::sptr(static_cast< const gr::blocks::unpack_k_bits_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unpack_k_bits_bb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::unpack_k_bits_bb *arg1 = (gr::blocks::unpack_k_bits_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_unpack_k_bits_bb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__unpack_k_bits_bb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unpack_k_bits_bb" "', argument " "1"" of type '" "gr::blocks::unpack_k_bits_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::unpack_k_bits_bb * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unpack_k_bits_bb_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__unpack_k_bits_bb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  gr::endianness_t arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "bits_per_chunk",(char *) "endianness", NULL 
  };
  gr::blocks::unpacked_to_packed_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "unpacked_to_packed_bb_make" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_make" "', argument " "2"" of type '" "gr::endianness_t""'");
  } 
  arg2 = static_cast< gr::endianness_t >(val2);
  {
    try {
      result = gr::blocks::unpacked_to_packed_bb::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::unpacked_to_packed_bb::sptr(static_cast< const gr::blocks::unpacked_to_packed_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unpacked_to_packed_bb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::unpacked_to_packed_bb *arg1 = (gr::blocks::unpacked_to_packed_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_unpacked_to_packed_bb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__unpacked_to_packed_bb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unpacked_to_packed_bb" "', argument " "1"" of type '" "gr::blocks::unpacked_to_packed_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::unpacked_to_packed_bb * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unpacked_to_packed_bb_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__unpacked_to_packed_bb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  gr::endianness_t arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "bits_per_chunk",(char *) "endianness", NULL 
  };
  gr::blocks::unpacked_to_packed_ss::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "unpacked_to_packed_ss_make" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_make" "', argument " "2"" of type '" "gr::endianness_t""'");
  } 
  arg2 = static_cast< gr::endianness_t >(val2);
  {
    try {
      result = gr::blocks::unpacked_to_packed_ss::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::unpacked_to_packed_ss::sptr(static_cast< const gr::blocks::unpacked_to_packed_ss::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unpacked_to_packed_ss(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::unpacked_to_packed_ss *arg1 = (gr::blocks::unpacked_to_packed_ss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_unpacked_to_packed_ss",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__unpacked_to_packed_ss, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unpacked_to_packed_ss" "', argument " "1"" of type '" "gr::blocks::unpacked_to_packed_ss *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::unpacked_to_packed_ss * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unpacked_to_packed_ss_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__unpacked_to_packed_ss, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  gr::endianness_t arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "bits_per_chunk",(char *) "endianness", NULL 
  };
  gr::blocks::unpacked_to_packed_ii::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "unpacked_to_packed_ii_make" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_make" "', argument " "2"" of type '" "gr::endianness_t""'");
  } 
  arg2 = static_cast< gr::endianness_t >(val2);
  {
    try {
      result = gr::blocks::unpacked_to_packed_ii::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::unpacked_to_packed_ii::sptr(static_cast< const gr::blocks::unpacked_to_packed_ii::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unpacked_to_packed_ii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::unpacked_to_packed_ii *arg1 = (gr::blocks::unpacked_to_packed_ii *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_unpacked_to_packed_ii",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__unpacked_to_packed_ii, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unpacked_to_packed_ii" "', argument " "1"" of type '" "gr::blocks::unpacked_to_packed_ii *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::unpacked_to_packed_ii * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unpacked_to_packed_ii_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__unpacked_to_packed_ii, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vco_f_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "sampling_rate",(char *) "sensitivity",(char *) "amplitude", NULL 
  };
  gr::blocks::vco_f::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vco_f_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "vco_f_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_f_make" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = gr::blocks::vco_f::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::vco_f::sptr(static_cast< const gr::blocks::vco_f::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vco_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::vco_f *arg1 = (gr::blocks::vco_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_vco_f",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__vco_f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vco_f" "', argument " "1"" of type '" "gr::blocks::vco_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::vco_f * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vco_f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__vco_f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vco_c_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "sampling_rate",(char *) "sensitivity",(char *) "amplitude", NULL 
  };
  gr::blocks::vco_c::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vco_c_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "vco_c_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_c_make" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = gr::blocks::vco_c::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::vco_c::sptr(static_cast< const gr::blocks::vco_c::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vco_c(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::vco_c *arg1 = (gr::blocks::vco_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_vco_c",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__vco_c, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vco_c" "', argument " "1"" of type '" "gr::blocks::vco_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::vco_c * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vco_c_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__vco_c, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_xor_bb_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 = (size_t) 1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "vlen", NULL 
  };
  gr::blocks::xor_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:xor_bb_make",kwnames,&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_size_t(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "xor_bb_make" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
  }
  {
    try {
      result = gr::blocks::xor_bb::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::xor_bb::sptr(static_cast< const gr::blocks::xor_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_xor_bb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::xor_bb *arg1 = (gr::blocks::xor_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_xor_bb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__xor_bb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_xor_bb" "', argument " "1"" of type '" "gr::blocks::xor_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::xor_bb * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *xor_bb_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__xor_bb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_xor_ss_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 = (size_t) 1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "vlen", NULL 
  };
  gr::blocks::xor_ss::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:xor_ss_make",kwnames,&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_size_t(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "xor_ss_make" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
  }
  {
    try {
      result = gr::blocks::xor_ss::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::xor_ss::sptr(static_cast< const gr::blocks::xor_ss::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_xor_ss(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::xor_ss *arg1 = (gr::blocks::xor_ss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_xor_ss",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__xor_ss, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_xor_ss" "', argument " "1"" of type '" "gr::blocks::xor_ss *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::xor_ss * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *xor_ss_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__xor_ss, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_xor_ii_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 = (size_t) 1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "vlen", NULL 
  };
  gr::blocks::xor_ii::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:xor_ii_make",kwnames,&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_size_t(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "xor_ii_make" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
  }
  {
    try {
      result = gr::blocks::xor_ii::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::xor_ii::sptr(static_cast< const gr::blocks::xor_ii::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_xor_ii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::xor_ii *arg1 = (gr::blocks::xor_ii *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_xor_ii",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__xor_ii, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_xor_ii" "', argument " "1"" of type '" "gr::blocks::xor_ii *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::xor_ii * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *xor_ii_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__blocks__xor_ii, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tag_gate_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tag_gate > *)new boost::shared_ptr< gr::blocks::tag_gate >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tag_gate_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tag_gate *arg1 = (gr::blocks::tag_gate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::tag_gate > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tag_gate_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tag_gate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tag_gate_sptr" "', argument " "1"" of type '" "gr::blocks::tag_gate *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tag_gate * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tag_gate > *)new boost::shared_ptr< gr::blocks::tag_gate >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tag_gate_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tag_gate_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__tag_gate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tag_gate_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tag_gate_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::tag_gate >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::tag_gate >::shared_ptr(gr::blocks::tag_gate *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::tag_gate *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (gr::blocks::tag_gate *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__tag_gate, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tag_gate_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tag_gate_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tag_gate_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_propagation(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "propagate_tags", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_set_propagation",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_set_propagation" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_set_propagation" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (*arg1)->set_propagation(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  size_t arg2 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "item_size",(char *) "propagate_tags", NULL 
  };
  gr::blocks::tag_gate::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:tag_gate_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tag_gate_sptr_make" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tag_gate::sptr(static_cast< const gr::blocks::tag_gate::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_single_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "single_key", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_set_single_key",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_set_single_key" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_gate_sptr_set_single_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_gate_sptr_set_single_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_single_key((std::string const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_single_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_single_key",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_single_key" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->single_key();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tag_gate_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_gate_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tag_gate_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_gate_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tag_gate_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_gate_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tag_gate_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_gate_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tag_gate_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_gate_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tag_gate_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_gate_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_gate_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_gate_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_gate_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_gate_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_gate_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_gate_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_gate_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_gate_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_gate_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_gate_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_gate_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_gate_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_gate_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_gate_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_gate_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_gate_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_gate_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_gate_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_gate_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_gate_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tag_gate_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_gate_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tag_gate_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tag_gate_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tag_gate_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_gate_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_gate_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tag_gate_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_gate_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_gate_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_gate_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_gate > *arg1 = (boost::shared_ptr< gr::blocks::tag_gate > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_gate_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_gate_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_gate > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_gate > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_gate_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_gate_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tag_gate_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_gate_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tag_share_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tag_share > *)new boost::shared_ptr< gr::blocks::tag_share >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tag_share_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tag_share *arg1 = (gr::blocks::tag_share *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::tag_share > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tag_share_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tag_share, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tag_share_sptr" "', argument " "1"" of type '" "gr::blocks::tag_share *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tag_share * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tag_share > *)new boost::shared_ptr< gr::blocks::tag_share >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tag_share_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tag_share_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__tag_share, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tag_share_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tag_share_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::tag_share >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::tag_share >::shared_ptr(gr::blocks::tag_share *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::tag_share *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (gr::blocks::tag_share *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__tag_share, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tag_share_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tag_share_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tag_share_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sizeof_io_item",(char *) "sizeof_share_item",(char *) "vlen", NULL 
  };
  gr::blocks::tag_share::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:tag_share_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tag_share_sptr_make" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_size_t(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "tag_share_sptr_make" "', argument " "4"" of type '" "size_t""'");
    } 
    arg4 = static_cast< size_t >(val4);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tag_share::sptr(static_cast< const gr::blocks::tag_share::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tag_share_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_share_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tag_share_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_share_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_share_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_share_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_share_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_share_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_share_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_share_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tag_share_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_share_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tag_share_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_share_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_share_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tag_share_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_share_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tag_share_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_share_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_share_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_share_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_share_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_share_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_share_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_share_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_share_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_share_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_share_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_share_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_share_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_share_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_share_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_share_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_share_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tag_share_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tag_share_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tag_share_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_share_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_share_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_share_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_share_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tag_share_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_share_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tag_share_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_share_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tag_share_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tag_share_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_share_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_share_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tag_share_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_share_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_share_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_share_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tag_share > *arg1 = (boost::shared_ptr< gr::blocks::tag_share > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_share_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_share_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tag_share > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tag_share > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_share_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_share_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tag_share_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tag_share_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tagged_stream_align_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tagged_stream_align > *)new boost::shared_ptr< gr::blocks::tagged_stream_align >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_stream_align_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tagged_stream_align *arg1 = (gr::blocks::tagged_stream_align *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tagged_stream_align_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tagged_stream_align, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tagged_stream_align_sptr" "', argument " "1"" of type '" "gr::blocks::tagged_stream_align *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tagged_stream_align * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tagged_stream_align > *)new boost::shared_ptr< gr::blocks::tagged_stream_align >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_stream_align_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tagged_stream_align_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__tagged_stream_align, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tagged_stream_align_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tagged_stream_align_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::tagged_stream_align >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::tagged_stream_align >::shared_ptr(gr::blocks::tagged_stream_align *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::tagged_stream_align *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (gr::blocks::tagged_stream_align *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__tagged_stream_align, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_stream_align_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_stream_align_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_stream_align_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "itemsize",(char *) "lengthtagname", NULL 
  };
  gr::blocks::tagged_stream_align::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_stream_align_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_stream_align_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_align_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (*arg1)->make(arg2,(std::string const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tagged_stream_align::sptr(static_cast< const gr::blocks::tagged_stream_align::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_align_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_align_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_align_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_align_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_align_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_align_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_align_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_align_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_align_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_align_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_align_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_align_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_align_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_align_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_align_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_align_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_align_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_align_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_align_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_align_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_align_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_align_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_align_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_align_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_align_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_align_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_align_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_align_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_align_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_align_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_align_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_align_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_stream_align_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_align_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_align_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tagged_stream_align_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_stream_align_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_align_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_align_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_stream_align_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_align_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_align_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_align_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_align > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_align > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_align_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_align_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_align > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_align > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_align_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_align_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_stream_align_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tagged_stream_mux_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *)new boost::shared_ptr< gr::blocks::tagged_stream_mux >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_stream_mux_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tagged_stream_mux *arg1 = (gr::blocks::tagged_stream_mux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tagged_stream_mux_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tagged_stream_mux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tagged_stream_mux_sptr" "', argument " "1"" of type '" "gr::blocks::tagged_stream_mux *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tagged_stream_mux * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *)new boost::shared_ptr< gr::blocks::tagged_stream_mux >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_stream_mux_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tagged_stream_mux_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__tagged_stream_mux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tagged_stream_mux_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tagged_stream_mux_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::tagged_stream_mux >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::tagged_stream_mux >::shared_ptr(gr::blocks::tagged_stream_mux *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::tagged_stream_mux *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (gr::blocks::tagged_stream_mux *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__tagged_stream_mux, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_stream_mux_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_stream_mux_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_stream_mux_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  unsigned int arg4 = (unsigned int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "itemsize",(char *) "lengthtagname",(char *) "tag_preserve_head_pos", NULL 
  };
  gr::blocks::tagged_stream_mux::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:tagged_stream_mux_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_stream_mux_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_mux_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "tagged_stream_mux_sptr_make" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
  }
  {
    try {
      result = (*arg1)->make(arg2,(std::string const &)*arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tagged_stream_mux::sptr(static_cast< const gr::blocks::tagged_stream_mux::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_mux_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_mux_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_mux_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_mux_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_mux_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_mux_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_mux_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_mux_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_mux_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_mux_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_mux_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_mux_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_mux_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_mux_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_mux_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_mux_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_mux_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_mux_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_mux_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_mux_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_mux_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_mux_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_mux_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_mux_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_mux_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_mux_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_mux_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_mux_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_mux_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_mux_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_mux_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_mux_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_mux_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_mux_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_mux_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_mux_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_mux_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_mux_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_mux_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_mux_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_mux_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_stream_mux_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_mux_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_mux_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_mux_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tagged_stream_mux_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_stream_mux_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_mux_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_mux_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_stream_mux_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_mux_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_mux_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_mux_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_mux > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_mux > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_mux_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_mux_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_mux > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_mux > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_mux_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_mux_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_stream_mux_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tagged_stream_multiply_length_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *)new boost::shared_ptr< gr::blocks::tagged_stream_multiply_length >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_stream_multiply_length_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tagged_stream_multiply_length *arg1 = (gr::blocks::tagged_stream_multiply_length *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tagged_stream_multiply_length_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tagged_stream_multiply_length, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tagged_stream_multiply_length_sptr" "', argument " "1"" of type '" "gr::blocks::tagged_stream_multiply_length *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tagged_stream_multiply_length * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *)new boost::shared_ptr< gr::blocks::tagged_stream_multiply_length >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_stream_multiply_length_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tagged_stream_multiply_length_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__tagged_stream_multiply_length, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tagged_stream_multiply_length_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tagged_stream_multiply_length_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::tagged_stream_multiply_length >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::tagged_stream_multiply_length >::shared_ptr(gr::blocks::tagged_stream_multiply_length *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::tagged_stream_multiply_length *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (gr::blocks::tagged_stream_multiply_length *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__tagged_stream_multiply_length, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_stream_multiply_length_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_stream_multiply_length_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_stream_multiply_length_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_scalar(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "scalar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_set_scalar",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_set_scalar" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_set_scalar" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_scalar(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "itemsize",(char *) "lengthtagname",(char *) "scalar", NULL 
  };
  gr::blocks::tagged_stream_multiply_length::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:tagged_stream_multiply_length_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_stream_multiply_length_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_multiply_length_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "tagged_stream_multiply_length_sptr_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (*arg1)->make(arg2,(std::string const &)*arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tagged_stream_multiply_length::sptr(static_cast< const gr::blocks::tagged_stream_multiply_length::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_multiply_length_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_multiply_length_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_multiply_length_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_multiply_length_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_multiply_length_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_multiply_length_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_multiply_length_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_multiply_length_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_multiply_length_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_multiply_length_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_multiply_length_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_multiply_length_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_multiply_length_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_multiply_length_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_multiply_length_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_multiply_length_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_multiply_length_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_multiply_length_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_stream_multiply_length_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_multiply_length_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_multiply_length_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tagged_stream_multiply_length_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_stream_multiply_length_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_multiply_length_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_multiply_length_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_stream_multiply_length_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_multiply_length_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_multiply_length_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_multiply_length_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_multiply_length_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_multiply_length_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_multiply_length_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_multiply_length_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_stream_multiply_length_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tagged_stream_to_pdu_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *)new boost::shared_ptr< gr::blocks::tagged_stream_to_pdu >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_stream_to_pdu_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tagged_stream_to_pdu *arg1 = (gr::blocks::tagged_stream_to_pdu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tagged_stream_to_pdu_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tagged_stream_to_pdu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tagged_stream_to_pdu_sptr" "', argument " "1"" of type '" "gr::blocks::tagged_stream_to_pdu *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tagged_stream_to_pdu * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *)new boost::shared_ptr< gr::blocks::tagged_stream_to_pdu >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_stream_to_pdu_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tagged_stream_to_pdu_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__tagged_stream_to_pdu, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tagged_stream_to_pdu_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tagged_stream_to_pdu_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::tagged_stream_to_pdu >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::tagged_stream_to_pdu >::shared_ptr(gr::blocks::tagged_stream_to_pdu *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::tagged_stream_to_pdu *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (gr::blocks::tagged_stream_to_pdu *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__tagged_stream_to_pdu, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_stream_to_pdu_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_stream_to_pdu_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_stream_to_pdu_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  gr::blocks::pdu::vector_type arg2 ;
  std::string const &arg3_defvalue = "packet_len" ;
  std::string *arg3 = (std::string *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type",(char *) "lengthtagname", NULL 
  };
  gr::blocks::tagged_stream_to_pdu::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:tagged_stream_to_pdu_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_make" "', argument " "2"" of type '" "gr::blocks::pdu::vector_type""'");
  } 
  arg2 = static_cast< gr::blocks::pdu::vector_type >(val2);
  if (obj2) {
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string(obj2, &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_stream_to_pdu_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_to_pdu_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
      }
      arg3 = ptr;
    }
  }
  {
    try {
      result = (*arg1)->make(arg2,(std::string const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tagged_stream_to_pdu::sptr(static_cast< const gr::blocks::tagged_stream_to_pdu::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_to_pdu_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_to_pdu_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_to_pdu_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_to_pdu_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_to_pdu_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_to_pdu_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_to_pdu_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_to_pdu_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_to_pdu_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_to_pdu_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_to_pdu_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_to_pdu_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_to_pdu_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_to_pdu_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_to_pdu_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_to_pdu_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_to_pdu_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_stream_to_pdu_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_to_pdu_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_to_pdu_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_to_pdu_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_to_pdu_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_stream_to_pdu_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_to_pdu_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_to_pdu_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_to_pdu_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_to_pdu_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_stream_to_pdu_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_stream_to_pdu_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_stream_to_pdu_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_to_pdu_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tagged_stream_to_pdu_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_stream_to_pdu_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_to_pdu_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_to_pdu_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_stream_to_pdu_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_to_pdu_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_stream_to_pdu_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_stream_to_pdu_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_stream_to_pdu_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_stream_to_pdu_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_stream_to_pdu_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_stream_to_pdu_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_stream_to_pdu_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tags_strobe_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tags_strobe > *)new boost::shared_ptr< gr::blocks::tags_strobe >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tags_strobe_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tags_strobe *arg1 = (gr::blocks::tags_strobe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::tags_strobe > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tags_strobe_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tags_strobe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tags_strobe_sptr" "', argument " "1"" of type '" "gr::blocks::tags_strobe *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tags_strobe * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tags_strobe > *)new boost::shared_ptr< gr::blocks::tags_strobe >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tags_strobe_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tags_strobe_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__tags_strobe, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tags_strobe_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tags_strobe_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::tags_strobe >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::tags_strobe >::shared_ptr(gr::blocks::tags_strobe *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::tags_strobe *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (gr::blocks::tags_strobe *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__tags_strobe, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tags_strobe_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tags_strobe_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tags_strobe_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  size_t arg2 ;
  pmt::pmt_t arg3 ;
  uint64_t arg4 ;
  pmt::pmt_t arg5 = (pmt::pmt_t) pmt::intern("strobe") ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sizeof_stream_item",(char *) "value",(char *) "nsamps",(char *) "key", NULL 
  };
  gr::blocks::tags_strobe::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:tags_strobe_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tags_strobe_sptr_make" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_sptr_make" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "tags_strobe_sptr_make" "', argument " "4"" of type '" "uint64_t""'");
  } 
  arg4 = static_cast< uint64_t >(val4);
  if (obj4) {
    {
      res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "tags_strobe_sptr_make" "', argument " "5"" of type '" "pmt::pmt_t""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_sptr_make" "', argument " "5"" of type '" "pmt::pmt_t""'");
      } else {
        pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp5);
        arg5 = *temp;
        if (SWIG_IsNewObj(res5)) delete temp;
      }
    }
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tags_strobe::sptr(static_cast< const gr::blocks::tags_strobe::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "value", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_set_value",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_value" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tags_strobe_sptr_set_value" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_sptr_set_value" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_value(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "key", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_set_key",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_key" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tags_strobe_sptr_set_key" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_sptr_set_key" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_key(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_value",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_value" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->value();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_key",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_key" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->key();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_nsamps(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "nsamps", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_set_nsamps",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_nsamps" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_set_nsamps" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  {
    try {
      (*arg1)->set_nsamps(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_nsamps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_nsamps",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_nsamps" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (uint64_t)(*arg1)->nsamps();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tags_strobe_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_strobe_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tags_strobe_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_strobe_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tags_strobe_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_strobe_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tags_strobe_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_strobe_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tags_strobe_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_strobe_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tags_strobe_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_strobe_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tags_strobe_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_strobe_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_strobe_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tags_strobe_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_strobe_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_strobe_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tags_strobe_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_strobe_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_strobe_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tags_strobe_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_strobe_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_strobe_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tags_strobe_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_strobe_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_strobe_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tags_strobe_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_strobe_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_strobe_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tags_strobe_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tags_strobe_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_strobe_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tags_strobe_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tags_strobe_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tags_strobe_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tags_strobe_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tags_strobe_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_strobe_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_strobe_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tags_strobe > *arg1 = (boost::shared_ptr< gr::blocks::tags_strobe > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_strobe_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_strobe_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tags_strobe > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tags_strobe > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tags_strobe_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_strobe_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tags_strobe_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tags_strobe_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tcp_server_sink_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tcp_server_sink > *)new boost::shared_ptr< gr::blocks::tcp_server_sink >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tcp_server_sink_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tcp_server_sink *arg1 = (gr::blocks::tcp_server_sink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tcp_server_sink_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tcp_server_sink, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tcp_server_sink_sptr" "', argument " "1"" of type '" "gr::blocks::tcp_server_sink *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tcp_server_sink * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tcp_server_sink > *)new boost::shared_ptr< gr::blocks::tcp_server_sink >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tcp_server_sink_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tcp_server_sink_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__tcp_server_sink, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tcp_server_sink_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tcp_server_sink_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::tcp_server_sink >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::tcp_server_sink >::shared_ptr(gr::blocks::tcp_server_sink *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::tcp_server_sink *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (gr::blocks::tcp_server_sink *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__tcp_server_sink, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tcp_server_sink_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tcp_server_sink_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tcp_server_sink_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  bool arg5 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "itemsize",(char *) "host",(char *) "port",(char *) "noblock", NULL 
  };
  gr::blocks::tcp_server_sink::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:tcp_server_sink_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tcp_server_sink_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tcp_server_sink_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "tcp_server_sink_sptr_make" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "tcp_server_sink_sptr_make" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  {
    try {
      result = (*arg1)->make(arg2,(std::string const &)*arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tcp_server_sink::sptr(static_cast< const gr::blocks::tcp_server_sink::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tcp_server_sink_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tcp_server_sink_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tcp_server_sink_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tcp_server_sink_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tcp_server_sink_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tcp_server_sink_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tcp_server_sink_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tcp_server_sink_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tcp_server_sink_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tcp_server_sink_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tcp_server_sink_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tcp_server_sink_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tcp_server_sink_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tcp_server_sink_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tcp_server_sink_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tcp_server_sink_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tcp_server_sink_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tcp_server_sink_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tcp_server_sink_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tcp_server_sink_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tcp_server_sink_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tcp_server_sink_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tcp_server_sink_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tcp_server_sink_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tcp_server_sink_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tcp_server_sink_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tcp_server_sink_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tcp_server_sink_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tcp_server_sink_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tcp_server_sink_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tcp_server_sink_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tcp_server_sink_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tcp_server_sink_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tcp_server_sink_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tcp_server_sink_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tcp_server_sink_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tcp_server_sink_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tcp_server_sink_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tcp_server_sink_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tcp_server_sink_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tcp_server_sink_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tcp_server_sink_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tcp_server_sink_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tcp_server_sink_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tcp_server_sink_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tcp_server_sink_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tcp_server_sink_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tcp_server_sink_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tcp_server_sink_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tcp_server_sink_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tcp_server_sink_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tcp_server_sink_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tcp_server_sink_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tcp_server_sink > *arg1 = (boost::shared_ptr< gr::blocks::tcp_server_sink > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tcp_server_sink_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tcp_server_sink_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tcp_server_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tcp_server_sink > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tcp_server_sink_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tcp_server_sink_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tcp_server_sink_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_test_tag_variable_rate_ff_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *)new boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_test_tag_variable_rate_ff_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::test_tag_variable_rate_ff *arg1 = (gr::blocks::test_tag_variable_rate_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_test_tag_variable_rate_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__test_tag_variable_rate_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_test_tag_variable_rate_ff_sptr" "', argument " "1"" of type '" "gr::blocks::test_tag_variable_rate_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::test_tag_variable_rate_ff * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *)new boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_test_tag_variable_rate_ff_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_test_tag_variable_rate_ff_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__test_tag_variable_rate_ff, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_test_tag_variable_rate_ff_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_test_tag_variable_rate_ff_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff >::shared_ptr(gr::blocks::test_tag_variable_rate_ff *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::test_tag_variable_rate_ff *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (gr::blocks::test_tag_variable_rate_ff *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__test_tag_variable_rate_ff, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_test_tag_variable_rate_ff_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_test_tag_variable_rate_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_test_tag_variable_rate_ff_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  bool arg2 = (bool) false ;
  double arg3 = (double) 0.001 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "update_once",(char *) "update_step", NULL 
  };
  gr::blocks::test_tag_variable_rate_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:test_tag_variable_rate_ff_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_make" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "test_tag_variable_rate_ff_sptr_make" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::test_tag_variable_rate_ff::sptr(static_cast< const gr::blocks::test_tag_variable_rate_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "test_tag_variable_rate_ff_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_test_tag_variable_rate_ff_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_test_tag_variable_rate_ff_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'test_tag_variable_rate_ff_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:test_tag_variable_rate_ff_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:test_tag_variable_rate_ff_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:test_tag_variable_rate_ff_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:test_tag_variable_rate_ff_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:test_tag_variable_rate_ff_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:test_tag_variable_rate_ff_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "test_tag_variable_rate_ff_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_test_tag_variable_rate_ff_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_test_tag_variable_rate_ff_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'test_tag_variable_rate_ff_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:test_tag_variable_rate_ff_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "test_tag_variable_rate_ff_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_test_tag_variable_rate_ff_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_test_tag_variable_rate_ff_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'test_tag_variable_rate_ff_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'test_tag_variable_rate_ff_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'test_tag_variable_rate_ff_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:test_tag_variable_rate_ff_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "test_tag_variable_rate_ff_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "test_tag_variable_rate_ff_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:test_tag_variable_rate_ff_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:test_tag_variable_rate_ff_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test_tag_variable_rate_ff_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "test_tag_variable_rate_ff_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:test_tag_variable_rate_ff_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "test_tag_variable_rate_ff_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:test_tag_variable_rate_ff_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "test_tag_variable_rate_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "test_tag_variable_rate_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "test_tag_variable_rate_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "test_tag_variable_rate_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"test_tag_variable_rate_ff_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_test_tag_variable_rate_ff_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *arg1 = (boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:test_tag_variable_rate_ff_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_tag_variable_rate_ff_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "test_tag_variable_rate_ff_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "test_tag_variable_rate_ff_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *test_tag_variable_rate_ff_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_threshold_ff_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::threshold_ff > *)new boost::shared_ptr< gr::blocks::threshold_ff >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_threshold_ff_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::threshold_ff *arg1 = (gr::blocks::threshold_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::threshold_ff > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_threshold_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__threshold_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_threshold_ff_sptr" "', argument " "1"" of type '" "gr::blocks::threshold_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::threshold_ff * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::threshold_ff > *)new boost::shared_ptr< gr::blocks::threshold_ff >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_threshold_ff_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_threshold_ff_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__threshold_ff, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_threshold_ff_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_threshold_ff_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::threshold_ff >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::threshold_ff >::shared_ptr(gr::blocks::threshold_ff *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::threshold_ff *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (gr::blocks::threshold_ff *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__threshold_ff, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_threshold_ff_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_threshold_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_threshold_ff_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 = (float) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lo",(char *) "hi",(char *) "initial_state", NULL 
  };
  gr::blocks::threshold_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:threshold_ff_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "threshold_ff_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "threshold_ff_sptr_make" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::threshold_ff::sptr(static_cast< const gr::blocks::threshold_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_lo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_lo",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_lo" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->lo();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_lo(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lo", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_set_lo",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_lo" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_set_lo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_lo(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_hi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_hi",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_hi" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->hi();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_hi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "hi", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_set_hi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_hi" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_set_hi" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_hi(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_last_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_last_state",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_last_state" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->last_state();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_last_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "last_state", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_set_last_state",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_last_state" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_set_last_state" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_last_state(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "threshold_ff_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_threshold_ff_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_threshold_ff_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'threshold_ff_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "threshold_ff_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_threshold_ff_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_threshold_ff_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'threshold_ff_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "threshold_ff_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_threshold_ff_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_threshold_ff_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'threshold_ff_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_threshold_ff_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_threshold_ff_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'threshold_ff_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_threshold_ff_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_threshold_ff_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'threshold_ff_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_threshold_ff_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_threshold_ff_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'threshold_ff_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_threshold_ff_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_threshold_ff_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'threshold_ff_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_threshold_ff_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_threshold_ff_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'threshold_ff_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_threshold_ff_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_threshold_ff_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'threshold_ff_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "threshold_ff_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "threshold_ff_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:threshold_ff_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "threshold_ff_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "threshold_ff_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "threshold_ff_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:threshold_ff_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "threshold_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "threshold_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "threshold_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "threshold_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"threshold_ff_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_threshold_ff_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::threshold_ff > *arg1 = (boost::shared_ptr< gr::blocks::threshold_ff > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:threshold_ff_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "threshold_ff_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::threshold_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::threshold_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "threshold_ff_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "threshold_ff_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *threshold_ff_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__threshold_ff_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_transcendental_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::transcendental > *)new boost::shared_ptr< gr::blocks::transcendental >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_transcendental_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::transcendental *arg1 = (gr::blocks::transcendental *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::transcendental > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_transcendental_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__transcendental, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_transcendental_sptr" "', argument " "1"" of type '" "gr::blocks::transcendental *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::transcendental * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::transcendental > *)new boost::shared_ptr< gr::blocks::transcendental >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_transcendental_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_transcendental_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__transcendental, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_transcendental_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_transcendental_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::transcendental >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::transcendental >::shared_ptr(gr::blocks::transcendental *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::transcendental *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (gr::blocks::transcendental *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__transcendental, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_transcendental_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_transcendental_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_transcendental_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  std::string *arg2 = 0 ;
  std::string const &arg3_defvalue = "float" ;
  std::string *arg3 = (std::string *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name",(char *) "type", NULL 
  };
  gr::blocks::transcendental::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:transcendental_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transcendental_sptr_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transcendental_sptr_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (obj2) {
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string(obj2, &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "transcendental_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transcendental_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
      }
      arg3 = ptr;
    }
  }
  {
    try {
      result = (*arg1)->make((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::transcendental::sptr(static_cast< const gr::blocks::transcendental::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transcendental_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_transcendental_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_transcendental_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'transcendental_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:transcendental_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:transcendental_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:transcendental_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:transcendental_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:transcendental_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:transcendental_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transcendental_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_transcendental_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_transcendental_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'transcendental_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:transcendental_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transcendental_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_transcendental_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_transcendental_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'transcendental_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_transcendental_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_transcendental_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'transcendental_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_transcendental_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_transcendental_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'transcendental_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_transcendental_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_transcendental_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'transcendental_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_transcendental_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_transcendental_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'transcendental_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_transcendental_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_transcendental_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'transcendental_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_transcendental_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_transcendental_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'transcendental_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:transcendental_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transcendental_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transcendental_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:transcendental_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:transcendental_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transcendental_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transcendental_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:transcendental_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "transcendental_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:transcendental_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transcendental_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transcendental_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "transcendental_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transcendental_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"transcendental_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_transcendental_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::transcendental > *arg1 = (boost::shared_ptr< gr::blocks::transcendental > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:transcendental_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transcendental_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::transcendental > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::transcendental > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transcendental_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transcendental_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *transcendental_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__transcendental_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tuntap_pdu_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tuntap_pdu > *)new boost::shared_ptr< gr::blocks::tuntap_pdu >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tuntap_pdu_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::tuntap_pdu *arg1 = (gr::blocks::tuntap_pdu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tuntap_pdu_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__tuntap_pdu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tuntap_pdu_sptr" "', argument " "1"" of type '" "gr::blocks::tuntap_pdu *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::tuntap_pdu * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::tuntap_pdu > *)new boost::shared_ptr< gr::blocks::tuntap_pdu >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tuntap_pdu_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tuntap_pdu_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__tuntap_pdu, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tuntap_pdu_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tuntap_pdu_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::tuntap_pdu >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::tuntap_pdu >::shared_ptr(gr::blocks::tuntap_pdu *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::tuntap_pdu *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (gr::blocks::tuntap_pdu *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__tuntap_pdu, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tuntap_pdu_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tuntap_pdu_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tuntap_pdu_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  std::string arg2 ;
  int arg3 = (int) 10000 ;
  bool arg4 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "dev",(char *) "MTU",(char *) "istunflag", NULL 
  };
  gr::blocks::tuntap_pdu::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:tuntap_pdu_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tuntap_pdu_sptr_make" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tuntap_pdu_sptr_make" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "tuntap_pdu_sptr_make" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::tuntap_pdu::sptr(static_cast< const gr::blocks::tuntap_pdu::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tuntap_pdu_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tuntap_pdu_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tuntap_pdu_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tuntap_pdu_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tuntap_pdu_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tuntap_pdu_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tuntap_pdu_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tuntap_pdu_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tuntap_pdu_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tuntap_pdu_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tuntap_pdu_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tuntap_pdu_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tuntap_pdu_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tuntap_pdu_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tuntap_pdu_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tuntap_pdu_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tuntap_pdu_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tuntap_pdu_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tuntap_pdu_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tuntap_pdu_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tuntap_pdu_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tuntap_pdu_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tuntap_pdu_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tuntap_pdu_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tuntap_pdu_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tuntap_pdu_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tuntap_pdu_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tuntap_pdu_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tuntap_pdu_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tuntap_pdu_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tuntap_pdu_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tuntap_pdu_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tuntap_pdu_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tuntap_pdu_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tuntap_pdu_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tuntap_pdu_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tuntap_pdu_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tuntap_pdu_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tuntap_pdu_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tuntap_pdu_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tuntap_pdu_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tuntap_pdu_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tuntap_pdu_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tuntap_pdu_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tuntap_pdu_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tuntap_pdu_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tuntap_pdu_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tuntap_pdu_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tuntap_pdu_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tuntap_pdu_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tuntap_pdu_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tuntap_pdu_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tuntap_pdu_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::tuntap_pdu > *arg1 = (boost::shared_ptr< gr::blocks::tuntap_pdu > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tuntap_pdu_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tuntap_pdu_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::tuntap_pdu > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::tuntap_pdu > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tuntap_pdu_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tuntap_pdu_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tuntap_pdu_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_uchar_to_float_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::uchar_to_float > *)new boost::shared_ptr< gr::blocks::uchar_to_float >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_uchar_to_float_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::uchar_to_float *arg1 = (gr::blocks::uchar_to_float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::uchar_to_float > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_uchar_to_float_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__uchar_to_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_uchar_to_float_sptr" "', argument " "1"" of type '" "gr::blocks::uchar_to_float *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::uchar_to_float * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::uchar_to_float > *)new boost::shared_ptr< gr::blocks::uchar_to_float >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_uchar_to_float_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_uchar_to_float_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__uchar_to_float, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_uchar_to_float_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_uchar_to_float_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::uchar_to_float >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::uchar_to_float >::shared_ptr(gr::blocks::uchar_to_float *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::uchar_to_float *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (gr::blocks::uchar_to_float *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__uchar_to_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_uchar_to_float_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_uchar_to_float_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_uchar_to_float_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::uchar_to_float::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_make",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->make();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::uchar_to_float::sptr(static_cast< const gr::blocks::uchar_to_float::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uchar_to_float_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_uchar_to_float_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_uchar_to_float_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'uchar_to_float_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:uchar_to_float_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:uchar_to_float_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:uchar_to_float_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:uchar_to_float_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:uchar_to_float_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:uchar_to_float_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uchar_to_float_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_uchar_to_float_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_uchar_to_float_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'uchar_to_float_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:uchar_to_float_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uchar_to_float_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_uchar_to_float_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_uchar_to_float_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'uchar_to_float_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_uchar_to_float_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_uchar_to_float_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'uchar_to_float_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_uchar_to_float_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_uchar_to_float_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'uchar_to_float_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_uchar_to_float_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_uchar_to_float_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'uchar_to_float_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_uchar_to_float_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_uchar_to_float_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'uchar_to_float_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_uchar_to_float_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_uchar_to_float_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'uchar_to_float_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_uchar_to_float_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_uchar_to_float_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'uchar_to_float_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:uchar_to_float_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "uchar_to_float_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "uchar_to_float_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:uchar_to_float_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:uchar_to_float_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uchar_to_float_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uchar_to_float_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:uchar_to_float_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "uchar_to_float_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:uchar_to_float_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "uchar_to_float_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "uchar_to_float_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "uchar_to_float_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "uchar_to_float_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"uchar_to_float_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uchar_to_float_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::uchar_to_float > *arg1 = (boost::shared_ptr< gr::blocks::uchar_to_float > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:uchar_to_float_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uchar_to_float_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::uchar_to_float > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::uchar_to_float > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "uchar_to_float_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "uchar_to_float_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *uchar_to_float_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_udp_sink_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::udp_sink > *)new boost::shared_ptr< gr::blocks::udp_sink >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_udp_sink_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::udp_sink *arg1 = (gr::blocks::udp_sink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::udp_sink > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_udp_sink_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__udp_sink, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_udp_sink_sptr" "', argument " "1"" of type '" "gr::blocks::udp_sink *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::udp_sink * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::udp_sink > *)new boost::shared_ptr< gr::blocks::udp_sink >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_udp_sink_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_udp_sink_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__udp_sink, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_udp_sink_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_udp_sink_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::udp_sink >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::udp_sink >::shared_ptr(gr::blocks::udp_sink *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::udp_sink *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (gr::blocks::udp_sink *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__udp_sink, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_udp_sink_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_udp_sink_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_udp_sink_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 = (int) 1472 ;
  bool arg6 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "itemsize",(char *) "host",(char *) "port",(char *) "payload_size",(char *) "eof", NULL 
  };
  gr::blocks::udp_sink::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OO:udp_sink_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "udp_sink_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_sink_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "udp_sink_sptr_make" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "udp_sink_sptr_make" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_bool(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "udp_sink_sptr_make" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
  }
  {
    try {
      result = (*arg1)->make(arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::udp_sink::sptr(static_cast< const gr::blocks::udp_sink::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_payload_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_payload_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_payload_size" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (int)(*arg1)->payload_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_connect(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "host",(char *) "port", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:udp_sink_sptr_connect",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_connect" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_sink_sptr_connect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_sink_sptr_connect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_sink_sptr_connect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->connect((std::string const &)*arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_disconnect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_disconnect",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_disconnect" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      (*arg1)->disconnect();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_sink_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_sink_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_udp_sink_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_sink_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_sink_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_sink_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_sink_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_sink_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_sink_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_sink_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_sink_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_sink_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_udp_sink_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_sink_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_sink_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_sink_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_sink_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_udp_sink_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_sink_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_sink_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_sink_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_sink_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_sink_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_sink_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_sink_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_sink_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_sink_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_sink_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_sink_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_sink_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_sink_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_sink_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_sink_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_sink_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_sink_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_sink_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_sink_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_sink_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_sink_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_sink_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_sink_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:udp_sink_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_sink_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_sink_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_sink_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "udp_sink_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:udp_sink_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_sink_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_sink_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "udp_sink_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_sink_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_sink_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_sink_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_sink > *arg1 = (boost::shared_ptr< gr::blocks::udp_sink > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_sink_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_sink_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_sink > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_sink > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_sink_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_sink_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *udp_sink_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_sink_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_udp_source_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::udp_source > *)new boost::shared_ptr< gr::blocks::udp_source >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_udp_source_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::udp_source *arg1 = (gr::blocks::udp_source *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::udp_source > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_udp_source_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__udp_source, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_udp_source_sptr" "', argument " "1"" of type '" "gr::blocks::udp_source *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::udp_source * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::udp_source > *)new boost::shared_ptr< gr::blocks::udp_source >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_udp_source_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_udp_source_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__udp_source, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_udp_source_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_udp_source_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::udp_source >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::udp_source >::shared_ptr(gr::blocks::udp_source *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::udp_source *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (gr::blocks::udp_source *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__udp_source, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_udp_source_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_udp_source_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_udp_source_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 = (int) 1472 ;
  bool arg6 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "itemsize",(char *) "host",(char *) "port",(char *) "payload_size",(char *) "eof", NULL 
  };
  gr::blocks::udp_source::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OO:udp_source_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "udp_source_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_source_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "udp_source_sptr_make" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "udp_source_sptr_make" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_bool(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "udp_source_sptr_make" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
  }
  {
    try {
      result = (*arg1)->make(arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::udp_source::sptr(static_cast< const gr::blocks::udp_source::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_connect(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "host",(char *) "port", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:udp_source_sptr_connect",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_connect" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_source_sptr_connect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_source_sptr_connect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_source_sptr_connect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->connect((std::string const &)*arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_disconnect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_disconnect",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_disconnect" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      (*arg1)->disconnect();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_payload_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_payload_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_payload_size" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (int)(*arg1)->payload_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_get_port(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_get_port",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_get_port" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (int)(*arg1)->get_port();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_source_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_source_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_udp_source_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_source_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_source_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_source_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_source_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_source_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_source_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_source_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_source_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_source_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_udp_source_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_source_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_source_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_source_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_source_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_udp_source_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_source_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_source_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_source_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_source_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_source_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_source_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_source_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_source_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_source_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_source_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_source_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_source_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_source_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_source_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_source_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_source_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_udp_source_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_udp_source_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'udp_source_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_source_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_source_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_source_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_source_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:udp_source_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "udp_source_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "udp_source_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_source_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "udp_source_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:udp_source_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_source_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_source_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "udp_source_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_source_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"udp_source_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_udp_source_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::udp_source > *arg1 = (boost::shared_ptr< gr::blocks::udp_source > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:udp_source_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "udp_source_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::udp_source > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::udp_source > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "udp_source_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "udp_source_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *udp_source_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__udp_source_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_unpack_k_bits_bb_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *)new boost::shared_ptr< gr::blocks::unpack_k_bits_bb >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unpack_k_bits_bb_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::unpack_k_bits_bb *arg1 = (gr::blocks::unpack_k_bits_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_unpack_k_bits_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__unpack_k_bits_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_unpack_k_bits_bb_sptr" "', argument " "1"" of type '" "gr::blocks::unpack_k_bits_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::unpack_k_bits_bb * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *)new boost::shared_ptr< gr::blocks::unpack_k_bits_bb >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unpack_k_bits_bb_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_unpack_k_bits_bb_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__unpack_k_bits_bb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_unpack_k_bits_bb_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_unpack_k_bits_bb_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::unpack_k_bits_bb >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::unpack_k_bits_bb >::shared_ptr(gr::blocks::unpack_k_bits_bb *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::unpack_k_bits_bb *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (gr::blocks::unpack_k_bits_bb *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__unpack_k_bits_bb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unpack_k_bits_bb_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_unpack_k_bits_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unpack_k_bits_bb_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "k", NULL 
  };
  gr::blocks::unpack_k_bits_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_make",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_make" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (*arg1)->make(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::unpack_k_bits_bb::sptr(static_cast< const gr::blocks::unpack_k_bits_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpack_k_bits_bb_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpack_k_bits_bb_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpack_k_bits_bb_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpack_k_bits_bb_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpack_k_bits_bb_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpack_k_bits_bb_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpack_k_bits_bb_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpack_k_bits_bb_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpack_k_bits_bb_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpack_k_bits_bb_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpack_k_bits_bb_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpack_k_bits_bb_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpack_k_bits_bb_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpack_k_bits_bb_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpack_k_bits_bb_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpack_k_bits_bb_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpack_k_bits_bb_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpack_k_bits_bb_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpack_k_bits_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpack_k_bits_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:unpack_k_bits_bb_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpack_k_bits_bb_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpack_k_bits_bb_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "unpack_k_bits_bb_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:unpack_k_bits_bb_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpack_k_bits_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpack_k_bits_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unpack_k_bits_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpack_k_bits_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpack_k_bits_bb_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpack_k_bits_bb_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpack_k_bits_bb_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_k_bits_bb_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpack_k_bits_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpack_k_bits_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpack_k_bits_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unpack_k_bits_bb_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_unpacked_to_packed_bb_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *)new boost::shared_ptr< gr::blocks::unpacked_to_packed_bb >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unpacked_to_packed_bb_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::unpacked_to_packed_bb *arg1 = (gr::blocks::unpacked_to_packed_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_unpacked_to_packed_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__unpacked_to_packed_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_unpacked_to_packed_bb_sptr" "', argument " "1"" of type '" "gr::blocks::unpacked_to_packed_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::unpacked_to_packed_bb * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *)new boost::shared_ptr< gr::blocks::unpacked_to_packed_bb >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unpacked_to_packed_bb_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_unpacked_to_packed_bb_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__unpacked_to_packed_bb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_unpacked_to_packed_bb_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_unpacked_to_packed_bb_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::unpacked_to_packed_bb >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::unpacked_to_packed_bb >::shared_ptr(gr::blocks::unpacked_to_packed_bb *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::unpacked_to_packed_bb *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (gr::blocks::unpacked_to_packed_bb *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__unpacked_to_packed_bb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unpacked_to_packed_bb_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_unpacked_to_packed_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unpacked_to_packed_bb_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  unsigned int arg2 ;
  gr::endianness_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "bits_per_chunk",(char *) "endianness", NULL 
  };
  gr::blocks::unpacked_to_packed_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:unpacked_to_packed_bb_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_make" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_bb_sptr_make" "', argument " "3"" of type '" "gr::endianness_t""'");
  } 
  arg3 = static_cast< gr::endianness_t >(val3);
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::unpacked_to_packed_bb::sptr(static_cast< const gr::blocks::unpacked_to_packed_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_bb_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_bb_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpacked_to_packed_bb_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_bb_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_bb_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_bb_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpacked_to_packed_bb_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_bb_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_bb_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_bb_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpacked_to_packed_bb_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_bb_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_bb_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_bb_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_bb_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_bb_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpacked_to_packed_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:unpacked_to_packed_bb_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_bb_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_bb_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "unpacked_to_packed_bb_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:unpacked_to_packed_bb_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpacked_to_packed_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unpacked_to_packed_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_bb_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_bb_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_bb_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_bb_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpacked_to_packed_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unpacked_to_packed_bb_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_unpacked_to_packed_ss_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *)new boost::shared_ptr< gr::blocks::unpacked_to_packed_ss >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unpacked_to_packed_ss_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::unpacked_to_packed_ss *arg1 = (gr::blocks::unpacked_to_packed_ss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_unpacked_to_packed_ss_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__unpacked_to_packed_ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_unpacked_to_packed_ss_sptr" "', argument " "1"" of type '" "gr::blocks::unpacked_to_packed_ss *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::unpacked_to_packed_ss * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *)new boost::shared_ptr< gr::blocks::unpacked_to_packed_ss >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unpacked_to_packed_ss_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_unpacked_to_packed_ss_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__unpacked_to_packed_ss, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_unpacked_to_packed_ss_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_unpacked_to_packed_ss_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::unpacked_to_packed_ss >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::unpacked_to_packed_ss >::shared_ptr(gr::blocks::unpacked_to_packed_ss *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::unpacked_to_packed_ss *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (gr::blocks::unpacked_to_packed_ss *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__unpacked_to_packed_ss, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unpacked_to_packed_ss_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_unpacked_to_packed_ss_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unpacked_to_packed_ss_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  unsigned int arg2 ;
  gr::endianness_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "bits_per_chunk",(char *) "endianness", NULL 
  };
  gr::blocks::unpacked_to_packed_ss::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:unpacked_to_packed_ss_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_make" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_ss_sptr_make" "', argument " "3"" of type '" "gr::endianness_t""'");
  } 
  arg3 = static_cast< gr::endianness_t >(val3);
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::unpacked_to_packed_ss::sptr(static_cast< const gr::blocks::unpacked_to_packed_ss::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_ss_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ss_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpacked_to_packed_ss_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ss_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_ss_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ss_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpacked_to_packed_ss_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ss_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_ss_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ss_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpacked_to_packed_ss_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ss_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ss_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ss_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ss_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ss_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpacked_to_packed_ss_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_ss_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:unpacked_to_packed_ss_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ss_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_ss_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "unpacked_to_packed_ss_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:unpacked_to_packed_ss_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpacked_to_packed_ss_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_ss_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unpacked_to_packed_ss_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_ss_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ss_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ss_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ss_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ss_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpacked_to_packed_ss_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_ss_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unpacked_to_packed_ss_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_unpacked_to_packed_ii_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *)new boost::shared_ptr< gr::blocks::unpacked_to_packed_ii >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unpacked_to_packed_ii_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::unpacked_to_packed_ii *arg1 = (gr::blocks::unpacked_to_packed_ii *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_unpacked_to_packed_ii_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__unpacked_to_packed_ii, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_unpacked_to_packed_ii_sptr" "', argument " "1"" of type '" "gr::blocks::unpacked_to_packed_ii *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::unpacked_to_packed_ii * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *)new boost::shared_ptr< gr::blocks::unpacked_to_packed_ii >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unpacked_to_packed_ii_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_unpacked_to_packed_ii_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__unpacked_to_packed_ii, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_unpacked_to_packed_ii_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_unpacked_to_packed_ii_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::unpacked_to_packed_ii >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::unpacked_to_packed_ii >::shared_ptr(gr::blocks::unpacked_to_packed_ii *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::unpacked_to_packed_ii *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (gr::blocks::unpacked_to_packed_ii *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__unpacked_to_packed_ii, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unpacked_to_packed_ii_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_unpacked_to_packed_ii_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unpacked_to_packed_ii_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  unsigned int arg2 ;
  gr::endianness_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "bits_per_chunk",(char *) "endianness", NULL 
  };
  gr::blocks::unpacked_to_packed_ii::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:unpacked_to_packed_ii_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_make" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_ii_sptr_make" "', argument " "3"" of type '" "gr::endianness_t""'");
  } 
  arg3 = static_cast< gr::endianness_t >(val3);
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::unpacked_to_packed_ii::sptr(static_cast< const gr::blocks::unpacked_to_packed_ii::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_ii_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ii_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpacked_to_packed_ii_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ii_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_ii_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ii_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpacked_to_packed_ii_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ii_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_ii_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ii_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_unpacked_to_packed_ii_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ii_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ii_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ii_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ii_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'unpacked_to_packed_ii_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpacked_to_packed_ii_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_ii_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:unpacked_to_packed_ii_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unpacked_to_packed_ii_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "unpacked_to_packed_ii_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "unpacked_to_packed_ii_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:unpacked_to_packed_ii_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpacked_to_packed_ii_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_ii_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unpacked_to_packed_ii_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_ii_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"unpacked_to_packed_ii_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unpacked_to_packed_ii_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *arg1 = (boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:unpacked_to_packed_ii_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpacked_to_packed_ii_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unpacked_to_packed_ii_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unpacked_to_packed_ii_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unpacked_to_packed_ii_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_vco_f_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::vco_f > *)new boost::shared_ptr< gr::blocks::vco_f >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vco_f_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::vco_f *arg1 = (gr::blocks::vco_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::vco_f > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_vco_f_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__vco_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vco_f_sptr" "', argument " "1"" of type '" "gr::blocks::vco_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::vco_f * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::vco_f > *)new boost::shared_ptr< gr::blocks::vco_f >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vco_f_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vco_f_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__vco_f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vco_f_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vco_f_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::vco_f >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::vco_f >::shared_ptr(gr::blocks::vco_f *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::vco_f *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (gr::blocks::vco_f *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__vco_f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vco_f_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_vco_f_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vco_f_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_rate",(char *) "sensitivity",(char *) "amplitude", NULL 
  };
  gr::blocks::vco_f::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:vco_f_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_f_sptr_make" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vco_f_sptr_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::vco_f::sptr(static_cast< const gr::blocks::vco_f::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_f_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_f_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vco_f_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_f_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_f_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_f_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_f_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_f_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_f_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_f_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_f_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_f_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vco_f_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_f_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_f_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_f_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_f_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vco_f_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_f_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_f_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_f_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_f_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_f_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_f_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_f_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_f_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_f_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_f_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_f_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_f_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_f_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_f_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_f_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_f_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_f_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_f_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_f_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_f_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vco_f_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vco_f_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_f_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vco_f_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_f_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_f_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_f_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "vco_f_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vco_f_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vco_f_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vco_f_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vco_f_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vco_f_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_f_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_f_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_f > *arg1 = (boost::shared_ptr< gr::blocks::vco_f > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_f_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_f_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_f > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vco_f_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vco_f_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vco_f_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_f_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_vco_c_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::vco_c > *)new boost::shared_ptr< gr::blocks::vco_c >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vco_c_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::vco_c *arg1 = (gr::blocks::vco_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::vco_c > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_vco_c_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__vco_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vco_c_sptr" "', argument " "1"" of type '" "gr::blocks::vco_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::vco_c * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::vco_c > *)new boost::shared_ptr< gr::blocks::vco_c >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vco_c_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vco_c_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__vco_c, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vco_c_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vco_c_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::vco_c >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::vco_c >::shared_ptr(gr::blocks::vco_c *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::vco_c *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (gr::blocks::vco_c *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__vco_c, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vco_c_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_vco_c_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vco_c_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_rate",(char *) "sensitivity",(char *) "amplitude", NULL 
  };
  gr::blocks::vco_c::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:vco_c_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_c_sptr_make" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vco_c_sptr_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::vco_c::sptr(static_cast< const gr::blocks::vco_c::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_c_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_c_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vco_c_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_c_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_c_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_c_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_c_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_c_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_c_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_c_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_c_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_c_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vco_c_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_c_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_c_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_c_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_c_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vco_c_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_c_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_c_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_c_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_c_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_c_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_c_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_c_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_c_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_c_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_c_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_c_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_c_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_c_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_c_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_c_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_c_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vco_c_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vco_c_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vco_c_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_c_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vco_c_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vco_c_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_c_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vco_c_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vco_c_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vco_c_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_c_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "vco_c_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:vco_c_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vco_c_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vco_c_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vco_c_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vco_c_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"vco_c_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vco_c_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::vco_c > *arg1 = (boost::shared_ptr< gr::blocks::vco_c > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:vco_c_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vco_c_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::vco_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::vco_c > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vco_c_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vco_c_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vco_c_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__vco_c_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_xor_bb_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::xor_bb > *)new boost::shared_ptr< gr::blocks::xor_bb >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_xor_bb_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::xor_bb *arg1 = (gr::blocks::xor_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::xor_bb > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_xor_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__xor_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_xor_bb_sptr" "', argument " "1"" of type '" "gr::blocks::xor_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::xor_bb * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::xor_bb > *)new boost::shared_ptr< gr::blocks::xor_bb >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_xor_bb_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_xor_bb_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__xor_bb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_xor_bb_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_xor_bb_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::xor_bb >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::xor_bb >::shared_ptr(gr::blocks::xor_bb *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::xor_bb *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (gr::blocks::xor_bb *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__xor_bb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_xor_bb_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_xor_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_xor_bb_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "vlen", NULL 
  };
  gr::blocks::xor_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:xor_bb_sptr_make",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_make" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  {
    try {
      result = (*arg1)->make(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::xor_bb::sptr(static_cast< const gr::blocks::xor_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_bb_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_bb_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_xor_bb_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_bb_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_bb_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_bb_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_bb_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_bb_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_bb_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_bb_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_bb_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_bb_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_xor_bb_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_bb_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_bb_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_bb_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_bb_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_xor_bb_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_bb_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_bb_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_bb_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_bb_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_bb_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_bb_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_bb_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_bb_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_bb_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_bb_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_bb_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_bb_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_bb_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_bb_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_bb_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_bb_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_bb_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_bb_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_bb_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_bb_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xor_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_bb_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:xor_bb_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_bb_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_bb_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_bb_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "xor_bb_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:xor_bb_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xor_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "xor_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_bb_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_bb_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_bb > *arg1 = (boost::shared_ptr< gr::blocks::xor_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_bb_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_bb_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xor_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *xor_bb_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_bb_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_xor_ss_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::xor_ss > *)new boost::shared_ptr< gr::blocks::xor_ss >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_xor_ss_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::xor_ss *arg1 = (gr::blocks::xor_ss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::xor_ss > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_xor_ss_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__xor_ss, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_xor_ss_sptr" "', argument " "1"" of type '" "gr::blocks::xor_ss *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::xor_ss * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::xor_ss > *)new boost::shared_ptr< gr::blocks::xor_ss >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_xor_ss_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_xor_ss_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__xor_ss, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_xor_ss_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_xor_ss_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::xor_ss >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::xor_ss >::shared_ptr(gr::blocks::xor_ss *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::xor_ss *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (gr::blocks::xor_ss *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__xor_ss, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_xor_ss_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_xor_ss_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_xor_ss_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "vlen", NULL 
  };
  gr::blocks::xor_ss::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:xor_ss_sptr_make",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_make" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  {
    try {
      result = (*arg1)->make(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::xor_ss::sptr(static_cast< const gr::blocks::xor_ss::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_ss_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ss_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_xor_ss_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ss_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ss_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ss_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ss_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ss_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ss_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ss_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_ss_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ss_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_xor_ss_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ss_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ss_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_ss_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ss_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_xor_ss_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ss_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ss_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ss_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ss_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ss_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ss_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ss_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ss_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ss_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ss_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ss_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ss_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ss_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ss_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ss_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ss_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ss_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ss_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ss_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ss_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xor_ss_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_ss_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ss_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:xor_ss_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ss_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_ss_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ss_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "xor_ss_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:xor_ss_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xor_ss_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_ss_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "xor_ss_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_ss_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ss_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ss_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ss > *arg1 = (boost::shared_ptr< gr::blocks::xor_ss > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ss_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ss_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ss > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ss > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xor_ss_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_ss_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *xor_ss_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ss_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_xor_ii_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::blocks::xor_ii > *)new boost::shared_ptr< gr::blocks::xor_ii >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_xor_ii_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::blocks::xor_ii *arg1 = (gr::blocks::xor_ii *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::blocks::xor_ii > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_xor_ii_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__blocks__xor_ii, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_xor_ii_sptr" "', argument " "1"" of type '" "gr::blocks::xor_ii *""'"); 
  }
  arg1 = reinterpret_cast< gr::blocks::xor_ii * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::blocks::xor_ii > *)new boost::shared_ptr< gr::blocks::xor_ii >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_xor_ii_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_xor_ii_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__blocks__xor_ii, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_xor_ii_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_xor_ii_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::blocks::xor_ii >::shared_ptr()\n"
    "    boost::shared_ptr< gr::blocks::xor_ii >::shared_ptr(gr::blocks::xor_ii *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::blocks::xor_ii *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (gr::blocks::xor_ii *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__blocks__xor_ii, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_xor_ii_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_xor_ii_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_xor_ii_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "vlen", NULL 
  };
  gr::blocks::xor_ii::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:xor_ii_sptr_make",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_make" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  {
    try {
      result = (*arg1)->make(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::blocks::xor_ii::sptr(static_cast< const gr::blocks::xor_ii::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_ii_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ii_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_xor_ii_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ii_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ii_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ii_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ii_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ii_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ii_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ii_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_ii_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ii_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_xor_ii_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ii_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ii_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_ii_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ii_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_xor_ii_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ii_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ii_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ii_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ii_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ii_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ii_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ii_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ii_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ii_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ii_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ii_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ii_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ii_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ii_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ii_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ii_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_xor_ii_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xor_ii_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'xor_ii_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ii_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xor_ii_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_ii_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ii_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:xor_ii_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xor_ii_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "xor_ii_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ii_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "xor_ii_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:xor_ii_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xor_ii_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_ii_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "xor_ii_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_ii_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"xor_ii_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xor_ii_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::blocks::xor_ii > *arg1 = (boost::shared_ptr< gr::blocks::xor_ii > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:xor_ii_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xor_ii_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::blocks::xor_ii > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::blocks::xor_ii > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xor_ii_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xor_ii_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *xor_ii_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__blocks__xor_ii_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"high_res_timer_now", _wrap_high_res_timer_now, METH_VARARGS, (char *)"high_res_timer_now() -> gr::high_res_timer_type"},
	 { (char *)"high_res_timer_now_perfmon", _wrap_high_res_timer_now_perfmon, METH_VARARGS, (char *)"high_res_timer_now_perfmon() -> gr::high_res_timer_type"},
	 { (char *)"high_res_timer_tps", _wrap_high_res_timer_tps, METH_VARARGS, (char *)"high_res_timer_tps() -> gr::high_res_timer_type"},
	 { (char *)"high_res_timer_epoch", _wrap_high_res_timer_epoch, METH_VARARGS, (char *)"high_res_timer_epoch() -> gr::high_res_timer_type"},
	 { (char *)"pdu_port_id", _wrap_pdu_port_id, METH_VARARGS, (char *)"pdu_port_id() -> swig_int_ptr"},
	 { (char *)"itemsize", (PyCFunction) _wrap_itemsize, METH_VARARGS | METH_KEYWORDS, (char *)"itemsize(gr::blocks::pdu::vector_type type) -> size_t"},
	 { (char *)"type_matches", (PyCFunction) _wrap_type_matches, METH_VARARGS | METH_KEYWORDS, (char *)"type_matches(gr::blocks::pdu::vector_type type, swig_int_ptr v) -> bool"},
	 { (char *)"make_pdu_vector", (PyCFunction) _wrap_make_pdu_vector, METH_VARARGS | METH_KEYWORDS, (char *)"make_pdu_vector(gr::blocks::pdu::vector_type type, uint8_t const * buf, size_t items) -> swig_int_ptr"},
	 { (char *)"type_from_pmt", (PyCFunction) _wrap_type_from_pmt, METH_VARARGS | METH_KEYWORDS, (char *)"type_from_pmt(swig_int_ptr vector) -> gr::blocks::pdu::vector_type"},
	 { (char *)"tag_gate_set_propagation", (PyCFunction) _wrap_tag_gate_set_propagation, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_set_propagation(tag_gate self, bool propagate_tags)"},
	 { (char *)"tag_gate_make", (PyCFunction) _wrap_tag_gate_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tag_gate_make(size_t item_size, bool propagate_tags=False) -> tag_gate_sptr\n"
		"\n"
		"Control tag propagation.\n"
		"\n"
		"Use this block to stop tags from propagating.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    item_size : Item size\n"
		"    propagate_tags : Set this to true to allow tags to pass through this block.\n"
		""},
	 { (char *)"tag_gate_set_single_key", (PyCFunction) _wrap_tag_gate_set_single_key, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tag_gate_set_single_key(tag_gate self, std::string const & single_key)\n"
		"\n"
		"Only gate stream tags with one specific key instead of all keys.\n"
		"\n"
		"If set to \"\", all tags will be affected by the gate. If set to \"foo\", all tags with key different from \"foo\" will pass through.\n"
		""},
	 { (char *)"tag_gate_single_key", _wrap_tag_gate_single_key, METH_VARARGS, (char *)"\n"
		"tag_gate_single_key(tag_gate self) -> std::string\n"
		"\n"
		"Get the current single key.\n"
		""},
	 { (char *)"delete_tag_gate", _wrap_delete_tag_gate, METH_VARARGS, (char *)"delete_tag_gate(tag_gate self)"},
	 { (char *)"tag_gate_swigregister", tag_gate_swigregister, METH_VARARGS, NULL},
	 { (char *)"tag_share_make", (PyCFunction) _wrap_tag_share_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tag_share_make(size_t sizeof_io_item, size_t sizeof_share_item, size_t vlen=1) -> tag_share_sptr\n"
		"\n"
		"Adds tags from Input 1 onto Input 0's stream.\n"
		"\n"
		"This block utilizes the GNU Radio runtime's tag propagation policy to transfer or share Input 1's tags to Input 0's stream. This is useful when a signal is detected via a correlate_access_code_bb or a threshold crossing from a complex_to_mag_squared block. The tag from that detection is on the alternate stream, either bytes or floats. Often there is further signal processing that should be done on the complex stream. This block allows the detection tags to be added to the complex stream to trigger downstream processing without the need of redundant trigger inputs on all subsequent blocks.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    sizeof_io_item : The size of the Input 0/Output 0 stream type. Input 0 stream items will be directly copied to Output 0.\n"
		"    sizeof_share_item : The size of the Input 1 (tag share) stream type. This stream type does not have to match the input/output stream type. Tags from Input 1's items will be combined with Input 0's item tags and outputted on Output 0.\n"
		"    vlen : The vector size of the input and output stream items\n"
		""},
	 { (char *)"delete_tag_share", _wrap_delete_tag_share, METH_VARARGS, (char *)"delete_tag_share(tag_share self)"},
	 { (char *)"tag_share_swigregister", tag_share_swigregister, METH_VARARGS, NULL},
	 { (char *)"tagged_stream_align_make", (PyCFunction) _wrap_tagged_stream_align_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_stream_align_make(size_t itemsize, std::string const & lengthtagname) -> tagged_stream_align_sptr\n"
		"\n"
		"Align a stream to a tagged stream item.\n"
		"\n"
		"Takes an unaligned stream of tagged stream items and aligns to the first item\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make a tagged stream align\n"
		"\n"
		"Args:\n"
		"    itemsize : The size (in bytes) of the item datatype.\n"
		"    lengthtagname : Name of the TSB's length tag key.\n"
		""},
	 { (char *)"delete_tagged_stream_align", _wrap_delete_tagged_stream_align, METH_VARARGS, (char *)"delete_tagged_stream_align(tagged_stream_align self)"},
	 { (char *)"tagged_stream_align_swigregister", tagged_stream_align_swigregister, METH_VARARGS, NULL},
	 { (char *)"tagged_stream_mux_make", (PyCFunction) _wrap_tagged_stream_mux_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_stream_mux_make(size_t itemsize, std::string const & lengthtagname, unsigned int tag_preserve_head_pos=0) -> tagged_stream_mux_sptr\n"
		"\n"
		"Combines tagged streams.\n"
		"\n"
		"Takes N streams as input. Each stream is tagged with packet lengths. Packets are output sequentially from each input stream.\n"
		"\n"
		"The output signal has a new length tag, which is the sum of all individual length tags. The old length tags are discarded.\n"
		"\n"
		"All other tags are propagated as expected, i.e. they stay associated with the same input item. There are cases when this behaviour is undesirable. One special case is when a tag at the first element (the head item) of one input port must stay on the head item of the output port. To achieve this, set  to the port that will receive these special tags.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make a tagged stream mux block.\n"
		"\n"
		"Args:\n"
		"    itemsize : Items size (number of bytes per item)\n"
		"    lengthtagname : Length tag key\n"
		"    tag_preserve_head_pos : Preserves the head position of tags on this input port\n"
		""},
	 { (char *)"delete_tagged_stream_mux", _wrap_delete_tagged_stream_mux, METH_VARARGS, (char *)"delete_tagged_stream_mux(tagged_stream_mux self)"},
	 { (char *)"tagged_stream_mux_swigregister", tagged_stream_mux_swigregister, METH_VARARGS, NULL},
	 { (char *)"tagged_stream_multiply_length_set_scalar", (PyCFunction) _wrap_tagged_stream_multiply_length_set_scalar, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_set_scalar(tagged_stream_multiply_length self, double scalar)"},
	 { (char *)"tagged_stream_multiply_length_make", (PyCFunction) _wrap_tagged_stream_multiply_length_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_stream_multiply_length_make(size_t itemsize, std::string const & lengthtagname, double scalar) -> tagged_stream_multiply_length_sptr\n"
		"\n"
		"Allows scaling of a tagged stream length tag.\n"
		"\n"
		"Searches for a specific tagged stream length tag and multiplies that length by a constant - for constant rate change blocks in a tagged stream\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make a tagged stream multiply_length block.\n"
		"\n"
		"Args:\n"
		"    itemsize : Items size (number of bytes per item)\n"
		"    lengthtagname : Length tag key\n"
		"    scalar : value to scale length tag values by\n"
		""},
	 { (char *)"delete_tagged_stream_multiply_length", _wrap_delete_tagged_stream_multiply_length, METH_VARARGS, (char *)"delete_tagged_stream_multiply_length(tagged_stream_multiply_length self)"},
	 { (char *)"tagged_stream_multiply_length_swigregister", tagged_stream_multiply_length_swigregister, METH_VARARGS, NULL},
	 { (char *)"tagged_stream_to_pdu_make", (PyCFunction) _wrap_tagged_stream_to_pdu_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_stream_to_pdu_make(gr::blocks::pdu::vector_type type, std::string const & lengthtagname=\"packet_len\") -> tagged_stream_to_pdu_sptr\n"
		"\n"
		"Turns received stream data and tags into PDUs and sends them through a message port.\n"
		"\n"
		"The sent message is a PMT-pair (created by pmt::cons()). The first element is a dictionary containing all the tags. The second is a vector containing the actual data.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Construct a tagged_stream_to_pdu block.\n"
		"\n"
		"Args:\n"
		"    type : PDU type of pdu::vector_type\n"
		"    lengthtagname : The name of the tag that specifies how long the packet is.\n"
		""},
	 { (char *)"delete_tagged_stream_to_pdu", _wrap_delete_tagged_stream_to_pdu, METH_VARARGS, (char *)"delete_tagged_stream_to_pdu(tagged_stream_to_pdu self)"},
	 { (char *)"tagged_stream_to_pdu_swigregister", tagged_stream_to_pdu_swigregister, METH_VARARGS, NULL},
	 { (char *)"tags_strobe_make", (PyCFunction) _wrap_tags_strobe_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tags_strobe_make(size_t sizeof_stream_item, swig_int_ptr value, uint64_t nsamps, swig_int_ptr key=pmt::intern(\"strobe\")) -> tags_strobe_sptr\n"
		"\n"
		"Send tags at defined interval.\n"
		"\n"
		"Sends a tag with key 'strobe' and a user-defined value (as a PMT) every  number of samples. Useful for testing/debugging the tags system.\n"
		"\n"
		"Because tags are sent with a data stream, this is a source block that acts identical to a null_source block.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make a tags stobe block to send tags with value  every  number of samples.\n"
		"\n"
		"Args:\n"
		"    sizeof_stream_item : size of the stream items in bytes.\n"
		"    value : The value of the tags to send, as a PMT.\n"
		"    nsamps : the number of samples between each tag.\n"
		"    key : The tag key to sent\n"
		""},
	 { (char *)"tags_strobe_set_value", (PyCFunction) _wrap_tags_strobe_set_value, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tags_strobe_set_value(tags_strobe self, swig_int_ptr value)\n"
		"\n"
		"Reset the value of the tags being sent.\n"
		""},
	 { (char *)"tags_strobe_set_key", (PyCFunction) _wrap_tags_strobe_set_key, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tags_strobe_set_key(tags_strobe self, swig_int_ptr key)\n"
		"\n"
		"Change the tag key we are sending\n"
		""},
	 { (char *)"tags_strobe_value", _wrap_tags_strobe_value, METH_VARARGS, (char *)"\n"
		"tags_strobe_value(tags_strobe self) -> swig_int_ptr\n"
		"\n"
		"Get the value of the tags being sent.\n"
		""},
	 { (char *)"tags_strobe_key", _wrap_tags_strobe_key, METH_VARARGS, (char *)"\n"
		"tags_strobe_key(tags_strobe self) -> swig_int_ptr\n"
		"\n"
		"Get the key of the tags being sent.\n"
		""},
	 { (char *)"tags_strobe_set_nsamps", (PyCFunction) _wrap_tags_strobe_set_nsamps, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tags_strobe_set_nsamps(tags_strobe self, uint64_t nsamps)\n"
		"\n"
		"Reset the sending interval.\n"
		""},
	 { (char *)"tags_strobe_nsamps", _wrap_tags_strobe_nsamps, METH_VARARGS, (char *)"\n"
		"tags_strobe_nsamps(tags_strobe self) -> uint64_t\n"
		"\n"
		"Get the number of samples between the tag strobe.\n"
		""},
	 { (char *)"delete_tags_strobe", _wrap_delete_tags_strobe, METH_VARARGS, (char *)"delete_tags_strobe(tags_strobe self)"},
	 { (char *)"tags_strobe_swigregister", tags_strobe_swigregister, METH_VARARGS, NULL},
	 { (char *)"tcp_server_sink_make", (PyCFunction) _wrap_tcp_server_sink_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tcp_server_sink_make(size_t itemsize, std::string const & host, int port, bool noblock=False) -> tcp_server_sink_sptr\n"
		"\n"
		"Send stream trought an TCP socket.\n"
		"\n"
		"Listen for incoming TCP connection(s). Duplicate data for each opened connection. Optionally can wait until first client connects before streaming starts.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"TCP Server Sink Constructor.\n"
		"\n"
		"Args:\n"
		"    itemsize : The size (in bytes) of the item datatype\n"
		"    host : The name or IP address of interface to bind to.\n"
		"    port : Port where to listen.\n"
		"    noblock : If false, wait until first client connects before streaming starts. In non blocking mode (noblock=true), drop data onto floor if no client is connected.\n"
		""},
	 { (char *)"delete_tcp_server_sink", _wrap_delete_tcp_server_sink, METH_VARARGS, (char *)"delete_tcp_server_sink(tcp_server_sink self)"},
	 { (char *)"tcp_server_sink_swigregister", tcp_server_sink_swigregister, METH_VARARGS, NULL},
	 { (char *)"test_tag_variable_rate_ff_make", (PyCFunction) _wrap_test_tag_variable_rate_ff_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"test_tag_variable_rate_ff_make(bool update_once=False, double update_step=0.001) -> test_tag_variable_rate_ff_sptr\n"
		"\n"
		"Used for testing tag propagation.\n"
		"\n"
		"This block resamples the stream by a factor that starts at 0.5 but varies around by some random walk. The relative rate of the block is initialized to 0.5 and the random number generator is seeded based on the time. For each input, if the random number is >= 0.5, the relative rate is increased by ; otherwise, it is decreased by .\n"
		"\n"
		"The rate of the change of the resampling factor is set by the flag . If this is set to true, then the rate is only updated once per work function. If it is set to false (default), then the rate is changed with every input sample.\n"
		"\n"
		"The block's ctor sets the propagation policy to TPP_DONT to stop tags from automatically propagating. Instead, we handle the tag propagation ourselves from within the work function. Because the relative_rate changes so fast, the tag placement cannot be based on a single factor after the call to work and must be handled when the samples are and based on the current resampling rate.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build a test_tag_variable_rate_ff block.\n"
		"\n"
		"Args:\n"
		"    update_once : Update the resampling rate once per call to work (default=false).\n"
		"    update_step : How much to adjust the resampling rate by when the update occurs (default=0.001).\n"
		""},
	 { (char *)"delete_test_tag_variable_rate_ff", _wrap_delete_test_tag_variable_rate_ff, METH_VARARGS, (char *)"delete_test_tag_variable_rate_ff(test_tag_variable_rate_ff self)"},
	 { (char *)"test_tag_variable_rate_ff_swigregister", test_tag_variable_rate_ff_swigregister, METH_VARARGS, NULL},
	 { (char *)"threshold_ff_make", (PyCFunction) _wrap_threshold_ff_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"threshold_ff_make(float lo, float hi, float initial_state=0) -> threshold_ff_sptr\n"
		"\n"
		"Output a 1 or zero based on a threshold value.\n"
		"\n"
		"Test the incoming signal against a threshold. If the signal excedes the  value, it will output a 1 until the signal falls below the  value.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    lo : \n"
		"    hi : \n"
		"    initial_state : \n"
		""},
	 { (char *)"threshold_ff_lo", _wrap_threshold_ff_lo, METH_VARARGS, (char *)"threshold_ff_lo(threshold_ff self) -> float"},
	 { (char *)"threshold_ff_set_lo", (PyCFunction) _wrap_threshold_ff_set_lo, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_set_lo(threshold_ff self, float lo)"},
	 { (char *)"threshold_ff_hi", _wrap_threshold_ff_hi, METH_VARARGS, (char *)"threshold_ff_hi(threshold_ff self) -> float"},
	 { (char *)"threshold_ff_set_hi", (PyCFunction) _wrap_threshold_ff_set_hi, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_set_hi(threshold_ff self, float hi)"},
	 { (char *)"threshold_ff_last_state", _wrap_threshold_ff_last_state, METH_VARARGS, (char *)"threshold_ff_last_state(threshold_ff self) -> float"},
	 { (char *)"threshold_ff_set_last_state", (PyCFunction) _wrap_threshold_ff_set_last_state, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_set_last_state(threshold_ff self, float last_state)"},
	 { (char *)"delete_threshold_ff", _wrap_delete_threshold_ff, METH_VARARGS, (char *)"delete_threshold_ff(threshold_ff self)"},
	 { (char *)"threshold_ff_swigregister", threshold_ff_swigregister, METH_VARARGS, NULL},
	 { (char *)"transcendental_make", (PyCFunction) _wrap_transcendental_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"transcendental_make(std::string const & name, std::string const & type=\"float\") -> transcendental_sptr\n"
		"\n"
		"A block that performs various transcendental math operations.\n"
		"\n"
		"Possible function names can be found in the cmath library. IO may be either complex or real, double or single precision.\n"
		"\n"
		"Possible type strings: float, double, complex_float, complex_double\n"
		"\n"
		"output[i] = trans_fcn(input[i])\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    name : \n"
		"    type : \n"
		""},
	 { (char *)"delete_transcendental", _wrap_delete_transcendental, METH_VARARGS, (char *)"delete_transcendental(transcendental self)"},
	 { (char *)"transcendental_swigregister", transcendental_swigregister, METH_VARARGS, NULL},
	 { (char *)"tuntap_pdu_make", (PyCFunction) _wrap_tuntap_pdu_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tuntap_pdu_make(std::string dev, int MTU=10000, bool istunflag=False) -> tuntap_pdu_sptr\n"
		"\n"
		"Creates TUNTAP interface and translates traffic to PDUs.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Construct a TUNTAP PDU interface.\n"
		"\n"
		"Args:\n"
		"    dev : Device name to create\n"
		"    MTU : Maximum Transmission Unit size\n"
		"    istunflag : Flag to indicate TUN or Tap\n"
		""},
	 { (char *)"delete_tuntap_pdu", _wrap_delete_tuntap_pdu, METH_VARARGS, (char *)"delete_tuntap_pdu(tuntap_pdu self)"},
	 { (char *)"tuntap_pdu_swigregister", tuntap_pdu_swigregister, METH_VARARGS, NULL},
	 { (char *)"uchar_to_float_make", _wrap_uchar_to_float_make, METH_VARARGS, (char *)"\n"
		"uchar_to_float_make() -> uchar_to_float_sptr\n"
		"\n"
		"Convert stream of unsigned chars to a stream of floats.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build a uchar to float block.\n"
		""},
	 { (char *)"delete_uchar_to_float", _wrap_delete_uchar_to_float, METH_VARARGS, (char *)"delete_uchar_to_float(uchar_to_float self)"},
	 { (char *)"uchar_to_float_swigregister", uchar_to_float_swigregister, METH_VARARGS, NULL},
	 { (char *)"udp_sink_make", (PyCFunction) _wrap_udp_sink_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"udp_sink_make(size_t itemsize, std::string const & host, int port, int payload_size=1472, bool eof=True) -> udp_sink_sptr\n"
		"\n"
		"Write stream to an UDP socket.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"UDP Sink Constructor.\n"
		"\n"
		"Args:\n"
		"    itemsize : The size (in bytes) of the item datatype\n"
		"    host : The name or IP address of the receiving host; use NULL or None for no connection\n"
		"    port : Destination port to connect to on receiving host\n"
		"    payload_size : UDP payload size by default set to 1472 = (1500 MTU - (8 byte UDP header) - (20 byte IP header))\n"
		"    eof : Send zero-length packet on disconnect\n"
		""},
	 { (char *)"udp_sink_payload_size", _wrap_udp_sink_payload_size, METH_VARARGS, (char *)"\n"
		"udp_sink_payload_size(udp_sink self) -> int\n"
		"\n"
		"return the PAYLOAD_SIZE of the socket\n"
		""},
	 { (char *)"udp_sink_connect", (PyCFunction) _wrap_udp_sink_connect, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"udp_sink_connect(udp_sink self, std::string const & host, int port)\n"
		"\n"
		"Change the connection to a new destination.\n"
		"\n"
		"Calls disconnect() to terminate any current connection first.\n"
		""},
	 { (char *)"udp_sink_disconnect", _wrap_udp_sink_disconnect, METH_VARARGS, (char *)"\n"
		"udp_sink_disconnect(udp_sink self)\n"
		"\n"
		"Send zero-length packet (if eof is requested) then stop sending.\n"
		"\n"
		"Zero-byte packets can be interpreted as EOF by gr_udp_source. Note that disconnect occurs automatically when the sink is destroyed, but not when its top_block stops.\n"
		""},
	 { (char *)"delete_udp_sink", _wrap_delete_udp_sink, METH_VARARGS, (char *)"delete_udp_sink(udp_sink self)"},
	 { (char *)"udp_sink_swigregister", udp_sink_swigregister, METH_VARARGS, NULL},
	 { (char *)"udp_source_make", (PyCFunction) _wrap_udp_source_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"udp_source_make(size_t itemsize, std::string const & host, int port, int payload_size=1472, bool eof=True) -> udp_source_sptr\n"
		"\n"
		"Read stream from an UDP socket.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"UDP Source Constructor.\n"
		"\n"
		"Args:\n"
		"    itemsize : The size (in bytes) of the item datatype\n"
		"    host : The name or IP address of the transmitting host; can be NULL, None, or \"0.0.0.0\" to allow reading from any interface on the host\n"
		"    port : The port number on which to receive data; use 0 to have the system assign an unused port number\n"
		"    payload_size : UDP payload size by default set to 1472 = (1500 MTU - (8 byte UDP header) - (20 byte IP header))\n"
		"    eof : Interpret zero-length packet as EOF (default: true)\n"
		""},
	 { (char *)"udp_source_connect", (PyCFunction) _wrap_udp_source_connect, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"udp_source_connect(udp_source self, std::string const & host, int port)\n"
		"\n"
		"Change the connection to a new destination.\n"
		"\n"
		"Calls disconnect() to terminate any current connection first.\n"
		""},
	 { (char *)"udp_source_disconnect", _wrap_udp_source_disconnect, METH_VARARGS, (char *)"\n"
		"udp_source_disconnect(udp_source self)\n"
		"\n"
		"Cut the connection if we have one set up.\n"
		""},
	 { (char *)"udp_source_payload_size", _wrap_udp_source_payload_size, METH_VARARGS, (char *)"\n"
		"udp_source_payload_size(udp_source self) -> int\n"
		"\n"
		"return the PAYLOAD_SIZE of the socket\n"
		""},
	 { (char *)"udp_source_get_port", _wrap_udp_source_get_port, METH_VARARGS, (char *)"\n"
		"udp_source_get_port(udp_source self) -> int\n"
		"\n"
		"return the port number of the socket\n"
		""},
	 { (char *)"delete_udp_source", _wrap_delete_udp_source, METH_VARARGS, (char *)"delete_udp_source(udp_source self)"},
	 { (char *)"udp_source_swigregister", udp_source_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_unpack_k_bits", (PyCFunction) _wrap_new_unpack_k_bits, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"new_unpack_k_bits(unsigned int k) -> unpack_k_bits\n"
		"\n"
		"Make an unpack_k_bits object.\n"
		""},
	 { (char *)"delete_unpack_k_bits", _wrap_delete_unpack_k_bits, METH_VARARGS, (char *)"delete_unpack_k_bits(unpack_k_bits self)"},
	 { (char *)"unpack_k_bits_unpack", (PyCFunction) _wrap_unpack_k_bits_unpack, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"unpack_k_bits_unpack(unpack_k_bits self, unsigned char * bits, unsigned char const * bytes, int nbytes)\n"
		"\n"
		"Perform the unpacking.\n"
		"\n"
		"This function performs no bounds checking. It assumes that the input, , has of length  and that the output vector, , has k*nbytes available for writing.\n"
		""},
	 { (char *)"unpack_k_bits_unpack_rev", (PyCFunction) _wrap_unpack_k_bits_unpack_rev, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"unpack_k_bits_unpack_rev(unpack_k_bits self, unsigned char * bits, unsigned char const * bytes, int nbytes)\n"
		"\n"
		"Unpacks in reverse order from unpack().\n"
		""},
	 { (char *)"unpack_k_bits_k", _wrap_unpack_k_bits_k, METH_VARARGS, (char *)"unpack_k_bits_k(unpack_k_bits self) -> int"},
	 { (char *)"unpack_k_bits_swigregister", unpack_k_bits_swigregister, METH_VARARGS, NULL},
	 { (char *)"unpack_k_bits_bb_make", (PyCFunction) _wrap_unpack_k_bits_bb_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"unpack_k_bits_bb_make(unsigned int k) -> unpack_k_bits_bb_sptr\n"
		"\n"
		"Converts a byte with k relevant bits to k output bytes with 1 bit in the LSB.\n"
		"\n"
		"This block picks the K least significant bits from a byte, and expands them into K bytes of 0 or 1.\n"
		"\n"
		"Example: k = 4 in = [0xf5, 0x08] out = [0,1,0,1, 1,0,0,0]\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make an unpack_k_bits block.\n"
		"\n"
		"Args:\n"
		"    k : number of bits to unpack.\n"
		""},
	 { (char *)"delete_unpack_k_bits_bb", _wrap_delete_unpack_k_bits_bb, METH_VARARGS, (char *)"delete_unpack_k_bits_bb(unpack_k_bits_bb self)"},
	 { (char *)"unpack_k_bits_bb_swigregister", unpack_k_bits_bb_swigregister, METH_VARARGS, NULL},
	 { (char *)"unpacked_to_packed_bb_make", (PyCFunction) _wrap_unpacked_to_packed_bb_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"unpacked_to_packed_bb_make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> unpacked_to_packed_bb_sptr\n"
		"\n"
		"Convert a stream of unpacked bytes or shorts into a stream of packed bytes or shorts.\n"
		"\n"
		"input: stream of unsigned char; output: stream of unsigned char\n"
		"\n"
		"This is the inverse of gr::blocks::packed_to_unpacked_XX.\n"
		"\n"
		"The low  bits are extracted from each input byte or short. These bits are then packed densely into the output bytes or shorts, such that all 8 or 16 bits of the output bytes or shorts are filled with valid input bits. The right thing is done if bits_per_chunk is not a power of two.\n"
		"\n"
		"The combination of gr::blocks::packed_to_unpacked_XX followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    bits_per_chunk : \n"
		"    endianness : \n"
		""},
	 { (char *)"delete_unpacked_to_packed_bb", _wrap_delete_unpacked_to_packed_bb, METH_VARARGS, (char *)"delete_unpacked_to_packed_bb(unpacked_to_packed_bb self)"},
	 { (char *)"unpacked_to_packed_bb_swigregister", unpacked_to_packed_bb_swigregister, METH_VARARGS, NULL},
	 { (char *)"unpacked_to_packed_ss_make", (PyCFunction) _wrap_unpacked_to_packed_ss_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"unpacked_to_packed_ss_make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> unpacked_to_packed_ss_sptr\n"
		"\n"
		"Convert a stream of unpacked bytes or shorts into a stream of packed bytes or shorts.\n"
		"\n"
		"input: stream of short; output: stream of short\n"
		"\n"
		"This is the inverse of gr::blocks::packed_to_unpacked_XX.\n"
		"\n"
		"The low  bits are extracted from each input byte or short. These bits are then packed densely into the output bytes or shorts, such that all 8 or 16 bits of the output bytes or shorts are filled with valid input bits. The right thing is done if bits_per_chunk is not a power of two.\n"
		"\n"
		"The combination of gr::blocks::packed_to_unpacked_XX followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    bits_per_chunk : \n"
		"    endianness : \n"
		""},
	 { (char *)"delete_unpacked_to_packed_ss", _wrap_delete_unpacked_to_packed_ss, METH_VARARGS, (char *)"delete_unpacked_to_packed_ss(unpacked_to_packed_ss self)"},
	 { (char *)"unpacked_to_packed_ss_swigregister", unpacked_to_packed_ss_swigregister, METH_VARARGS, NULL},
	 { (char *)"unpacked_to_packed_ii_make", (PyCFunction) _wrap_unpacked_to_packed_ii_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"unpacked_to_packed_ii_make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> unpacked_to_packed_ii_sptr\n"
		"\n"
		"Convert a stream of unpacked bytes or shorts into a stream of packed bytes or shorts.\n"
		"\n"
		"input: stream of int; output: stream of int\n"
		"\n"
		"This is the inverse of gr::blocks::packed_to_unpacked_XX.\n"
		"\n"
		"The low  bits are extracted from each input byte or short. These bits are then packed densely into the output bytes or shorts, such that all 8 or 16 bits of the output bytes or shorts are filled with valid input bits. The right thing is done if bits_per_chunk is not a power of two.\n"
		"\n"
		"The combination of gr::blocks::packed_to_unpacked_XX followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    bits_per_chunk : \n"
		"    endianness : \n"
		""},
	 { (char *)"delete_unpacked_to_packed_ii", _wrap_delete_unpacked_to_packed_ii, METH_VARARGS, (char *)"delete_unpacked_to_packed_ii(unpacked_to_packed_ii self)"},
	 { (char *)"unpacked_to_packed_ii_swigregister", unpacked_to_packed_ii_swigregister, METH_VARARGS, NULL},
	 { (char *)"vco_f_make", (PyCFunction) _wrap_vco_f_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"vco_f_make(double sampling_rate, double sensitivity, double amplitude) -> vco_f_sptr\n"
		"\n"
		"VCO - Voltage controlled oscillator.\n"
		"\n"
		"input: float stream of control voltages; output: float oscillator output\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"VCO - Voltage controlled oscillator.\n"
		"\n"
		"Args:\n"
		"    sampling_rate : sampling rate (Hz)\n"
		"    sensitivity : units are radians/sec/volt\n"
		"    amplitude : output amplitude\n"
		""},
	 { (char *)"delete_vco_f", _wrap_delete_vco_f, METH_VARARGS, (char *)"delete_vco_f(vco_f self)"},
	 { (char *)"vco_f_swigregister", vco_f_swigregister, METH_VARARGS, NULL},
	 { (char *)"vco_c_make", (PyCFunction) _wrap_vco_c_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"vco_c_make(double sampling_rate, double sensitivity, double amplitude) -> vco_c_sptr\n"
		"\n"
		"VCO - Voltage controlled oscillator.\n"
		"\n"
		"input: float stream of control voltages; output: complex oscillator output\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"VCO - Voltage controlled oscillator.\n"
		"\n"
		"Args:\n"
		"    sampling_rate : sampling rate (Hz)\n"
		"    sensitivity : units are radians/sec/volt\n"
		"    amplitude : output amplitude\n"
		""},
	 { (char *)"delete_vco_c", _wrap_delete_vco_c, METH_VARARGS, (char *)"delete_vco_c(vco_c self)"},
	 { (char *)"vco_c_swigregister", vco_c_swigregister, METH_VARARGS, NULL},
	 { (char *)"xor_bb_make", (PyCFunction) _wrap_xor_bb_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"xor_bb_make(size_t vlen=1) -> xor_bb_sptr\n"
		"\n"
		"output = input_0 ^ input_1 ^ , ... ^ input_N)\n"
		"\n"
		"Bitwise boolean xor across all input streams.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    vlen : \n"
		""},
	 { (char *)"delete_xor_bb", _wrap_delete_xor_bb, METH_VARARGS, (char *)"delete_xor_bb(xor_bb self)"},
	 { (char *)"xor_bb_swigregister", xor_bb_swigregister, METH_VARARGS, NULL},
	 { (char *)"xor_ss_make", (PyCFunction) _wrap_xor_ss_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"xor_ss_make(size_t vlen=1) -> xor_ss_sptr\n"
		"\n"
		"output = input_0 ^ input_1 ^ , ... ^ input_N)\n"
		"\n"
		"Bitwise boolean xor across all input streams.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    vlen : \n"
		""},
	 { (char *)"delete_xor_ss", _wrap_delete_xor_ss, METH_VARARGS, (char *)"delete_xor_ss(xor_ss self)"},
	 { (char *)"xor_ss_swigregister", xor_ss_swigregister, METH_VARARGS, NULL},
	 { (char *)"xor_ii_make", (PyCFunction) _wrap_xor_ii_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"xor_ii_make(size_t vlen=1) -> xor_ii_sptr\n"
		"\n"
		"output = input_0 ^ input_1 ^ , ... ^ input_N)\n"
		"\n"
		"Bitwise boolean xor across all input streams.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    vlen : \n"
		""},
	 { (char *)"delete_xor_ii", _wrap_delete_xor_ii, METH_VARARGS, (char *)"delete_xor_ii(xor_ii self)"},
	 { (char *)"xor_ii_swigregister", xor_ii_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tag_gate_sptr", _wrap_new_tag_gate_sptr, METH_VARARGS, (char *)"\n"
		"tag_gate_sptr()\n"
		"new_tag_gate_sptr(tag_gate p) -> tag_gate_sptr\n"
		""},
	 { (char *)"tag_gate_sptr___deref__", _wrap_tag_gate_sptr___deref__, METH_VARARGS, (char *)"tag_gate_sptr___deref__(tag_gate_sptr self) -> tag_gate"},
	 { (char *)"delete_tag_gate_sptr", _wrap_delete_tag_gate_sptr, METH_VARARGS, (char *)"delete_tag_gate_sptr(tag_gate_sptr self)"},
	 { (char *)"tag_gate_sptr_set_propagation", (PyCFunction) _wrap_tag_gate_sptr_set_propagation, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_set_propagation(tag_gate_sptr self, bool propagate_tags)"},
	 { (char *)"tag_gate_sptr_make", (PyCFunction) _wrap_tag_gate_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tag_gate_sptr_make(tag_gate_sptr self, size_t item_size, bool propagate_tags=False) -> tag_gate_sptr\n"
		"\n"
		"Control tag propagation.\n"
		"\n"
		"Use this block to stop tags from propagating.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    item_size : Item size\n"
		"    propagate_tags : Set this to true to allow tags to pass through this block.\n"
		""},
	 { (char *)"tag_gate_sptr_set_single_key", (PyCFunction) _wrap_tag_gate_sptr_set_single_key, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tag_gate_sptr_set_single_key(tag_gate_sptr self, std::string const & single_key)\n"
		"\n"
		"Only gate stream tags with one specific key instead of all keys.\n"
		"\n"
		"If set to \"\", all tags will be affected by the gate. If set to \"foo\", all tags with key different from \"foo\" will pass through.\n"
		""},
	 { (char *)"tag_gate_sptr_single_key", _wrap_tag_gate_sptr_single_key, METH_VARARGS, (char *)"\n"
		"tag_gate_sptr_single_key(tag_gate_sptr self) -> std::string\n"
		"\n"
		"Get the current single key.\n"
		""},
	 { (char *)"tag_gate_sptr_history", _wrap_tag_gate_sptr_history, METH_VARARGS, (char *)"tag_gate_sptr_history(tag_gate_sptr self) -> unsigned int"},
	 { (char *)"tag_gate_sptr_declare_sample_delay", _wrap_tag_gate_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"tag_gate_sptr_declare_sample_delay(tag_gate_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"tag_gate_sptr_sample_delay", (PyCFunction) _wrap_tag_gate_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_sample_delay(tag_gate_sptr self, int which) -> unsigned int"},
	 { (char *)"tag_gate_sptr_output_multiple", _wrap_tag_gate_sptr_output_multiple, METH_VARARGS, (char *)"tag_gate_sptr_output_multiple(tag_gate_sptr self) -> int"},
	 { (char *)"tag_gate_sptr_relative_rate", _wrap_tag_gate_sptr_relative_rate, METH_VARARGS, (char *)"tag_gate_sptr_relative_rate(tag_gate_sptr self) -> double"},
	 { (char *)"tag_gate_sptr_start", _wrap_tag_gate_sptr_start, METH_VARARGS, (char *)"tag_gate_sptr_start(tag_gate_sptr self) -> bool"},
	 { (char *)"tag_gate_sptr_stop", _wrap_tag_gate_sptr_stop, METH_VARARGS, (char *)"tag_gate_sptr_stop(tag_gate_sptr self) -> bool"},
	 { (char *)"tag_gate_sptr_nitems_read", (PyCFunction) _wrap_tag_gate_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_nitems_read(tag_gate_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"tag_gate_sptr_nitems_written", (PyCFunction) _wrap_tag_gate_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_nitems_written(tag_gate_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"tag_gate_sptr_max_noutput_items", _wrap_tag_gate_sptr_max_noutput_items, METH_VARARGS, (char *)"tag_gate_sptr_max_noutput_items(tag_gate_sptr self) -> int"},
	 { (char *)"tag_gate_sptr_set_max_noutput_items", (PyCFunction) _wrap_tag_gate_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_set_max_noutput_items(tag_gate_sptr self, int m)"},
	 { (char *)"tag_gate_sptr_unset_max_noutput_items", _wrap_tag_gate_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"tag_gate_sptr_unset_max_noutput_items(tag_gate_sptr self)"},
	 { (char *)"tag_gate_sptr_is_set_max_noutput_items", _wrap_tag_gate_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"tag_gate_sptr_is_set_max_noutput_items(tag_gate_sptr self) -> bool"},
	 { (char *)"tag_gate_sptr_set_min_noutput_items", (PyCFunction) _wrap_tag_gate_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_set_min_noutput_items(tag_gate_sptr self, int m)"},
	 { (char *)"tag_gate_sptr_min_noutput_items", _wrap_tag_gate_sptr_min_noutput_items, METH_VARARGS, (char *)"tag_gate_sptr_min_noutput_items(tag_gate_sptr self) -> int"},
	 { (char *)"tag_gate_sptr_max_output_buffer", (PyCFunction) _wrap_tag_gate_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_max_output_buffer(tag_gate_sptr self, int i) -> long"},
	 { (char *)"tag_gate_sptr_set_max_output_buffer", _wrap_tag_gate_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"tag_gate_sptr_set_max_output_buffer(tag_gate_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"tag_gate_sptr_min_output_buffer", (PyCFunction) _wrap_tag_gate_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_min_output_buffer(tag_gate_sptr self, int i) -> long"},
	 { (char *)"tag_gate_sptr_set_min_output_buffer", _wrap_tag_gate_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"tag_gate_sptr_set_min_output_buffer(tag_gate_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"tag_gate_sptr_pc_noutput_items", _wrap_tag_gate_sptr_pc_noutput_items, METH_VARARGS, (char *)"tag_gate_sptr_pc_noutput_items(tag_gate_sptr self) -> float"},
	 { (char *)"tag_gate_sptr_pc_noutput_items_avg", _wrap_tag_gate_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"tag_gate_sptr_pc_noutput_items_avg(tag_gate_sptr self) -> float"},
	 { (char *)"tag_gate_sptr_pc_noutput_items_var", _wrap_tag_gate_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"tag_gate_sptr_pc_noutput_items_var(tag_gate_sptr self) -> float"},
	 { (char *)"tag_gate_sptr_pc_nproduced", _wrap_tag_gate_sptr_pc_nproduced, METH_VARARGS, (char *)"tag_gate_sptr_pc_nproduced(tag_gate_sptr self) -> float"},
	 { (char *)"tag_gate_sptr_pc_nproduced_avg", _wrap_tag_gate_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"tag_gate_sptr_pc_nproduced_avg(tag_gate_sptr self) -> float"},
	 { (char *)"tag_gate_sptr_pc_nproduced_var", _wrap_tag_gate_sptr_pc_nproduced_var, METH_VARARGS, (char *)"tag_gate_sptr_pc_nproduced_var(tag_gate_sptr self) -> float"},
	 { (char *)"tag_gate_sptr_pc_input_buffers_full", _wrap_tag_gate_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"tag_gate_sptr_pc_input_buffers_full(tag_gate_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_gate_sptr_pc_input_buffers_full_avg", _wrap_tag_gate_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"tag_gate_sptr_pc_input_buffers_full_avg(tag_gate_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_gate_sptr_pc_input_buffers_full_var", _wrap_tag_gate_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"tag_gate_sptr_pc_input_buffers_full_var(tag_gate_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_gate_sptr_pc_output_buffers_full", _wrap_tag_gate_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"tag_gate_sptr_pc_output_buffers_full(tag_gate_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_gate_sptr_pc_output_buffers_full_avg", _wrap_tag_gate_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"tag_gate_sptr_pc_output_buffers_full_avg(tag_gate_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_gate_sptr_pc_output_buffers_full_var", _wrap_tag_gate_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"tag_gate_sptr_pc_output_buffers_full_var(tag_gate_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_gate_sptr_pc_work_time", _wrap_tag_gate_sptr_pc_work_time, METH_VARARGS, (char *)"tag_gate_sptr_pc_work_time(tag_gate_sptr self) -> float"},
	 { (char *)"tag_gate_sptr_pc_work_time_avg", _wrap_tag_gate_sptr_pc_work_time_avg, METH_VARARGS, (char *)"tag_gate_sptr_pc_work_time_avg(tag_gate_sptr self) -> float"},
	 { (char *)"tag_gate_sptr_pc_work_time_var", _wrap_tag_gate_sptr_pc_work_time_var, METH_VARARGS, (char *)"tag_gate_sptr_pc_work_time_var(tag_gate_sptr self) -> float"},
	 { (char *)"tag_gate_sptr_pc_work_time_total", _wrap_tag_gate_sptr_pc_work_time_total, METH_VARARGS, (char *)"tag_gate_sptr_pc_work_time_total(tag_gate_sptr self) -> float"},
	 { (char *)"tag_gate_sptr_pc_throughput_avg", _wrap_tag_gate_sptr_pc_throughput_avg, METH_VARARGS, (char *)"tag_gate_sptr_pc_throughput_avg(tag_gate_sptr self) -> float"},
	 { (char *)"tag_gate_sptr_set_processor_affinity", (PyCFunction) _wrap_tag_gate_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_set_processor_affinity(tag_gate_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"tag_gate_sptr_unset_processor_affinity", _wrap_tag_gate_sptr_unset_processor_affinity, METH_VARARGS, (char *)"tag_gate_sptr_unset_processor_affinity(tag_gate_sptr self)"},
	 { (char *)"tag_gate_sptr_processor_affinity", _wrap_tag_gate_sptr_processor_affinity, METH_VARARGS, (char *)"tag_gate_sptr_processor_affinity(tag_gate_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"tag_gate_sptr_active_thread_priority", _wrap_tag_gate_sptr_active_thread_priority, METH_VARARGS, (char *)"tag_gate_sptr_active_thread_priority(tag_gate_sptr self) -> int"},
	 { (char *)"tag_gate_sptr_thread_priority", _wrap_tag_gate_sptr_thread_priority, METH_VARARGS, (char *)"tag_gate_sptr_thread_priority(tag_gate_sptr self) -> int"},
	 { (char *)"tag_gate_sptr_set_thread_priority", (PyCFunction) _wrap_tag_gate_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_set_thread_priority(tag_gate_sptr self, int priority) -> int"},
	 { (char *)"tag_gate_sptr_name", _wrap_tag_gate_sptr_name, METH_VARARGS, (char *)"tag_gate_sptr_name(tag_gate_sptr self) -> std::string"},
	 { (char *)"tag_gate_sptr_symbol_name", _wrap_tag_gate_sptr_symbol_name, METH_VARARGS, (char *)"tag_gate_sptr_symbol_name(tag_gate_sptr self) -> std::string"},
	 { (char *)"tag_gate_sptr_input_signature", _wrap_tag_gate_sptr_input_signature, METH_VARARGS, (char *)"tag_gate_sptr_input_signature(tag_gate_sptr self) -> io_signature_sptr"},
	 { (char *)"tag_gate_sptr_output_signature", _wrap_tag_gate_sptr_output_signature, METH_VARARGS, (char *)"tag_gate_sptr_output_signature(tag_gate_sptr self) -> io_signature_sptr"},
	 { (char *)"tag_gate_sptr_unique_id", _wrap_tag_gate_sptr_unique_id, METH_VARARGS, (char *)"tag_gate_sptr_unique_id(tag_gate_sptr self) -> long"},
	 { (char *)"tag_gate_sptr_to_basic_block", _wrap_tag_gate_sptr_to_basic_block, METH_VARARGS, (char *)"tag_gate_sptr_to_basic_block(tag_gate_sptr self) -> basic_block_sptr"},
	 { (char *)"tag_gate_sptr_check_topology", (PyCFunction) _wrap_tag_gate_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_check_topology(tag_gate_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"tag_gate_sptr_alias", _wrap_tag_gate_sptr_alias, METH_VARARGS, (char *)"tag_gate_sptr_alias(tag_gate_sptr self) -> std::string"},
	 { (char *)"tag_gate_sptr_set_block_alias", (PyCFunction) _wrap_tag_gate_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_set_block_alias(tag_gate_sptr self, std::string name)"},
	 { (char *)"tag_gate_sptr__post", (PyCFunction) _wrap_tag_gate_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr__post(tag_gate_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"tag_gate_sptr_message_ports_in", _wrap_tag_gate_sptr_message_ports_in, METH_VARARGS, (char *)"tag_gate_sptr_message_ports_in(tag_gate_sptr self) -> swig_int_ptr"},
	 { (char *)"tag_gate_sptr_message_ports_out", _wrap_tag_gate_sptr_message_ports_out, METH_VARARGS, (char *)"tag_gate_sptr_message_ports_out(tag_gate_sptr self) -> swig_int_ptr"},
	 { (char *)"tag_gate_sptr_message_subscribers", (PyCFunction) _wrap_tag_gate_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"tag_gate_sptr_message_subscribers(tag_gate_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"tag_gate_sptr_swigregister", tag_gate_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tag_share_sptr", _wrap_new_tag_share_sptr, METH_VARARGS, (char *)"\n"
		"tag_share_sptr()\n"
		"new_tag_share_sptr(tag_share p) -> tag_share_sptr\n"
		""},
	 { (char *)"tag_share_sptr___deref__", _wrap_tag_share_sptr___deref__, METH_VARARGS, (char *)"tag_share_sptr___deref__(tag_share_sptr self) -> tag_share"},
	 { (char *)"delete_tag_share_sptr", _wrap_delete_tag_share_sptr, METH_VARARGS, (char *)"delete_tag_share_sptr(tag_share_sptr self)"},
	 { (char *)"tag_share_sptr_make", (PyCFunction) _wrap_tag_share_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tag_share_sptr_make(tag_share_sptr self, size_t sizeof_io_item, size_t sizeof_share_item, size_t vlen=1) -> tag_share_sptr\n"
		"\n"
		"Adds tags from Input 1 onto Input 0's stream.\n"
		"\n"
		"This block utilizes the GNU Radio runtime's tag propagation policy to transfer or share Input 1's tags to Input 0's stream. This is useful when a signal is detected via a correlate_access_code_bb or a threshold crossing from a complex_to_mag_squared block. The tag from that detection is on the alternate stream, either bytes or floats. Often there is further signal processing that should be done on the complex stream. This block allows the detection tags to be added to the complex stream to trigger downstream processing without the need of redundant trigger inputs on all subsequent blocks.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    sizeof_io_item : The size of the Input 0/Output 0 stream type. Input 0 stream items will be directly copied to Output 0.\n"
		"    sizeof_share_item : The size of the Input 1 (tag share) stream type. This stream type does not have to match the input/output stream type. Tags from Input 1's items will be combined with Input 0's item tags and outputted on Output 0.\n"
		"    vlen : The vector size of the input and output stream items\n"
		""},
	 { (char *)"tag_share_sptr_history", _wrap_tag_share_sptr_history, METH_VARARGS, (char *)"tag_share_sptr_history(tag_share_sptr self) -> unsigned int"},
	 { (char *)"tag_share_sptr_declare_sample_delay", _wrap_tag_share_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"tag_share_sptr_declare_sample_delay(tag_share_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"tag_share_sptr_sample_delay", (PyCFunction) _wrap_tag_share_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_sample_delay(tag_share_sptr self, int which) -> unsigned int"},
	 { (char *)"tag_share_sptr_output_multiple", _wrap_tag_share_sptr_output_multiple, METH_VARARGS, (char *)"tag_share_sptr_output_multiple(tag_share_sptr self) -> int"},
	 { (char *)"tag_share_sptr_relative_rate", _wrap_tag_share_sptr_relative_rate, METH_VARARGS, (char *)"tag_share_sptr_relative_rate(tag_share_sptr self) -> double"},
	 { (char *)"tag_share_sptr_start", _wrap_tag_share_sptr_start, METH_VARARGS, (char *)"tag_share_sptr_start(tag_share_sptr self) -> bool"},
	 { (char *)"tag_share_sptr_stop", _wrap_tag_share_sptr_stop, METH_VARARGS, (char *)"tag_share_sptr_stop(tag_share_sptr self) -> bool"},
	 { (char *)"tag_share_sptr_nitems_read", (PyCFunction) _wrap_tag_share_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_nitems_read(tag_share_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"tag_share_sptr_nitems_written", (PyCFunction) _wrap_tag_share_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_nitems_written(tag_share_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"tag_share_sptr_max_noutput_items", _wrap_tag_share_sptr_max_noutput_items, METH_VARARGS, (char *)"tag_share_sptr_max_noutput_items(tag_share_sptr self) -> int"},
	 { (char *)"tag_share_sptr_set_max_noutput_items", (PyCFunction) _wrap_tag_share_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_set_max_noutput_items(tag_share_sptr self, int m)"},
	 { (char *)"tag_share_sptr_unset_max_noutput_items", _wrap_tag_share_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"tag_share_sptr_unset_max_noutput_items(tag_share_sptr self)"},
	 { (char *)"tag_share_sptr_is_set_max_noutput_items", _wrap_tag_share_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"tag_share_sptr_is_set_max_noutput_items(tag_share_sptr self) -> bool"},
	 { (char *)"tag_share_sptr_set_min_noutput_items", (PyCFunction) _wrap_tag_share_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_set_min_noutput_items(tag_share_sptr self, int m)"},
	 { (char *)"tag_share_sptr_min_noutput_items", _wrap_tag_share_sptr_min_noutput_items, METH_VARARGS, (char *)"tag_share_sptr_min_noutput_items(tag_share_sptr self) -> int"},
	 { (char *)"tag_share_sptr_max_output_buffer", (PyCFunction) _wrap_tag_share_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_max_output_buffer(tag_share_sptr self, int i) -> long"},
	 { (char *)"tag_share_sptr_set_max_output_buffer", _wrap_tag_share_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"tag_share_sptr_set_max_output_buffer(tag_share_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"tag_share_sptr_min_output_buffer", (PyCFunction) _wrap_tag_share_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_min_output_buffer(tag_share_sptr self, int i) -> long"},
	 { (char *)"tag_share_sptr_set_min_output_buffer", _wrap_tag_share_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"tag_share_sptr_set_min_output_buffer(tag_share_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"tag_share_sptr_pc_noutput_items", _wrap_tag_share_sptr_pc_noutput_items, METH_VARARGS, (char *)"tag_share_sptr_pc_noutput_items(tag_share_sptr self) -> float"},
	 { (char *)"tag_share_sptr_pc_noutput_items_avg", _wrap_tag_share_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"tag_share_sptr_pc_noutput_items_avg(tag_share_sptr self) -> float"},
	 { (char *)"tag_share_sptr_pc_noutput_items_var", _wrap_tag_share_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"tag_share_sptr_pc_noutput_items_var(tag_share_sptr self) -> float"},
	 { (char *)"tag_share_sptr_pc_nproduced", _wrap_tag_share_sptr_pc_nproduced, METH_VARARGS, (char *)"tag_share_sptr_pc_nproduced(tag_share_sptr self) -> float"},
	 { (char *)"tag_share_sptr_pc_nproduced_avg", _wrap_tag_share_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"tag_share_sptr_pc_nproduced_avg(tag_share_sptr self) -> float"},
	 { (char *)"tag_share_sptr_pc_nproduced_var", _wrap_tag_share_sptr_pc_nproduced_var, METH_VARARGS, (char *)"tag_share_sptr_pc_nproduced_var(tag_share_sptr self) -> float"},
	 { (char *)"tag_share_sptr_pc_input_buffers_full", _wrap_tag_share_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"tag_share_sptr_pc_input_buffers_full(tag_share_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_share_sptr_pc_input_buffers_full_avg", _wrap_tag_share_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"tag_share_sptr_pc_input_buffers_full_avg(tag_share_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_share_sptr_pc_input_buffers_full_var", _wrap_tag_share_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"tag_share_sptr_pc_input_buffers_full_var(tag_share_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_share_sptr_pc_output_buffers_full", _wrap_tag_share_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"tag_share_sptr_pc_output_buffers_full(tag_share_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_share_sptr_pc_output_buffers_full_avg", _wrap_tag_share_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"tag_share_sptr_pc_output_buffers_full_avg(tag_share_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_share_sptr_pc_output_buffers_full_var", _wrap_tag_share_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"tag_share_sptr_pc_output_buffers_full_var(tag_share_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tag_share_sptr_pc_work_time", _wrap_tag_share_sptr_pc_work_time, METH_VARARGS, (char *)"tag_share_sptr_pc_work_time(tag_share_sptr self) -> float"},
	 { (char *)"tag_share_sptr_pc_work_time_avg", _wrap_tag_share_sptr_pc_work_time_avg, METH_VARARGS, (char *)"tag_share_sptr_pc_work_time_avg(tag_share_sptr self) -> float"},
	 { (char *)"tag_share_sptr_pc_work_time_var", _wrap_tag_share_sptr_pc_work_time_var, METH_VARARGS, (char *)"tag_share_sptr_pc_work_time_var(tag_share_sptr self) -> float"},
	 { (char *)"tag_share_sptr_pc_work_time_total", _wrap_tag_share_sptr_pc_work_time_total, METH_VARARGS, (char *)"tag_share_sptr_pc_work_time_total(tag_share_sptr self) -> float"},
	 { (char *)"tag_share_sptr_pc_throughput_avg", _wrap_tag_share_sptr_pc_throughput_avg, METH_VARARGS, (char *)"tag_share_sptr_pc_throughput_avg(tag_share_sptr self) -> float"},
	 { (char *)"tag_share_sptr_set_processor_affinity", (PyCFunction) _wrap_tag_share_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_set_processor_affinity(tag_share_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"tag_share_sptr_unset_processor_affinity", _wrap_tag_share_sptr_unset_processor_affinity, METH_VARARGS, (char *)"tag_share_sptr_unset_processor_affinity(tag_share_sptr self)"},
	 { (char *)"tag_share_sptr_processor_affinity", _wrap_tag_share_sptr_processor_affinity, METH_VARARGS, (char *)"tag_share_sptr_processor_affinity(tag_share_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"tag_share_sptr_active_thread_priority", _wrap_tag_share_sptr_active_thread_priority, METH_VARARGS, (char *)"tag_share_sptr_active_thread_priority(tag_share_sptr self) -> int"},
	 { (char *)"tag_share_sptr_thread_priority", _wrap_tag_share_sptr_thread_priority, METH_VARARGS, (char *)"tag_share_sptr_thread_priority(tag_share_sptr self) -> int"},
	 { (char *)"tag_share_sptr_set_thread_priority", (PyCFunction) _wrap_tag_share_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_set_thread_priority(tag_share_sptr self, int priority) -> int"},
	 { (char *)"tag_share_sptr_name", _wrap_tag_share_sptr_name, METH_VARARGS, (char *)"tag_share_sptr_name(tag_share_sptr self) -> std::string"},
	 { (char *)"tag_share_sptr_symbol_name", _wrap_tag_share_sptr_symbol_name, METH_VARARGS, (char *)"tag_share_sptr_symbol_name(tag_share_sptr self) -> std::string"},
	 { (char *)"tag_share_sptr_input_signature", _wrap_tag_share_sptr_input_signature, METH_VARARGS, (char *)"tag_share_sptr_input_signature(tag_share_sptr self) -> io_signature_sptr"},
	 { (char *)"tag_share_sptr_output_signature", _wrap_tag_share_sptr_output_signature, METH_VARARGS, (char *)"tag_share_sptr_output_signature(tag_share_sptr self) -> io_signature_sptr"},
	 { (char *)"tag_share_sptr_unique_id", _wrap_tag_share_sptr_unique_id, METH_VARARGS, (char *)"tag_share_sptr_unique_id(tag_share_sptr self) -> long"},
	 { (char *)"tag_share_sptr_to_basic_block", _wrap_tag_share_sptr_to_basic_block, METH_VARARGS, (char *)"tag_share_sptr_to_basic_block(tag_share_sptr self) -> basic_block_sptr"},
	 { (char *)"tag_share_sptr_check_topology", (PyCFunction) _wrap_tag_share_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_check_topology(tag_share_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"tag_share_sptr_alias", _wrap_tag_share_sptr_alias, METH_VARARGS, (char *)"tag_share_sptr_alias(tag_share_sptr self) -> std::string"},
	 { (char *)"tag_share_sptr_set_block_alias", (PyCFunction) _wrap_tag_share_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_set_block_alias(tag_share_sptr self, std::string name)"},
	 { (char *)"tag_share_sptr__post", (PyCFunction) _wrap_tag_share_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr__post(tag_share_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"tag_share_sptr_message_ports_in", _wrap_tag_share_sptr_message_ports_in, METH_VARARGS, (char *)"tag_share_sptr_message_ports_in(tag_share_sptr self) -> swig_int_ptr"},
	 { (char *)"tag_share_sptr_message_ports_out", _wrap_tag_share_sptr_message_ports_out, METH_VARARGS, (char *)"tag_share_sptr_message_ports_out(tag_share_sptr self) -> swig_int_ptr"},
	 { (char *)"tag_share_sptr_message_subscribers", (PyCFunction) _wrap_tag_share_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"tag_share_sptr_message_subscribers(tag_share_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"tag_share_sptr_swigregister", tag_share_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tagged_stream_align_sptr", _wrap_new_tagged_stream_align_sptr, METH_VARARGS, (char *)"\n"
		"tagged_stream_align_sptr()\n"
		"new_tagged_stream_align_sptr(tagged_stream_align p) -> tagged_stream_align_sptr\n"
		""},
	 { (char *)"tagged_stream_align_sptr___deref__", _wrap_tagged_stream_align_sptr___deref__, METH_VARARGS, (char *)"tagged_stream_align_sptr___deref__(tagged_stream_align_sptr self) -> tagged_stream_align"},
	 { (char *)"delete_tagged_stream_align_sptr", _wrap_delete_tagged_stream_align_sptr, METH_VARARGS, (char *)"delete_tagged_stream_align_sptr(tagged_stream_align_sptr self)"},
	 { (char *)"tagged_stream_align_sptr_make", (PyCFunction) _wrap_tagged_stream_align_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_stream_align_sptr_make(tagged_stream_align_sptr self, size_t itemsize, std::string const & lengthtagname) -> tagged_stream_align_sptr\n"
		"\n"
		"Align a stream to a tagged stream item.\n"
		"\n"
		"Takes an unaligned stream of tagged stream items and aligns to the first item\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make a tagged stream align\n"
		"\n"
		"Args:\n"
		"    itemsize : The size (in bytes) of the item datatype.\n"
		"    lengthtagname : Name of the TSB's length tag key.\n"
		""},
	 { (char *)"tagged_stream_align_sptr_history", _wrap_tagged_stream_align_sptr_history, METH_VARARGS, (char *)"tagged_stream_align_sptr_history(tagged_stream_align_sptr self) -> unsigned int"},
	 { (char *)"tagged_stream_align_sptr_declare_sample_delay", _wrap_tagged_stream_align_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"tagged_stream_align_sptr_declare_sample_delay(tagged_stream_align_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"tagged_stream_align_sptr_sample_delay", (PyCFunction) _wrap_tagged_stream_align_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_sample_delay(tagged_stream_align_sptr self, int which) -> unsigned int"},
	 { (char *)"tagged_stream_align_sptr_output_multiple", _wrap_tagged_stream_align_sptr_output_multiple, METH_VARARGS, (char *)"tagged_stream_align_sptr_output_multiple(tagged_stream_align_sptr self) -> int"},
	 { (char *)"tagged_stream_align_sptr_relative_rate", _wrap_tagged_stream_align_sptr_relative_rate, METH_VARARGS, (char *)"tagged_stream_align_sptr_relative_rate(tagged_stream_align_sptr self) -> double"},
	 { (char *)"tagged_stream_align_sptr_start", _wrap_tagged_stream_align_sptr_start, METH_VARARGS, (char *)"tagged_stream_align_sptr_start(tagged_stream_align_sptr self) -> bool"},
	 { (char *)"tagged_stream_align_sptr_stop", _wrap_tagged_stream_align_sptr_stop, METH_VARARGS, (char *)"tagged_stream_align_sptr_stop(tagged_stream_align_sptr self) -> bool"},
	 { (char *)"tagged_stream_align_sptr_nitems_read", (PyCFunction) _wrap_tagged_stream_align_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_nitems_read(tagged_stream_align_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"tagged_stream_align_sptr_nitems_written", (PyCFunction) _wrap_tagged_stream_align_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_nitems_written(tagged_stream_align_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"tagged_stream_align_sptr_max_noutput_items", _wrap_tagged_stream_align_sptr_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_align_sptr_max_noutput_items(tagged_stream_align_sptr self) -> int"},
	 { (char *)"tagged_stream_align_sptr_set_max_noutput_items", (PyCFunction) _wrap_tagged_stream_align_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_set_max_noutput_items(tagged_stream_align_sptr self, int m)"},
	 { (char *)"tagged_stream_align_sptr_unset_max_noutput_items", _wrap_tagged_stream_align_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_align_sptr_unset_max_noutput_items(tagged_stream_align_sptr self)"},
	 { (char *)"tagged_stream_align_sptr_is_set_max_noutput_items", _wrap_tagged_stream_align_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_align_sptr_is_set_max_noutput_items(tagged_stream_align_sptr self) -> bool"},
	 { (char *)"tagged_stream_align_sptr_set_min_noutput_items", (PyCFunction) _wrap_tagged_stream_align_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_set_min_noutput_items(tagged_stream_align_sptr self, int m)"},
	 { (char *)"tagged_stream_align_sptr_min_noutput_items", _wrap_tagged_stream_align_sptr_min_noutput_items, METH_VARARGS, (char *)"tagged_stream_align_sptr_min_noutput_items(tagged_stream_align_sptr self) -> int"},
	 { (char *)"tagged_stream_align_sptr_max_output_buffer", (PyCFunction) _wrap_tagged_stream_align_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_max_output_buffer(tagged_stream_align_sptr self, int i) -> long"},
	 { (char *)"tagged_stream_align_sptr_set_max_output_buffer", _wrap_tagged_stream_align_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"tagged_stream_align_sptr_set_max_output_buffer(tagged_stream_align_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"tagged_stream_align_sptr_min_output_buffer", (PyCFunction) _wrap_tagged_stream_align_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_min_output_buffer(tagged_stream_align_sptr self, int i) -> long"},
	 { (char *)"tagged_stream_align_sptr_set_min_output_buffer", _wrap_tagged_stream_align_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"tagged_stream_align_sptr_set_min_output_buffer(tagged_stream_align_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"tagged_stream_align_sptr_pc_noutput_items", _wrap_tagged_stream_align_sptr_pc_noutput_items, METH_VARARGS, (char *)"tagged_stream_align_sptr_pc_noutput_items(tagged_stream_align_sptr self) -> float"},
	 { (char *)"tagged_stream_align_sptr_pc_noutput_items_avg", _wrap_tagged_stream_align_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"tagged_stream_align_sptr_pc_noutput_items_avg(tagged_stream_align_sptr self) -> float"},
	 { (char *)"tagged_stream_align_sptr_pc_noutput_items_var", _wrap_tagged_stream_align_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"tagged_stream_align_sptr_pc_noutput_items_var(tagged_stream_align_sptr self) -> float"},
	 { (char *)"tagged_stream_align_sptr_pc_nproduced", _wrap_tagged_stream_align_sptr_pc_nproduced, METH_VARARGS, (char *)"tagged_stream_align_sptr_pc_nproduced(tagged_stream_align_sptr self) -> float"},
	 { (char *)"tagged_stream_align_sptr_pc_nproduced_avg", _wrap_tagged_stream_align_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"tagged_stream_align_sptr_pc_nproduced_avg(tagged_stream_align_sptr self) -> float"},
	 { (char *)"tagged_stream_align_sptr_pc_nproduced_var", _wrap_tagged_stream_align_sptr_pc_nproduced_var, METH_VARARGS, (char *)"tagged_stream_align_sptr_pc_nproduced_var(tagged_stream_align_sptr self) -> float"},
	 { (char *)"tagged_stream_align_sptr_pc_input_buffers_full", _wrap_tagged_stream_align_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"tagged_stream_align_sptr_pc_input_buffers_full(tagged_stream_align_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_align_sptr_pc_input_buffers_full_avg", _wrap_tagged_stream_align_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"tagged_stream_align_sptr_pc_input_buffers_full_avg(tagged_stream_align_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_align_sptr_pc_input_buffers_full_var", _wrap_tagged_stream_align_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"tagged_stream_align_sptr_pc_input_buffers_full_var(tagged_stream_align_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_align_sptr_pc_output_buffers_full", _wrap_tagged_stream_align_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"tagged_stream_align_sptr_pc_output_buffers_full(tagged_stream_align_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_align_sptr_pc_output_buffers_full_avg", _wrap_tagged_stream_align_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"tagged_stream_align_sptr_pc_output_buffers_full_avg(tagged_stream_align_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_align_sptr_pc_output_buffers_full_var", _wrap_tagged_stream_align_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"tagged_stream_align_sptr_pc_output_buffers_full_var(tagged_stream_align_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_align_sptr_pc_work_time", _wrap_tagged_stream_align_sptr_pc_work_time, METH_VARARGS, (char *)"tagged_stream_align_sptr_pc_work_time(tagged_stream_align_sptr self) -> float"},
	 { (char *)"tagged_stream_align_sptr_pc_work_time_avg", _wrap_tagged_stream_align_sptr_pc_work_time_avg, METH_VARARGS, (char *)"tagged_stream_align_sptr_pc_work_time_avg(tagged_stream_align_sptr self) -> float"},
	 { (char *)"tagged_stream_align_sptr_pc_work_time_var", _wrap_tagged_stream_align_sptr_pc_work_time_var, METH_VARARGS, (char *)"tagged_stream_align_sptr_pc_work_time_var(tagged_stream_align_sptr self) -> float"},
	 { (char *)"tagged_stream_align_sptr_pc_work_time_total", _wrap_tagged_stream_align_sptr_pc_work_time_total, METH_VARARGS, (char *)"tagged_stream_align_sptr_pc_work_time_total(tagged_stream_align_sptr self) -> float"},
	 { (char *)"tagged_stream_align_sptr_pc_throughput_avg", _wrap_tagged_stream_align_sptr_pc_throughput_avg, METH_VARARGS, (char *)"tagged_stream_align_sptr_pc_throughput_avg(tagged_stream_align_sptr self) -> float"},
	 { (char *)"tagged_stream_align_sptr_set_processor_affinity", (PyCFunction) _wrap_tagged_stream_align_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_set_processor_affinity(tagged_stream_align_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"tagged_stream_align_sptr_unset_processor_affinity", _wrap_tagged_stream_align_sptr_unset_processor_affinity, METH_VARARGS, (char *)"tagged_stream_align_sptr_unset_processor_affinity(tagged_stream_align_sptr self)"},
	 { (char *)"tagged_stream_align_sptr_processor_affinity", _wrap_tagged_stream_align_sptr_processor_affinity, METH_VARARGS, (char *)"tagged_stream_align_sptr_processor_affinity(tagged_stream_align_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"tagged_stream_align_sptr_active_thread_priority", _wrap_tagged_stream_align_sptr_active_thread_priority, METH_VARARGS, (char *)"tagged_stream_align_sptr_active_thread_priority(tagged_stream_align_sptr self) -> int"},
	 { (char *)"tagged_stream_align_sptr_thread_priority", _wrap_tagged_stream_align_sptr_thread_priority, METH_VARARGS, (char *)"tagged_stream_align_sptr_thread_priority(tagged_stream_align_sptr self) -> int"},
	 { (char *)"tagged_stream_align_sptr_set_thread_priority", (PyCFunction) _wrap_tagged_stream_align_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_set_thread_priority(tagged_stream_align_sptr self, int priority) -> int"},
	 { (char *)"tagged_stream_align_sptr_name", _wrap_tagged_stream_align_sptr_name, METH_VARARGS, (char *)"tagged_stream_align_sptr_name(tagged_stream_align_sptr self) -> std::string"},
	 { (char *)"tagged_stream_align_sptr_symbol_name", _wrap_tagged_stream_align_sptr_symbol_name, METH_VARARGS, (char *)"tagged_stream_align_sptr_symbol_name(tagged_stream_align_sptr self) -> std::string"},
	 { (char *)"tagged_stream_align_sptr_input_signature", _wrap_tagged_stream_align_sptr_input_signature, METH_VARARGS, (char *)"tagged_stream_align_sptr_input_signature(tagged_stream_align_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_stream_align_sptr_output_signature", _wrap_tagged_stream_align_sptr_output_signature, METH_VARARGS, (char *)"tagged_stream_align_sptr_output_signature(tagged_stream_align_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_stream_align_sptr_unique_id", _wrap_tagged_stream_align_sptr_unique_id, METH_VARARGS, (char *)"tagged_stream_align_sptr_unique_id(tagged_stream_align_sptr self) -> long"},
	 { (char *)"tagged_stream_align_sptr_to_basic_block", _wrap_tagged_stream_align_sptr_to_basic_block, METH_VARARGS, (char *)"tagged_stream_align_sptr_to_basic_block(tagged_stream_align_sptr self) -> basic_block_sptr"},
	 { (char *)"tagged_stream_align_sptr_check_topology", (PyCFunction) _wrap_tagged_stream_align_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_check_topology(tagged_stream_align_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"tagged_stream_align_sptr_alias", _wrap_tagged_stream_align_sptr_alias, METH_VARARGS, (char *)"tagged_stream_align_sptr_alias(tagged_stream_align_sptr self) -> std::string"},
	 { (char *)"tagged_stream_align_sptr_set_block_alias", (PyCFunction) _wrap_tagged_stream_align_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_set_block_alias(tagged_stream_align_sptr self, std::string name)"},
	 { (char *)"tagged_stream_align_sptr__post", (PyCFunction) _wrap_tagged_stream_align_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr__post(tagged_stream_align_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"tagged_stream_align_sptr_message_ports_in", _wrap_tagged_stream_align_sptr_message_ports_in, METH_VARARGS, (char *)"tagged_stream_align_sptr_message_ports_in(tagged_stream_align_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_stream_align_sptr_message_ports_out", _wrap_tagged_stream_align_sptr_message_ports_out, METH_VARARGS, (char *)"tagged_stream_align_sptr_message_ports_out(tagged_stream_align_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_stream_align_sptr_message_subscribers", (PyCFunction) _wrap_tagged_stream_align_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_align_sptr_message_subscribers(tagged_stream_align_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"tagged_stream_align_sptr_swigregister", tagged_stream_align_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tagged_stream_mux_sptr", _wrap_new_tagged_stream_mux_sptr, METH_VARARGS, (char *)"\n"
		"tagged_stream_mux_sptr()\n"
		"new_tagged_stream_mux_sptr(tagged_stream_mux p) -> tagged_stream_mux_sptr\n"
		""},
	 { (char *)"tagged_stream_mux_sptr___deref__", _wrap_tagged_stream_mux_sptr___deref__, METH_VARARGS, (char *)"tagged_stream_mux_sptr___deref__(tagged_stream_mux_sptr self) -> tagged_stream_mux"},
	 { (char *)"delete_tagged_stream_mux_sptr", _wrap_delete_tagged_stream_mux_sptr, METH_VARARGS, (char *)"delete_tagged_stream_mux_sptr(tagged_stream_mux_sptr self)"},
	 { (char *)"tagged_stream_mux_sptr_make", (PyCFunction) _wrap_tagged_stream_mux_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_stream_mux_sptr_make(tagged_stream_mux_sptr self, size_t itemsize, std::string const & lengthtagname, \n"
		"    unsigned int tag_preserve_head_pos=0) -> tagged_stream_mux_sptr\n"
		"\n"
		"Combines tagged streams.\n"
		"\n"
		"Takes N streams as input. Each stream is tagged with packet lengths. Packets are output sequentially from each input stream.\n"
		"\n"
		"The output signal has a new length tag, which is the sum of all individual length tags. The old length tags are discarded.\n"
		"\n"
		"All other tags are propagated as expected, i.e. they stay associated with the same input item. There are cases when this behaviour is undesirable. One special case is when a tag at the first element (the head item) of one input port must stay on the head item of the output port. To achieve this, set  to the port that will receive these special tags.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make a tagged stream mux block.\n"
		"\n"
		"Args:\n"
		"    itemsize : Items size (number of bytes per item)\n"
		"    lengthtagname : Length tag key\n"
		"    tag_preserve_head_pos : Preserves the head position of tags on this input port\n"
		""},
	 { (char *)"tagged_stream_mux_sptr_history", _wrap_tagged_stream_mux_sptr_history, METH_VARARGS, (char *)"tagged_stream_mux_sptr_history(tagged_stream_mux_sptr self) -> unsigned int"},
	 { (char *)"tagged_stream_mux_sptr_declare_sample_delay", _wrap_tagged_stream_mux_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"tagged_stream_mux_sptr_declare_sample_delay(tagged_stream_mux_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"tagged_stream_mux_sptr_sample_delay", (PyCFunction) _wrap_tagged_stream_mux_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_sample_delay(tagged_stream_mux_sptr self, int which) -> unsigned int"},
	 { (char *)"tagged_stream_mux_sptr_output_multiple", _wrap_tagged_stream_mux_sptr_output_multiple, METH_VARARGS, (char *)"tagged_stream_mux_sptr_output_multiple(tagged_stream_mux_sptr self) -> int"},
	 { (char *)"tagged_stream_mux_sptr_relative_rate", _wrap_tagged_stream_mux_sptr_relative_rate, METH_VARARGS, (char *)"tagged_stream_mux_sptr_relative_rate(tagged_stream_mux_sptr self) -> double"},
	 { (char *)"tagged_stream_mux_sptr_start", _wrap_tagged_stream_mux_sptr_start, METH_VARARGS, (char *)"tagged_stream_mux_sptr_start(tagged_stream_mux_sptr self) -> bool"},
	 { (char *)"tagged_stream_mux_sptr_stop", _wrap_tagged_stream_mux_sptr_stop, METH_VARARGS, (char *)"tagged_stream_mux_sptr_stop(tagged_stream_mux_sptr self) -> bool"},
	 { (char *)"tagged_stream_mux_sptr_nitems_read", (PyCFunction) _wrap_tagged_stream_mux_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_nitems_read(tagged_stream_mux_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"tagged_stream_mux_sptr_nitems_written", (PyCFunction) _wrap_tagged_stream_mux_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_nitems_written(tagged_stream_mux_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"tagged_stream_mux_sptr_max_noutput_items", _wrap_tagged_stream_mux_sptr_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_mux_sptr_max_noutput_items(tagged_stream_mux_sptr self) -> int"},
	 { (char *)"tagged_stream_mux_sptr_set_max_noutput_items", (PyCFunction) _wrap_tagged_stream_mux_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_set_max_noutput_items(tagged_stream_mux_sptr self, int m)"},
	 { (char *)"tagged_stream_mux_sptr_unset_max_noutput_items", _wrap_tagged_stream_mux_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_mux_sptr_unset_max_noutput_items(tagged_stream_mux_sptr self)"},
	 { (char *)"tagged_stream_mux_sptr_is_set_max_noutput_items", _wrap_tagged_stream_mux_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_mux_sptr_is_set_max_noutput_items(tagged_stream_mux_sptr self) -> bool"},
	 { (char *)"tagged_stream_mux_sptr_set_min_noutput_items", (PyCFunction) _wrap_tagged_stream_mux_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_set_min_noutput_items(tagged_stream_mux_sptr self, int m)"},
	 { (char *)"tagged_stream_mux_sptr_min_noutput_items", _wrap_tagged_stream_mux_sptr_min_noutput_items, METH_VARARGS, (char *)"tagged_stream_mux_sptr_min_noutput_items(tagged_stream_mux_sptr self) -> int"},
	 { (char *)"tagged_stream_mux_sptr_max_output_buffer", (PyCFunction) _wrap_tagged_stream_mux_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_max_output_buffer(tagged_stream_mux_sptr self, int i) -> long"},
	 { (char *)"tagged_stream_mux_sptr_set_max_output_buffer", _wrap_tagged_stream_mux_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"tagged_stream_mux_sptr_set_max_output_buffer(tagged_stream_mux_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"tagged_stream_mux_sptr_min_output_buffer", (PyCFunction) _wrap_tagged_stream_mux_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_min_output_buffer(tagged_stream_mux_sptr self, int i) -> long"},
	 { (char *)"tagged_stream_mux_sptr_set_min_output_buffer", _wrap_tagged_stream_mux_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"tagged_stream_mux_sptr_set_min_output_buffer(tagged_stream_mux_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"tagged_stream_mux_sptr_pc_noutput_items", _wrap_tagged_stream_mux_sptr_pc_noutput_items, METH_VARARGS, (char *)"tagged_stream_mux_sptr_pc_noutput_items(tagged_stream_mux_sptr self) -> float"},
	 { (char *)"tagged_stream_mux_sptr_pc_noutput_items_avg", _wrap_tagged_stream_mux_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"tagged_stream_mux_sptr_pc_noutput_items_avg(tagged_stream_mux_sptr self) -> float"},
	 { (char *)"tagged_stream_mux_sptr_pc_noutput_items_var", _wrap_tagged_stream_mux_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"tagged_stream_mux_sptr_pc_noutput_items_var(tagged_stream_mux_sptr self) -> float"},
	 { (char *)"tagged_stream_mux_sptr_pc_nproduced", _wrap_tagged_stream_mux_sptr_pc_nproduced, METH_VARARGS, (char *)"tagged_stream_mux_sptr_pc_nproduced(tagged_stream_mux_sptr self) -> float"},
	 { (char *)"tagged_stream_mux_sptr_pc_nproduced_avg", _wrap_tagged_stream_mux_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"tagged_stream_mux_sptr_pc_nproduced_avg(tagged_stream_mux_sptr self) -> float"},
	 { (char *)"tagged_stream_mux_sptr_pc_nproduced_var", _wrap_tagged_stream_mux_sptr_pc_nproduced_var, METH_VARARGS, (char *)"tagged_stream_mux_sptr_pc_nproduced_var(tagged_stream_mux_sptr self) -> float"},
	 { (char *)"tagged_stream_mux_sptr_pc_input_buffers_full", _wrap_tagged_stream_mux_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"tagged_stream_mux_sptr_pc_input_buffers_full(tagged_stream_mux_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_mux_sptr_pc_input_buffers_full_avg", _wrap_tagged_stream_mux_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"tagged_stream_mux_sptr_pc_input_buffers_full_avg(tagged_stream_mux_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_mux_sptr_pc_input_buffers_full_var", _wrap_tagged_stream_mux_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"tagged_stream_mux_sptr_pc_input_buffers_full_var(tagged_stream_mux_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_mux_sptr_pc_output_buffers_full", _wrap_tagged_stream_mux_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"tagged_stream_mux_sptr_pc_output_buffers_full(tagged_stream_mux_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_mux_sptr_pc_output_buffers_full_avg", _wrap_tagged_stream_mux_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"tagged_stream_mux_sptr_pc_output_buffers_full_avg(tagged_stream_mux_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_mux_sptr_pc_output_buffers_full_var", _wrap_tagged_stream_mux_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"tagged_stream_mux_sptr_pc_output_buffers_full_var(tagged_stream_mux_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_mux_sptr_pc_work_time", _wrap_tagged_stream_mux_sptr_pc_work_time, METH_VARARGS, (char *)"tagged_stream_mux_sptr_pc_work_time(tagged_stream_mux_sptr self) -> float"},
	 { (char *)"tagged_stream_mux_sptr_pc_work_time_avg", _wrap_tagged_stream_mux_sptr_pc_work_time_avg, METH_VARARGS, (char *)"tagged_stream_mux_sptr_pc_work_time_avg(tagged_stream_mux_sptr self) -> float"},
	 { (char *)"tagged_stream_mux_sptr_pc_work_time_var", _wrap_tagged_stream_mux_sptr_pc_work_time_var, METH_VARARGS, (char *)"tagged_stream_mux_sptr_pc_work_time_var(tagged_stream_mux_sptr self) -> float"},
	 { (char *)"tagged_stream_mux_sptr_pc_work_time_total", _wrap_tagged_stream_mux_sptr_pc_work_time_total, METH_VARARGS, (char *)"tagged_stream_mux_sptr_pc_work_time_total(tagged_stream_mux_sptr self) -> float"},
	 { (char *)"tagged_stream_mux_sptr_pc_throughput_avg", _wrap_tagged_stream_mux_sptr_pc_throughput_avg, METH_VARARGS, (char *)"tagged_stream_mux_sptr_pc_throughput_avg(tagged_stream_mux_sptr self) -> float"},
	 { (char *)"tagged_stream_mux_sptr_set_processor_affinity", (PyCFunction) _wrap_tagged_stream_mux_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_set_processor_affinity(tagged_stream_mux_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"tagged_stream_mux_sptr_unset_processor_affinity", _wrap_tagged_stream_mux_sptr_unset_processor_affinity, METH_VARARGS, (char *)"tagged_stream_mux_sptr_unset_processor_affinity(tagged_stream_mux_sptr self)"},
	 { (char *)"tagged_stream_mux_sptr_processor_affinity", _wrap_tagged_stream_mux_sptr_processor_affinity, METH_VARARGS, (char *)"tagged_stream_mux_sptr_processor_affinity(tagged_stream_mux_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"tagged_stream_mux_sptr_active_thread_priority", _wrap_tagged_stream_mux_sptr_active_thread_priority, METH_VARARGS, (char *)"tagged_stream_mux_sptr_active_thread_priority(tagged_stream_mux_sptr self) -> int"},
	 { (char *)"tagged_stream_mux_sptr_thread_priority", _wrap_tagged_stream_mux_sptr_thread_priority, METH_VARARGS, (char *)"tagged_stream_mux_sptr_thread_priority(tagged_stream_mux_sptr self) -> int"},
	 { (char *)"tagged_stream_mux_sptr_set_thread_priority", (PyCFunction) _wrap_tagged_stream_mux_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_set_thread_priority(tagged_stream_mux_sptr self, int priority) -> int"},
	 { (char *)"tagged_stream_mux_sptr_name", _wrap_tagged_stream_mux_sptr_name, METH_VARARGS, (char *)"tagged_stream_mux_sptr_name(tagged_stream_mux_sptr self) -> std::string"},
	 { (char *)"tagged_stream_mux_sptr_symbol_name", _wrap_tagged_stream_mux_sptr_symbol_name, METH_VARARGS, (char *)"tagged_stream_mux_sptr_symbol_name(tagged_stream_mux_sptr self) -> std::string"},
	 { (char *)"tagged_stream_mux_sptr_input_signature", _wrap_tagged_stream_mux_sptr_input_signature, METH_VARARGS, (char *)"tagged_stream_mux_sptr_input_signature(tagged_stream_mux_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_stream_mux_sptr_output_signature", _wrap_tagged_stream_mux_sptr_output_signature, METH_VARARGS, (char *)"tagged_stream_mux_sptr_output_signature(tagged_stream_mux_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_stream_mux_sptr_unique_id", _wrap_tagged_stream_mux_sptr_unique_id, METH_VARARGS, (char *)"tagged_stream_mux_sptr_unique_id(tagged_stream_mux_sptr self) -> long"},
	 { (char *)"tagged_stream_mux_sptr_to_basic_block", _wrap_tagged_stream_mux_sptr_to_basic_block, METH_VARARGS, (char *)"tagged_stream_mux_sptr_to_basic_block(tagged_stream_mux_sptr self) -> basic_block_sptr"},
	 { (char *)"tagged_stream_mux_sptr_check_topology", (PyCFunction) _wrap_tagged_stream_mux_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_check_topology(tagged_stream_mux_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"tagged_stream_mux_sptr_alias", _wrap_tagged_stream_mux_sptr_alias, METH_VARARGS, (char *)"tagged_stream_mux_sptr_alias(tagged_stream_mux_sptr self) -> std::string"},
	 { (char *)"tagged_stream_mux_sptr_set_block_alias", (PyCFunction) _wrap_tagged_stream_mux_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_set_block_alias(tagged_stream_mux_sptr self, std::string name)"},
	 { (char *)"tagged_stream_mux_sptr__post", (PyCFunction) _wrap_tagged_stream_mux_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr__post(tagged_stream_mux_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"tagged_stream_mux_sptr_message_ports_in", _wrap_tagged_stream_mux_sptr_message_ports_in, METH_VARARGS, (char *)"tagged_stream_mux_sptr_message_ports_in(tagged_stream_mux_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_stream_mux_sptr_message_ports_out", _wrap_tagged_stream_mux_sptr_message_ports_out, METH_VARARGS, (char *)"tagged_stream_mux_sptr_message_ports_out(tagged_stream_mux_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_stream_mux_sptr_message_subscribers", (PyCFunction) _wrap_tagged_stream_mux_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_mux_sptr_message_subscribers(tagged_stream_mux_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"tagged_stream_mux_sptr_swigregister", tagged_stream_mux_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tagged_stream_multiply_length_sptr", _wrap_new_tagged_stream_multiply_length_sptr, METH_VARARGS, (char *)"\n"
		"tagged_stream_multiply_length_sptr()\n"
		"new_tagged_stream_multiply_length_sptr(tagged_stream_multiply_length p) -> tagged_stream_multiply_length_sptr\n"
		""},
	 { (char *)"tagged_stream_multiply_length_sptr___deref__", _wrap_tagged_stream_multiply_length_sptr___deref__, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr___deref__(tagged_stream_multiply_length_sptr self) -> tagged_stream_multiply_length"},
	 { (char *)"delete_tagged_stream_multiply_length_sptr", _wrap_delete_tagged_stream_multiply_length_sptr, METH_VARARGS, (char *)"delete_tagged_stream_multiply_length_sptr(tagged_stream_multiply_length_sptr self)"},
	 { (char *)"tagged_stream_multiply_length_sptr_set_scalar", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_set_scalar, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_set_scalar(tagged_stream_multiply_length_sptr self, double scalar)"},
	 { (char *)"tagged_stream_multiply_length_sptr_make", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_stream_multiply_length_sptr_make(tagged_stream_multiply_length_sptr self, size_t itemsize, std::string const & lengthtagname, \n"
		"    double scalar) -> tagged_stream_multiply_length_sptr\n"
		"\n"
		"Allows scaling of a tagged stream length tag.\n"
		"\n"
		"Searches for a specific tagged stream length tag and multiplies that length by a constant - for constant rate change blocks in a tagged stream\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make a tagged stream multiply_length block.\n"
		"\n"
		"Args:\n"
		"    itemsize : Items size (number of bytes per item)\n"
		"    lengthtagname : Length tag key\n"
		"    scalar : value to scale length tag values by\n"
		""},
	 { (char *)"tagged_stream_multiply_length_sptr_history", _wrap_tagged_stream_multiply_length_sptr_history, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_history(tagged_stream_multiply_length_sptr self) -> unsigned int"},
	 { (char *)"tagged_stream_multiply_length_sptr_declare_sample_delay", _wrap_tagged_stream_multiply_length_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"tagged_stream_multiply_length_sptr_declare_sample_delay(tagged_stream_multiply_length_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"tagged_stream_multiply_length_sptr_sample_delay", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_sample_delay(tagged_stream_multiply_length_sptr self, int which) -> unsigned int"},
	 { (char *)"tagged_stream_multiply_length_sptr_output_multiple", _wrap_tagged_stream_multiply_length_sptr_output_multiple, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_output_multiple(tagged_stream_multiply_length_sptr self) -> int"},
	 { (char *)"tagged_stream_multiply_length_sptr_relative_rate", _wrap_tagged_stream_multiply_length_sptr_relative_rate, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_relative_rate(tagged_stream_multiply_length_sptr self) -> double"},
	 { (char *)"tagged_stream_multiply_length_sptr_start", _wrap_tagged_stream_multiply_length_sptr_start, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_start(tagged_stream_multiply_length_sptr self) -> bool"},
	 { (char *)"tagged_stream_multiply_length_sptr_stop", _wrap_tagged_stream_multiply_length_sptr_stop, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_stop(tagged_stream_multiply_length_sptr self) -> bool"},
	 { (char *)"tagged_stream_multiply_length_sptr_nitems_read", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_nitems_read(tagged_stream_multiply_length_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"tagged_stream_multiply_length_sptr_nitems_written", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_nitems_written(tagged_stream_multiply_length_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"tagged_stream_multiply_length_sptr_max_noutput_items", _wrap_tagged_stream_multiply_length_sptr_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_max_noutput_items(tagged_stream_multiply_length_sptr self) -> int"},
	 { (char *)"tagged_stream_multiply_length_sptr_set_max_noutput_items", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_set_max_noutput_items(tagged_stream_multiply_length_sptr self, int m)"},
	 { (char *)"tagged_stream_multiply_length_sptr_unset_max_noutput_items", _wrap_tagged_stream_multiply_length_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_unset_max_noutput_items(tagged_stream_multiply_length_sptr self)"},
	 { (char *)"tagged_stream_multiply_length_sptr_is_set_max_noutput_items", _wrap_tagged_stream_multiply_length_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_is_set_max_noutput_items(tagged_stream_multiply_length_sptr self) -> bool"},
	 { (char *)"tagged_stream_multiply_length_sptr_set_min_noutput_items", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_set_min_noutput_items(tagged_stream_multiply_length_sptr self, int m)"},
	 { (char *)"tagged_stream_multiply_length_sptr_min_noutput_items", _wrap_tagged_stream_multiply_length_sptr_min_noutput_items, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_min_noutput_items(tagged_stream_multiply_length_sptr self) -> int"},
	 { (char *)"tagged_stream_multiply_length_sptr_max_output_buffer", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_max_output_buffer(tagged_stream_multiply_length_sptr self, int i) -> long"},
	 { (char *)"tagged_stream_multiply_length_sptr_set_max_output_buffer", _wrap_tagged_stream_multiply_length_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"tagged_stream_multiply_length_sptr_set_max_output_buffer(tagged_stream_multiply_length_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"tagged_stream_multiply_length_sptr_min_output_buffer", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_min_output_buffer(tagged_stream_multiply_length_sptr self, int i) -> long"},
	 { (char *)"tagged_stream_multiply_length_sptr_set_min_output_buffer", _wrap_tagged_stream_multiply_length_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"tagged_stream_multiply_length_sptr_set_min_output_buffer(tagged_stream_multiply_length_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_noutput_items", _wrap_tagged_stream_multiply_length_sptr_pc_noutput_items, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_pc_noutput_items(tagged_stream_multiply_length_sptr self) -> float"},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_noutput_items_avg", _wrap_tagged_stream_multiply_length_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_pc_noutput_items_avg(tagged_stream_multiply_length_sptr self) -> float"},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_noutput_items_var", _wrap_tagged_stream_multiply_length_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_pc_noutput_items_var(tagged_stream_multiply_length_sptr self) -> float"},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_nproduced", _wrap_tagged_stream_multiply_length_sptr_pc_nproduced, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_pc_nproduced(tagged_stream_multiply_length_sptr self) -> float"},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_nproduced_avg", _wrap_tagged_stream_multiply_length_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_pc_nproduced_avg(tagged_stream_multiply_length_sptr self) -> float"},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_nproduced_var", _wrap_tagged_stream_multiply_length_sptr_pc_nproduced_var, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_pc_nproduced_var(tagged_stream_multiply_length_sptr self) -> float"},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_input_buffers_full", _wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"tagged_stream_multiply_length_sptr_pc_input_buffers_full(tagged_stream_multiply_length_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg", _wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"tagged_stream_multiply_length_sptr_pc_input_buffers_full_avg(tagged_stream_multiply_length_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_input_buffers_full_var", _wrap_tagged_stream_multiply_length_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"tagged_stream_multiply_length_sptr_pc_input_buffers_full_var(tagged_stream_multiply_length_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_output_buffers_full", _wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"tagged_stream_multiply_length_sptr_pc_output_buffers_full(tagged_stream_multiply_length_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg", _wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"tagged_stream_multiply_length_sptr_pc_output_buffers_full_avg(tagged_stream_multiply_length_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_output_buffers_full_var", _wrap_tagged_stream_multiply_length_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"tagged_stream_multiply_length_sptr_pc_output_buffers_full_var(tagged_stream_multiply_length_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_work_time", _wrap_tagged_stream_multiply_length_sptr_pc_work_time, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_pc_work_time(tagged_stream_multiply_length_sptr self) -> float"},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_work_time_avg", _wrap_tagged_stream_multiply_length_sptr_pc_work_time_avg, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_pc_work_time_avg(tagged_stream_multiply_length_sptr self) -> float"},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_work_time_var", _wrap_tagged_stream_multiply_length_sptr_pc_work_time_var, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_pc_work_time_var(tagged_stream_multiply_length_sptr self) -> float"},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_work_time_total", _wrap_tagged_stream_multiply_length_sptr_pc_work_time_total, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_pc_work_time_total(tagged_stream_multiply_length_sptr self) -> float"},
	 { (char *)"tagged_stream_multiply_length_sptr_pc_throughput_avg", _wrap_tagged_stream_multiply_length_sptr_pc_throughput_avg, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_pc_throughput_avg(tagged_stream_multiply_length_sptr self) -> float"},
	 { (char *)"tagged_stream_multiply_length_sptr_set_processor_affinity", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_set_processor_affinity(tagged_stream_multiply_length_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"tagged_stream_multiply_length_sptr_unset_processor_affinity", _wrap_tagged_stream_multiply_length_sptr_unset_processor_affinity, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_unset_processor_affinity(tagged_stream_multiply_length_sptr self)"},
	 { (char *)"tagged_stream_multiply_length_sptr_processor_affinity", _wrap_tagged_stream_multiply_length_sptr_processor_affinity, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_processor_affinity(tagged_stream_multiply_length_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"tagged_stream_multiply_length_sptr_active_thread_priority", _wrap_tagged_stream_multiply_length_sptr_active_thread_priority, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_active_thread_priority(tagged_stream_multiply_length_sptr self) -> int"},
	 { (char *)"tagged_stream_multiply_length_sptr_thread_priority", _wrap_tagged_stream_multiply_length_sptr_thread_priority, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_thread_priority(tagged_stream_multiply_length_sptr self) -> int"},
	 { (char *)"tagged_stream_multiply_length_sptr_set_thread_priority", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_set_thread_priority(tagged_stream_multiply_length_sptr self, int priority) -> int"},
	 { (char *)"tagged_stream_multiply_length_sptr_name", _wrap_tagged_stream_multiply_length_sptr_name, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_name(tagged_stream_multiply_length_sptr self) -> std::string"},
	 { (char *)"tagged_stream_multiply_length_sptr_symbol_name", _wrap_tagged_stream_multiply_length_sptr_symbol_name, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_symbol_name(tagged_stream_multiply_length_sptr self) -> std::string"},
	 { (char *)"tagged_stream_multiply_length_sptr_input_signature", _wrap_tagged_stream_multiply_length_sptr_input_signature, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_input_signature(tagged_stream_multiply_length_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_stream_multiply_length_sptr_output_signature", _wrap_tagged_stream_multiply_length_sptr_output_signature, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_output_signature(tagged_stream_multiply_length_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_stream_multiply_length_sptr_unique_id", _wrap_tagged_stream_multiply_length_sptr_unique_id, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_unique_id(tagged_stream_multiply_length_sptr self) -> long"},
	 { (char *)"tagged_stream_multiply_length_sptr_to_basic_block", _wrap_tagged_stream_multiply_length_sptr_to_basic_block, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_to_basic_block(tagged_stream_multiply_length_sptr self) -> basic_block_sptr"},
	 { (char *)"tagged_stream_multiply_length_sptr_check_topology", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_check_topology(tagged_stream_multiply_length_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"tagged_stream_multiply_length_sptr_alias", _wrap_tagged_stream_multiply_length_sptr_alias, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_alias(tagged_stream_multiply_length_sptr self) -> std::string"},
	 { (char *)"tagged_stream_multiply_length_sptr_set_block_alias", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_set_block_alias(tagged_stream_multiply_length_sptr self, std::string name)"},
	 { (char *)"tagged_stream_multiply_length_sptr__post", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr__post(tagged_stream_multiply_length_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"tagged_stream_multiply_length_sptr_message_ports_in", _wrap_tagged_stream_multiply_length_sptr_message_ports_in, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_message_ports_in(tagged_stream_multiply_length_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_stream_multiply_length_sptr_message_ports_out", _wrap_tagged_stream_multiply_length_sptr_message_ports_out, METH_VARARGS, (char *)"tagged_stream_multiply_length_sptr_message_ports_out(tagged_stream_multiply_length_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_stream_multiply_length_sptr_message_subscribers", (PyCFunction) _wrap_tagged_stream_multiply_length_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_multiply_length_sptr_message_subscribers(tagged_stream_multiply_length_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"tagged_stream_multiply_length_sptr_swigregister", tagged_stream_multiply_length_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tagged_stream_to_pdu_sptr", _wrap_new_tagged_stream_to_pdu_sptr, METH_VARARGS, (char *)"\n"
		"tagged_stream_to_pdu_sptr()\n"
		"new_tagged_stream_to_pdu_sptr(tagged_stream_to_pdu p) -> tagged_stream_to_pdu_sptr\n"
		""},
	 { (char *)"tagged_stream_to_pdu_sptr___deref__", _wrap_tagged_stream_to_pdu_sptr___deref__, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr___deref__(tagged_stream_to_pdu_sptr self) -> tagged_stream_to_pdu"},
	 { (char *)"delete_tagged_stream_to_pdu_sptr", _wrap_delete_tagged_stream_to_pdu_sptr, METH_VARARGS, (char *)"delete_tagged_stream_to_pdu_sptr(tagged_stream_to_pdu_sptr self)"},
	 { (char *)"tagged_stream_to_pdu_sptr_make", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_stream_to_pdu_sptr_make(tagged_stream_to_pdu_sptr self, gr::blocks::pdu::vector_type type, std::string const & lengthtagname=\"packet_len\") -> tagged_stream_to_pdu_sptr\n"
		"\n"
		"Turns received stream data and tags into PDUs and sends them through a message port.\n"
		"\n"
		"The sent message is a PMT-pair (created by pmt::cons()). The first element is a dictionary containing all the tags. The second is a vector containing the actual data.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Construct a tagged_stream_to_pdu block.\n"
		"\n"
		"Args:\n"
		"    type : PDU type of pdu::vector_type\n"
		"    lengthtagname : The name of the tag that specifies how long the packet is.\n"
		""},
	 { (char *)"tagged_stream_to_pdu_sptr_history", _wrap_tagged_stream_to_pdu_sptr_history, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_history(tagged_stream_to_pdu_sptr self) -> unsigned int"},
	 { (char *)"tagged_stream_to_pdu_sptr_declare_sample_delay", _wrap_tagged_stream_to_pdu_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"tagged_stream_to_pdu_sptr_declare_sample_delay(tagged_stream_to_pdu_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"tagged_stream_to_pdu_sptr_sample_delay", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_sample_delay(tagged_stream_to_pdu_sptr self, int which) -> unsigned int"},
	 { (char *)"tagged_stream_to_pdu_sptr_output_multiple", _wrap_tagged_stream_to_pdu_sptr_output_multiple, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_output_multiple(tagged_stream_to_pdu_sptr self) -> int"},
	 { (char *)"tagged_stream_to_pdu_sptr_relative_rate", _wrap_tagged_stream_to_pdu_sptr_relative_rate, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_relative_rate(tagged_stream_to_pdu_sptr self) -> double"},
	 { (char *)"tagged_stream_to_pdu_sptr_start", _wrap_tagged_stream_to_pdu_sptr_start, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_start(tagged_stream_to_pdu_sptr self) -> bool"},
	 { (char *)"tagged_stream_to_pdu_sptr_stop", _wrap_tagged_stream_to_pdu_sptr_stop, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_stop(tagged_stream_to_pdu_sptr self) -> bool"},
	 { (char *)"tagged_stream_to_pdu_sptr_nitems_read", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_nitems_read(tagged_stream_to_pdu_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"tagged_stream_to_pdu_sptr_nitems_written", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_nitems_written(tagged_stream_to_pdu_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"tagged_stream_to_pdu_sptr_max_noutput_items", _wrap_tagged_stream_to_pdu_sptr_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_max_noutput_items(tagged_stream_to_pdu_sptr self) -> int"},
	 { (char *)"tagged_stream_to_pdu_sptr_set_max_noutput_items", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_set_max_noutput_items(tagged_stream_to_pdu_sptr self, int m)"},
	 { (char *)"tagged_stream_to_pdu_sptr_unset_max_noutput_items", _wrap_tagged_stream_to_pdu_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_unset_max_noutput_items(tagged_stream_to_pdu_sptr self)"},
	 { (char *)"tagged_stream_to_pdu_sptr_is_set_max_noutput_items", _wrap_tagged_stream_to_pdu_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_is_set_max_noutput_items(tagged_stream_to_pdu_sptr self) -> bool"},
	 { (char *)"tagged_stream_to_pdu_sptr_set_min_noutput_items", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_set_min_noutput_items(tagged_stream_to_pdu_sptr self, int m)"},
	 { (char *)"tagged_stream_to_pdu_sptr_min_noutput_items", _wrap_tagged_stream_to_pdu_sptr_min_noutput_items, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_min_noutput_items(tagged_stream_to_pdu_sptr self) -> int"},
	 { (char *)"tagged_stream_to_pdu_sptr_max_output_buffer", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_max_output_buffer(tagged_stream_to_pdu_sptr self, int i) -> long"},
	 { (char *)"tagged_stream_to_pdu_sptr_set_max_output_buffer", _wrap_tagged_stream_to_pdu_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"tagged_stream_to_pdu_sptr_set_max_output_buffer(tagged_stream_to_pdu_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"tagged_stream_to_pdu_sptr_min_output_buffer", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_min_output_buffer(tagged_stream_to_pdu_sptr self, int i) -> long"},
	 { (char *)"tagged_stream_to_pdu_sptr_set_min_output_buffer", _wrap_tagged_stream_to_pdu_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"tagged_stream_to_pdu_sptr_set_min_output_buffer(tagged_stream_to_pdu_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_noutput_items", _wrap_tagged_stream_to_pdu_sptr_pc_noutput_items, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_pc_noutput_items(tagged_stream_to_pdu_sptr self) -> float"},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_noutput_items_avg", _wrap_tagged_stream_to_pdu_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_pc_noutput_items_avg(tagged_stream_to_pdu_sptr self) -> float"},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_noutput_items_var", _wrap_tagged_stream_to_pdu_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_pc_noutput_items_var(tagged_stream_to_pdu_sptr self) -> float"},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_nproduced", _wrap_tagged_stream_to_pdu_sptr_pc_nproduced, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_pc_nproduced(tagged_stream_to_pdu_sptr self) -> float"},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_nproduced_avg", _wrap_tagged_stream_to_pdu_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_pc_nproduced_avg(tagged_stream_to_pdu_sptr self) -> float"},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_nproduced_var", _wrap_tagged_stream_to_pdu_sptr_pc_nproduced_var, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_pc_nproduced_var(tagged_stream_to_pdu_sptr self) -> float"},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_input_buffers_full", _wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"tagged_stream_to_pdu_sptr_pc_input_buffers_full(tagged_stream_to_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg", _wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"tagged_stream_to_pdu_sptr_pc_input_buffers_full_avg(tagged_stream_to_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_input_buffers_full_var", _wrap_tagged_stream_to_pdu_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"tagged_stream_to_pdu_sptr_pc_input_buffers_full_var(tagged_stream_to_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_output_buffers_full", _wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"tagged_stream_to_pdu_sptr_pc_output_buffers_full(tagged_stream_to_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg", _wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"tagged_stream_to_pdu_sptr_pc_output_buffers_full_avg(tagged_stream_to_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_output_buffers_full_var", _wrap_tagged_stream_to_pdu_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"tagged_stream_to_pdu_sptr_pc_output_buffers_full_var(tagged_stream_to_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_work_time", _wrap_tagged_stream_to_pdu_sptr_pc_work_time, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_pc_work_time(tagged_stream_to_pdu_sptr self) -> float"},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_work_time_avg", _wrap_tagged_stream_to_pdu_sptr_pc_work_time_avg, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_pc_work_time_avg(tagged_stream_to_pdu_sptr self) -> float"},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_work_time_var", _wrap_tagged_stream_to_pdu_sptr_pc_work_time_var, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_pc_work_time_var(tagged_stream_to_pdu_sptr self) -> float"},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_work_time_total", _wrap_tagged_stream_to_pdu_sptr_pc_work_time_total, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_pc_work_time_total(tagged_stream_to_pdu_sptr self) -> float"},
	 { (char *)"tagged_stream_to_pdu_sptr_pc_throughput_avg", _wrap_tagged_stream_to_pdu_sptr_pc_throughput_avg, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_pc_throughput_avg(tagged_stream_to_pdu_sptr self) -> float"},
	 { (char *)"tagged_stream_to_pdu_sptr_set_processor_affinity", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_set_processor_affinity(tagged_stream_to_pdu_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"tagged_stream_to_pdu_sptr_unset_processor_affinity", _wrap_tagged_stream_to_pdu_sptr_unset_processor_affinity, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_unset_processor_affinity(tagged_stream_to_pdu_sptr self)"},
	 { (char *)"tagged_stream_to_pdu_sptr_processor_affinity", _wrap_tagged_stream_to_pdu_sptr_processor_affinity, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_processor_affinity(tagged_stream_to_pdu_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"tagged_stream_to_pdu_sptr_active_thread_priority", _wrap_tagged_stream_to_pdu_sptr_active_thread_priority, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_active_thread_priority(tagged_stream_to_pdu_sptr self) -> int"},
	 { (char *)"tagged_stream_to_pdu_sptr_thread_priority", _wrap_tagged_stream_to_pdu_sptr_thread_priority, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_thread_priority(tagged_stream_to_pdu_sptr self) -> int"},
	 { (char *)"tagged_stream_to_pdu_sptr_set_thread_priority", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_set_thread_priority(tagged_stream_to_pdu_sptr self, int priority) -> int"},
	 { (char *)"tagged_stream_to_pdu_sptr_name", _wrap_tagged_stream_to_pdu_sptr_name, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_name(tagged_stream_to_pdu_sptr self) -> std::string"},
	 { (char *)"tagged_stream_to_pdu_sptr_symbol_name", _wrap_tagged_stream_to_pdu_sptr_symbol_name, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_symbol_name(tagged_stream_to_pdu_sptr self) -> std::string"},
	 { (char *)"tagged_stream_to_pdu_sptr_input_signature", _wrap_tagged_stream_to_pdu_sptr_input_signature, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_input_signature(tagged_stream_to_pdu_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_stream_to_pdu_sptr_output_signature", _wrap_tagged_stream_to_pdu_sptr_output_signature, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_output_signature(tagged_stream_to_pdu_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_stream_to_pdu_sptr_unique_id", _wrap_tagged_stream_to_pdu_sptr_unique_id, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_unique_id(tagged_stream_to_pdu_sptr self) -> long"},
	 { (char *)"tagged_stream_to_pdu_sptr_to_basic_block", _wrap_tagged_stream_to_pdu_sptr_to_basic_block, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_to_basic_block(tagged_stream_to_pdu_sptr self) -> basic_block_sptr"},
	 { (char *)"tagged_stream_to_pdu_sptr_check_topology", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_check_topology(tagged_stream_to_pdu_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"tagged_stream_to_pdu_sptr_alias", _wrap_tagged_stream_to_pdu_sptr_alias, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_alias(tagged_stream_to_pdu_sptr self) -> std::string"},
	 { (char *)"tagged_stream_to_pdu_sptr_set_block_alias", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_set_block_alias(tagged_stream_to_pdu_sptr self, std::string name)"},
	 { (char *)"tagged_stream_to_pdu_sptr__post", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr__post(tagged_stream_to_pdu_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"tagged_stream_to_pdu_sptr_message_ports_in", _wrap_tagged_stream_to_pdu_sptr_message_ports_in, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_message_ports_in(tagged_stream_to_pdu_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_stream_to_pdu_sptr_message_ports_out", _wrap_tagged_stream_to_pdu_sptr_message_ports_out, METH_VARARGS, (char *)"tagged_stream_to_pdu_sptr_message_ports_out(tagged_stream_to_pdu_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_stream_to_pdu_sptr_message_subscribers", (PyCFunction) _wrap_tagged_stream_to_pdu_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_stream_to_pdu_sptr_message_subscribers(tagged_stream_to_pdu_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"tagged_stream_to_pdu_sptr_swigregister", tagged_stream_to_pdu_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tags_strobe_sptr", _wrap_new_tags_strobe_sptr, METH_VARARGS, (char *)"\n"
		"tags_strobe_sptr()\n"
		"new_tags_strobe_sptr(tags_strobe p) -> tags_strobe_sptr\n"
		""},
	 { (char *)"tags_strobe_sptr___deref__", _wrap_tags_strobe_sptr___deref__, METH_VARARGS, (char *)"tags_strobe_sptr___deref__(tags_strobe_sptr self) -> tags_strobe"},
	 { (char *)"delete_tags_strobe_sptr", _wrap_delete_tags_strobe_sptr, METH_VARARGS, (char *)"delete_tags_strobe_sptr(tags_strobe_sptr self)"},
	 { (char *)"tags_strobe_sptr_make", (PyCFunction) _wrap_tags_strobe_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tags_strobe_sptr_make(tags_strobe_sptr self, size_t sizeof_stream_item, swig_int_ptr value, uint64_t nsamps, \n"
		"    swig_int_ptr key=pmt::intern(\"strobe\")) -> tags_strobe_sptr\n"
		"\n"
		"Send tags at defined interval.\n"
		"\n"
		"Sends a tag with key 'strobe' and a user-defined value (as a PMT) every  number of samples. Useful for testing/debugging the tags system.\n"
		"\n"
		"Because tags are sent with a data stream, this is a source block that acts identical to a null_source block.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make a tags stobe block to send tags with value  every  number of samples.\n"
		"\n"
		"Args:\n"
		"    sizeof_stream_item : size of the stream items in bytes.\n"
		"    value : The value of the tags to send, as a PMT.\n"
		"    nsamps : the number of samples between each tag.\n"
		"    key : The tag key to sent\n"
		""},
	 { (char *)"tags_strobe_sptr_set_value", (PyCFunction) _wrap_tags_strobe_sptr_set_value, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tags_strobe_sptr_set_value(tags_strobe_sptr self, swig_int_ptr value)\n"
		"\n"
		"Reset the value of the tags being sent.\n"
		""},
	 { (char *)"tags_strobe_sptr_set_key", (PyCFunction) _wrap_tags_strobe_sptr_set_key, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tags_strobe_sptr_set_key(tags_strobe_sptr self, swig_int_ptr key)\n"
		"\n"
		"Change the tag key we are sending\n"
		""},
	 { (char *)"tags_strobe_sptr_value", _wrap_tags_strobe_sptr_value, METH_VARARGS, (char *)"\n"
		"tags_strobe_sptr_value(tags_strobe_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get the value of the tags being sent.\n"
		""},
	 { (char *)"tags_strobe_sptr_key", _wrap_tags_strobe_sptr_key, METH_VARARGS, (char *)"\n"
		"tags_strobe_sptr_key(tags_strobe_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get the key of the tags being sent.\n"
		""},
	 { (char *)"tags_strobe_sptr_set_nsamps", (PyCFunction) _wrap_tags_strobe_sptr_set_nsamps, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tags_strobe_sptr_set_nsamps(tags_strobe_sptr self, uint64_t nsamps)\n"
		"\n"
		"Reset the sending interval.\n"
		""},
	 { (char *)"tags_strobe_sptr_nsamps", _wrap_tags_strobe_sptr_nsamps, METH_VARARGS, (char *)"\n"
		"tags_strobe_sptr_nsamps(tags_strobe_sptr self) -> uint64_t\n"
		"\n"
		"Get the number of samples between the tag strobe.\n"
		""},
	 { (char *)"tags_strobe_sptr_history", _wrap_tags_strobe_sptr_history, METH_VARARGS, (char *)"tags_strobe_sptr_history(tags_strobe_sptr self) -> unsigned int"},
	 { (char *)"tags_strobe_sptr_declare_sample_delay", _wrap_tags_strobe_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"tags_strobe_sptr_declare_sample_delay(tags_strobe_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"tags_strobe_sptr_sample_delay", (PyCFunction) _wrap_tags_strobe_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_sample_delay(tags_strobe_sptr self, int which) -> unsigned int"},
	 { (char *)"tags_strobe_sptr_output_multiple", _wrap_tags_strobe_sptr_output_multiple, METH_VARARGS, (char *)"tags_strobe_sptr_output_multiple(tags_strobe_sptr self) -> int"},
	 { (char *)"tags_strobe_sptr_relative_rate", _wrap_tags_strobe_sptr_relative_rate, METH_VARARGS, (char *)"tags_strobe_sptr_relative_rate(tags_strobe_sptr self) -> double"},
	 { (char *)"tags_strobe_sptr_start", _wrap_tags_strobe_sptr_start, METH_VARARGS, (char *)"tags_strobe_sptr_start(tags_strobe_sptr self) -> bool"},
	 { (char *)"tags_strobe_sptr_stop", _wrap_tags_strobe_sptr_stop, METH_VARARGS, (char *)"tags_strobe_sptr_stop(tags_strobe_sptr self) -> bool"},
	 { (char *)"tags_strobe_sptr_nitems_read", (PyCFunction) _wrap_tags_strobe_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_nitems_read(tags_strobe_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"tags_strobe_sptr_nitems_written", (PyCFunction) _wrap_tags_strobe_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_nitems_written(tags_strobe_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"tags_strobe_sptr_max_noutput_items", _wrap_tags_strobe_sptr_max_noutput_items, METH_VARARGS, (char *)"tags_strobe_sptr_max_noutput_items(tags_strobe_sptr self) -> int"},
	 { (char *)"tags_strobe_sptr_set_max_noutput_items", (PyCFunction) _wrap_tags_strobe_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_set_max_noutput_items(tags_strobe_sptr self, int m)"},
	 { (char *)"tags_strobe_sptr_unset_max_noutput_items", _wrap_tags_strobe_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"tags_strobe_sptr_unset_max_noutput_items(tags_strobe_sptr self)"},
	 { (char *)"tags_strobe_sptr_is_set_max_noutput_items", _wrap_tags_strobe_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"tags_strobe_sptr_is_set_max_noutput_items(tags_strobe_sptr self) -> bool"},
	 { (char *)"tags_strobe_sptr_set_min_noutput_items", (PyCFunction) _wrap_tags_strobe_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_set_min_noutput_items(tags_strobe_sptr self, int m)"},
	 { (char *)"tags_strobe_sptr_min_noutput_items", _wrap_tags_strobe_sptr_min_noutput_items, METH_VARARGS, (char *)"tags_strobe_sptr_min_noutput_items(tags_strobe_sptr self) -> int"},
	 { (char *)"tags_strobe_sptr_max_output_buffer", (PyCFunction) _wrap_tags_strobe_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_max_output_buffer(tags_strobe_sptr self, int i) -> long"},
	 { (char *)"tags_strobe_sptr_set_max_output_buffer", _wrap_tags_strobe_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"tags_strobe_sptr_set_max_output_buffer(tags_strobe_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"tags_strobe_sptr_min_output_buffer", (PyCFunction) _wrap_tags_strobe_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_min_output_buffer(tags_strobe_sptr self, int i) -> long"},
	 { (char *)"tags_strobe_sptr_set_min_output_buffer", _wrap_tags_strobe_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"tags_strobe_sptr_set_min_output_buffer(tags_strobe_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"tags_strobe_sptr_pc_noutput_items", _wrap_tags_strobe_sptr_pc_noutput_items, METH_VARARGS, (char *)"tags_strobe_sptr_pc_noutput_items(tags_strobe_sptr self) -> float"},
	 { (char *)"tags_strobe_sptr_pc_noutput_items_avg", _wrap_tags_strobe_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"tags_strobe_sptr_pc_noutput_items_avg(tags_strobe_sptr self) -> float"},
	 { (char *)"tags_strobe_sptr_pc_noutput_items_var", _wrap_tags_strobe_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"tags_strobe_sptr_pc_noutput_items_var(tags_strobe_sptr self) -> float"},
	 { (char *)"tags_strobe_sptr_pc_nproduced", _wrap_tags_strobe_sptr_pc_nproduced, METH_VARARGS, (char *)"tags_strobe_sptr_pc_nproduced(tags_strobe_sptr self) -> float"},
	 { (char *)"tags_strobe_sptr_pc_nproduced_avg", _wrap_tags_strobe_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"tags_strobe_sptr_pc_nproduced_avg(tags_strobe_sptr self) -> float"},
	 { (char *)"tags_strobe_sptr_pc_nproduced_var", _wrap_tags_strobe_sptr_pc_nproduced_var, METH_VARARGS, (char *)"tags_strobe_sptr_pc_nproduced_var(tags_strobe_sptr self) -> float"},
	 { (char *)"tags_strobe_sptr_pc_input_buffers_full", _wrap_tags_strobe_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"tags_strobe_sptr_pc_input_buffers_full(tags_strobe_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tags_strobe_sptr_pc_input_buffers_full_avg", _wrap_tags_strobe_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"tags_strobe_sptr_pc_input_buffers_full_avg(tags_strobe_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tags_strobe_sptr_pc_input_buffers_full_var", _wrap_tags_strobe_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"tags_strobe_sptr_pc_input_buffers_full_var(tags_strobe_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tags_strobe_sptr_pc_output_buffers_full", _wrap_tags_strobe_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"tags_strobe_sptr_pc_output_buffers_full(tags_strobe_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tags_strobe_sptr_pc_output_buffers_full_avg", _wrap_tags_strobe_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"tags_strobe_sptr_pc_output_buffers_full_avg(tags_strobe_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tags_strobe_sptr_pc_output_buffers_full_var", _wrap_tags_strobe_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"tags_strobe_sptr_pc_output_buffers_full_var(tags_strobe_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tags_strobe_sptr_pc_work_time", _wrap_tags_strobe_sptr_pc_work_time, METH_VARARGS, (char *)"tags_strobe_sptr_pc_work_time(tags_strobe_sptr self) -> float"},
	 { (char *)"tags_strobe_sptr_pc_work_time_avg", _wrap_tags_strobe_sptr_pc_work_time_avg, METH_VARARGS, (char *)"tags_strobe_sptr_pc_work_time_avg(tags_strobe_sptr self) -> float"},
	 { (char *)"tags_strobe_sptr_pc_work_time_var", _wrap_tags_strobe_sptr_pc_work_time_var, METH_VARARGS, (char *)"tags_strobe_sptr_pc_work_time_var(tags_strobe_sptr self) -> float"},
	 { (char *)"tags_strobe_sptr_pc_work_time_total", _wrap_tags_strobe_sptr_pc_work_time_total, METH_VARARGS, (char *)"tags_strobe_sptr_pc_work_time_total(tags_strobe_sptr self) -> float"},
	 { (char *)"tags_strobe_sptr_pc_throughput_avg", _wrap_tags_strobe_sptr_pc_throughput_avg, METH_VARARGS, (char *)"tags_strobe_sptr_pc_throughput_avg(tags_strobe_sptr self) -> float"},
	 { (char *)"tags_strobe_sptr_set_processor_affinity", (PyCFunction) _wrap_tags_strobe_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_set_processor_affinity(tags_strobe_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"tags_strobe_sptr_unset_processor_affinity", _wrap_tags_strobe_sptr_unset_processor_affinity, METH_VARARGS, (char *)"tags_strobe_sptr_unset_processor_affinity(tags_strobe_sptr self)"},
	 { (char *)"tags_strobe_sptr_processor_affinity", _wrap_tags_strobe_sptr_processor_affinity, METH_VARARGS, (char *)"tags_strobe_sptr_processor_affinity(tags_strobe_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"tags_strobe_sptr_active_thread_priority", _wrap_tags_strobe_sptr_active_thread_priority, METH_VARARGS, (char *)"tags_strobe_sptr_active_thread_priority(tags_strobe_sptr self) -> int"},
	 { (char *)"tags_strobe_sptr_thread_priority", _wrap_tags_strobe_sptr_thread_priority, METH_VARARGS, (char *)"tags_strobe_sptr_thread_priority(tags_strobe_sptr self) -> int"},
	 { (char *)"tags_strobe_sptr_set_thread_priority", (PyCFunction) _wrap_tags_strobe_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_set_thread_priority(tags_strobe_sptr self, int priority) -> int"},
	 { (char *)"tags_strobe_sptr_name", _wrap_tags_strobe_sptr_name, METH_VARARGS, (char *)"tags_strobe_sptr_name(tags_strobe_sptr self) -> std::string"},
	 { (char *)"tags_strobe_sptr_symbol_name", _wrap_tags_strobe_sptr_symbol_name, METH_VARARGS, (char *)"tags_strobe_sptr_symbol_name(tags_strobe_sptr self) -> std::string"},
	 { (char *)"tags_strobe_sptr_input_signature", _wrap_tags_strobe_sptr_input_signature, METH_VARARGS, (char *)"tags_strobe_sptr_input_signature(tags_strobe_sptr self) -> io_signature_sptr"},
	 { (char *)"tags_strobe_sptr_output_signature", _wrap_tags_strobe_sptr_output_signature, METH_VARARGS, (char *)"tags_strobe_sptr_output_signature(tags_strobe_sptr self) -> io_signature_sptr"},
	 { (char *)"tags_strobe_sptr_unique_id", _wrap_tags_strobe_sptr_unique_id, METH_VARARGS, (char *)"tags_strobe_sptr_unique_id(tags_strobe_sptr self) -> long"},
	 { (char *)"tags_strobe_sptr_to_basic_block", _wrap_tags_strobe_sptr_to_basic_block, METH_VARARGS, (char *)"tags_strobe_sptr_to_basic_block(tags_strobe_sptr self) -> basic_block_sptr"},
	 { (char *)"tags_strobe_sptr_check_topology", (PyCFunction) _wrap_tags_strobe_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_check_topology(tags_strobe_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"tags_strobe_sptr_alias", _wrap_tags_strobe_sptr_alias, METH_VARARGS, (char *)"tags_strobe_sptr_alias(tags_strobe_sptr self) -> std::string"},
	 { (char *)"tags_strobe_sptr_set_block_alias", (PyCFunction) _wrap_tags_strobe_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_set_block_alias(tags_strobe_sptr self, std::string name)"},
	 { (char *)"tags_strobe_sptr__post", (PyCFunction) _wrap_tags_strobe_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr__post(tags_strobe_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"tags_strobe_sptr_message_ports_in", _wrap_tags_strobe_sptr_message_ports_in, METH_VARARGS, (char *)"tags_strobe_sptr_message_ports_in(tags_strobe_sptr self) -> swig_int_ptr"},
	 { (char *)"tags_strobe_sptr_message_ports_out", _wrap_tags_strobe_sptr_message_ports_out, METH_VARARGS, (char *)"tags_strobe_sptr_message_ports_out(tags_strobe_sptr self) -> swig_int_ptr"},
	 { (char *)"tags_strobe_sptr_message_subscribers", (PyCFunction) _wrap_tags_strobe_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"tags_strobe_sptr_message_subscribers(tags_strobe_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"tags_strobe_sptr_swigregister", tags_strobe_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tcp_server_sink_sptr", _wrap_new_tcp_server_sink_sptr, METH_VARARGS, (char *)"\n"
		"tcp_server_sink_sptr()\n"
		"new_tcp_server_sink_sptr(tcp_server_sink p) -> tcp_server_sink_sptr\n"
		""},
	 { (char *)"tcp_server_sink_sptr___deref__", _wrap_tcp_server_sink_sptr___deref__, METH_VARARGS, (char *)"tcp_server_sink_sptr___deref__(tcp_server_sink_sptr self) -> tcp_server_sink"},
	 { (char *)"delete_tcp_server_sink_sptr", _wrap_delete_tcp_server_sink_sptr, METH_VARARGS, (char *)"delete_tcp_server_sink_sptr(tcp_server_sink_sptr self)"},
	 { (char *)"tcp_server_sink_sptr_make", (PyCFunction) _wrap_tcp_server_sink_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tcp_server_sink_sptr_make(tcp_server_sink_sptr self, size_t itemsize, std::string const & host, int port, bool noblock=False) -> tcp_server_sink_sptr\n"
		"\n"
		"Send stream trought an TCP socket.\n"
		"\n"
		"Listen for incoming TCP connection(s). Duplicate data for each opened connection. Optionally can wait until first client connects before streaming starts.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"TCP Server Sink Constructor.\n"
		"\n"
		"Args:\n"
		"    itemsize : The size (in bytes) of the item datatype\n"
		"    host : The name or IP address of interface to bind to.\n"
		"    port : Port where to listen.\n"
		"    noblock : If false, wait until first client connects before streaming starts. In non blocking mode (noblock=true), drop data onto floor if no client is connected.\n"
		""},
	 { (char *)"tcp_server_sink_sptr_history", _wrap_tcp_server_sink_sptr_history, METH_VARARGS, (char *)"tcp_server_sink_sptr_history(tcp_server_sink_sptr self) -> unsigned int"},
	 { (char *)"tcp_server_sink_sptr_declare_sample_delay", _wrap_tcp_server_sink_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"tcp_server_sink_sptr_declare_sample_delay(tcp_server_sink_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"tcp_server_sink_sptr_sample_delay", (PyCFunction) _wrap_tcp_server_sink_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_sample_delay(tcp_server_sink_sptr self, int which) -> unsigned int"},
	 { (char *)"tcp_server_sink_sptr_output_multiple", _wrap_tcp_server_sink_sptr_output_multiple, METH_VARARGS, (char *)"tcp_server_sink_sptr_output_multiple(tcp_server_sink_sptr self) -> int"},
	 { (char *)"tcp_server_sink_sptr_relative_rate", _wrap_tcp_server_sink_sptr_relative_rate, METH_VARARGS, (char *)"tcp_server_sink_sptr_relative_rate(tcp_server_sink_sptr self) -> double"},
	 { (char *)"tcp_server_sink_sptr_start", _wrap_tcp_server_sink_sptr_start, METH_VARARGS, (char *)"tcp_server_sink_sptr_start(tcp_server_sink_sptr self) -> bool"},
	 { (char *)"tcp_server_sink_sptr_stop", _wrap_tcp_server_sink_sptr_stop, METH_VARARGS, (char *)"tcp_server_sink_sptr_stop(tcp_server_sink_sptr self) -> bool"},
	 { (char *)"tcp_server_sink_sptr_nitems_read", (PyCFunction) _wrap_tcp_server_sink_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_nitems_read(tcp_server_sink_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"tcp_server_sink_sptr_nitems_written", (PyCFunction) _wrap_tcp_server_sink_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_nitems_written(tcp_server_sink_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"tcp_server_sink_sptr_max_noutput_items", _wrap_tcp_server_sink_sptr_max_noutput_items, METH_VARARGS, (char *)"tcp_server_sink_sptr_max_noutput_items(tcp_server_sink_sptr self) -> int"},
	 { (char *)"tcp_server_sink_sptr_set_max_noutput_items", (PyCFunction) _wrap_tcp_server_sink_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_set_max_noutput_items(tcp_server_sink_sptr self, int m)"},
	 { (char *)"tcp_server_sink_sptr_unset_max_noutput_items", _wrap_tcp_server_sink_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"tcp_server_sink_sptr_unset_max_noutput_items(tcp_server_sink_sptr self)"},
	 { (char *)"tcp_server_sink_sptr_is_set_max_noutput_items", _wrap_tcp_server_sink_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"tcp_server_sink_sptr_is_set_max_noutput_items(tcp_server_sink_sptr self) -> bool"},
	 { (char *)"tcp_server_sink_sptr_set_min_noutput_items", (PyCFunction) _wrap_tcp_server_sink_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_set_min_noutput_items(tcp_server_sink_sptr self, int m)"},
	 { (char *)"tcp_server_sink_sptr_min_noutput_items", _wrap_tcp_server_sink_sptr_min_noutput_items, METH_VARARGS, (char *)"tcp_server_sink_sptr_min_noutput_items(tcp_server_sink_sptr self) -> int"},
	 { (char *)"tcp_server_sink_sptr_max_output_buffer", (PyCFunction) _wrap_tcp_server_sink_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_max_output_buffer(tcp_server_sink_sptr self, int i) -> long"},
	 { (char *)"tcp_server_sink_sptr_set_max_output_buffer", _wrap_tcp_server_sink_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"tcp_server_sink_sptr_set_max_output_buffer(tcp_server_sink_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"tcp_server_sink_sptr_min_output_buffer", (PyCFunction) _wrap_tcp_server_sink_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_min_output_buffer(tcp_server_sink_sptr self, int i) -> long"},
	 { (char *)"tcp_server_sink_sptr_set_min_output_buffer", _wrap_tcp_server_sink_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"tcp_server_sink_sptr_set_min_output_buffer(tcp_server_sink_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"tcp_server_sink_sptr_pc_noutput_items", _wrap_tcp_server_sink_sptr_pc_noutput_items, METH_VARARGS, (char *)"tcp_server_sink_sptr_pc_noutput_items(tcp_server_sink_sptr self) -> float"},
	 { (char *)"tcp_server_sink_sptr_pc_noutput_items_avg", _wrap_tcp_server_sink_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"tcp_server_sink_sptr_pc_noutput_items_avg(tcp_server_sink_sptr self) -> float"},
	 { (char *)"tcp_server_sink_sptr_pc_noutput_items_var", _wrap_tcp_server_sink_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"tcp_server_sink_sptr_pc_noutput_items_var(tcp_server_sink_sptr self) -> float"},
	 { (char *)"tcp_server_sink_sptr_pc_nproduced", _wrap_tcp_server_sink_sptr_pc_nproduced, METH_VARARGS, (char *)"tcp_server_sink_sptr_pc_nproduced(tcp_server_sink_sptr self) -> float"},
	 { (char *)"tcp_server_sink_sptr_pc_nproduced_avg", _wrap_tcp_server_sink_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"tcp_server_sink_sptr_pc_nproduced_avg(tcp_server_sink_sptr self) -> float"},
	 { (char *)"tcp_server_sink_sptr_pc_nproduced_var", _wrap_tcp_server_sink_sptr_pc_nproduced_var, METH_VARARGS, (char *)"tcp_server_sink_sptr_pc_nproduced_var(tcp_server_sink_sptr self) -> float"},
	 { (char *)"tcp_server_sink_sptr_pc_input_buffers_full", _wrap_tcp_server_sink_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"tcp_server_sink_sptr_pc_input_buffers_full(tcp_server_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tcp_server_sink_sptr_pc_input_buffers_full_avg", _wrap_tcp_server_sink_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"tcp_server_sink_sptr_pc_input_buffers_full_avg(tcp_server_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tcp_server_sink_sptr_pc_input_buffers_full_var", _wrap_tcp_server_sink_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"tcp_server_sink_sptr_pc_input_buffers_full_var(tcp_server_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tcp_server_sink_sptr_pc_output_buffers_full", _wrap_tcp_server_sink_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"tcp_server_sink_sptr_pc_output_buffers_full(tcp_server_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tcp_server_sink_sptr_pc_output_buffers_full_avg", _wrap_tcp_server_sink_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"tcp_server_sink_sptr_pc_output_buffers_full_avg(tcp_server_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tcp_server_sink_sptr_pc_output_buffers_full_var", _wrap_tcp_server_sink_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"tcp_server_sink_sptr_pc_output_buffers_full_var(tcp_server_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tcp_server_sink_sptr_pc_work_time", _wrap_tcp_server_sink_sptr_pc_work_time, METH_VARARGS, (char *)"tcp_server_sink_sptr_pc_work_time(tcp_server_sink_sptr self) -> float"},
	 { (char *)"tcp_server_sink_sptr_pc_work_time_avg", _wrap_tcp_server_sink_sptr_pc_work_time_avg, METH_VARARGS, (char *)"tcp_server_sink_sptr_pc_work_time_avg(tcp_server_sink_sptr self) -> float"},
	 { (char *)"tcp_server_sink_sptr_pc_work_time_var", _wrap_tcp_server_sink_sptr_pc_work_time_var, METH_VARARGS, (char *)"tcp_server_sink_sptr_pc_work_time_var(tcp_server_sink_sptr self) -> float"},
	 { (char *)"tcp_server_sink_sptr_pc_work_time_total", _wrap_tcp_server_sink_sptr_pc_work_time_total, METH_VARARGS, (char *)"tcp_server_sink_sptr_pc_work_time_total(tcp_server_sink_sptr self) -> float"},
	 { (char *)"tcp_server_sink_sptr_pc_throughput_avg", _wrap_tcp_server_sink_sptr_pc_throughput_avg, METH_VARARGS, (char *)"tcp_server_sink_sptr_pc_throughput_avg(tcp_server_sink_sptr self) -> float"},
	 { (char *)"tcp_server_sink_sptr_set_processor_affinity", (PyCFunction) _wrap_tcp_server_sink_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_set_processor_affinity(tcp_server_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"tcp_server_sink_sptr_unset_processor_affinity", _wrap_tcp_server_sink_sptr_unset_processor_affinity, METH_VARARGS, (char *)"tcp_server_sink_sptr_unset_processor_affinity(tcp_server_sink_sptr self)"},
	 { (char *)"tcp_server_sink_sptr_processor_affinity", _wrap_tcp_server_sink_sptr_processor_affinity, METH_VARARGS, (char *)"tcp_server_sink_sptr_processor_affinity(tcp_server_sink_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"tcp_server_sink_sptr_active_thread_priority", _wrap_tcp_server_sink_sptr_active_thread_priority, METH_VARARGS, (char *)"tcp_server_sink_sptr_active_thread_priority(tcp_server_sink_sptr self) -> int"},
	 { (char *)"tcp_server_sink_sptr_thread_priority", _wrap_tcp_server_sink_sptr_thread_priority, METH_VARARGS, (char *)"tcp_server_sink_sptr_thread_priority(tcp_server_sink_sptr self) -> int"},
	 { (char *)"tcp_server_sink_sptr_set_thread_priority", (PyCFunction) _wrap_tcp_server_sink_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_set_thread_priority(tcp_server_sink_sptr self, int priority) -> int"},
	 { (char *)"tcp_server_sink_sptr_name", _wrap_tcp_server_sink_sptr_name, METH_VARARGS, (char *)"tcp_server_sink_sptr_name(tcp_server_sink_sptr self) -> std::string"},
	 { (char *)"tcp_server_sink_sptr_symbol_name", _wrap_tcp_server_sink_sptr_symbol_name, METH_VARARGS, (char *)"tcp_server_sink_sptr_symbol_name(tcp_server_sink_sptr self) -> std::string"},
	 { (char *)"tcp_server_sink_sptr_input_signature", _wrap_tcp_server_sink_sptr_input_signature, METH_VARARGS, (char *)"tcp_server_sink_sptr_input_signature(tcp_server_sink_sptr self) -> io_signature_sptr"},
	 { (char *)"tcp_server_sink_sptr_output_signature", _wrap_tcp_server_sink_sptr_output_signature, METH_VARARGS, (char *)"tcp_server_sink_sptr_output_signature(tcp_server_sink_sptr self) -> io_signature_sptr"},
	 { (char *)"tcp_server_sink_sptr_unique_id", _wrap_tcp_server_sink_sptr_unique_id, METH_VARARGS, (char *)"tcp_server_sink_sptr_unique_id(tcp_server_sink_sptr self) -> long"},
	 { (char *)"tcp_server_sink_sptr_to_basic_block", _wrap_tcp_server_sink_sptr_to_basic_block, METH_VARARGS, (char *)"tcp_server_sink_sptr_to_basic_block(tcp_server_sink_sptr self) -> basic_block_sptr"},
	 { (char *)"tcp_server_sink_sptr_check_topology", (PyCFunction) _wrap_tcp_server_sink_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_check_topology(tcp_server_sink_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"tcp_server_sink_sptr_alias", _wrap_tcp_server_sink_sptr_alias, METH_VARARGS, (char *)"tcp_server_sink_sptr_alias(tcp_server_sink_sptr self) -> std::string"},
	 { (char *)"tcp_server_sink_sptr_set_block_alias", (PyCFunction) _wrap_tcp_server_sink_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_set_block_alias(tcp_server_sink_sptr self, std::string name)"},
	 { (char *)"tcp_server_sink_sptr__post", (PyCFunction) _wrap_tcp_server_sink_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr__post(tcp_server_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"tcp_server_sink_sptr_message_ports_in", _wrap_tcp_server_sink_sptr_message_ports_in, METH_VARARGS, (char *)"tcp_server_sink_sptr_message_ports_in(tcp_server_sink_sptr self) -> swig_int_ptr"},
	 { (char *)"tcp_server_sink_sptr_message_ports_out", _wrap_tcp_server_sink_sptr_message_ports_out, METH_VARARGS, (char *)"tcp_server_sink_sptr_message_ports_out(tcp_server_sink_sptr self) -> swig_int_ptr"},
	 { (char *)"tcp_server_sink_sptr_message_subscribers", (PyCFunction) _wrap_tcp_server_sink_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"tcp_server_sink_sptr_message_subscribers(tcp_server_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"tcp_server_sink_sptr_swigregister", tcp_server_sink_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_test_tag_variable_rate_ff_sptr", _wrap_new_test_tag_variable_rate_ff_sptr, METH_VARARGS, (char *)"\n"
		"test_tag_variable_rate_ff_sptr()\n"
		"new_test_tag_variable_rate_ff_sptr(test_tag_variable_rate_ff p) -> test_tag_variable_rate_ff_sptr\n"
		""},
	 { (char *)"test_tag_variable_rate_ff_sptr___deref__", _wrap_test_tag_variable_rate_ff_sptr___deref__, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr___deref__(test_tag_variable_rate_ff_sptr self) -> test_tag_variable_rate_ff"},
	 { (char *)"delete_test_tag_variable_rate_ff_sptr", _wrap_delete_test_tag_variable_rate_ff_sptr, METH_VARARGS, (char *)"delete_test_tag_variable_rate_ff_sptr(test_tag_variable_rate_ff_sptr self)"},
	 { (char *)"test_tag_variable_rate_ff_sptr_make", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"test_tag_variable_rate_ff_sptr_make(test_tag_variable_rate_ff_sptr self, bool update_once=False, double update_step=0.001) -> test_tag_variable_rate_ff_sptr\n"
		"\n"
		"Used for testing tag propagation.\n"
		"\n"
		"This block resamples the stream by a factor that starts at 0.5 but varies around by some random walk. The relative rate of the block is initialized to 0.5 and the random number generator is seeded based on the time. For each input, if the random number is >= 0.5, the relative rate is increased by ; otherwise, it is decreased by .\n"
		"\n"
		"The rate of the change of the resampling factor is set by the flag . If this is set to true, then the rate is only updated once per work function. If it is set to false (default), then the rate is changed with every input sample.\n"
		"\n"
		"The block's ctor sets the propagation policy to TPP_DONT to stop tags from automatically propagating. Instead, we handle the tag propagation ourselves from within the work function. Because the relative_rate changes so fast, the tag placement cannot be based on a single factor after the call to work and must be handled when the samples are and based on the current resampling rate.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build a test_tag_variable_rate_ff block.\n"
		"\n"
		"Args:\n"
		"    update_once : Update the resampling rate once per call to work (default=false).\n"
		"    update_step : How much to adjust the resampling rate by when the update occurs (default=0.001).\n"
		""},
	 { (char *)"test_tag_variable_rate_ff_sptr_history", _wrap_test_tag_variable_rate_ff_sptr_history, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_history(test_tag_variable_rate_ff_sptr self) -> unsigned int"},
	 { (char *)"test_tag_variable_rate_ff_sptr_declare_sample_delay", _wrap_test_tag_variable_rate_ff_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"test_tag_variable_rate_ff_sptr_declare_sample_delay(test_tag_variable_rate_ff_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"test_tag_variable_rate_ff_sptr_sample_delay", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_sample_delay(test_tag_variable_rate_ff_sptr self, int which) -> unsigned int"},
	 { (char *)"test_tag_variable_rate_ff_sptr_output_multiple", _wrap_test_tag_variable_rate_ff_sptr_output_multiple, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_output_multiple(test_tag_variable_rate_ff_sptr self) -> int"},
	 { (char *)"test_tag_variable_rate_ff_sptr_relative_rate", _wrap_test_tag_variable_rate_ff_sptr_relative_rate, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_relative_rate(test_tag_variable_rate_ff_sptr self) -> double"},
	 { (char *)"test_tag_variable_rate_ff_sptr_start", _wrap_test_tag_variable_rate_ff_sptr_start, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_start(test_tag_variable_rate_ff_sptr self) -> bool"},
	 { (char *)"test_tag_variable_rate_ff_sptr_stop", _wrap_test_tag_variable_rate_ff_sptr_stop, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_stop(test_tag_variable_rate_ff_sptr self) -> bool"},
	 { (char *)"test_tag_variable_rate_ff_sptr_nitems_read", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_nitems_read(test_tag_variable_rate_ff_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"test_tag_variable_rate_ff_sptr_nitems_written", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_nitems_written(test_tag_variable_rate_ff_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"test_tag_variable_rate_ff_sptr_max_noutput_items", _wrap_test_tag_variable_rate_ff_sptr_max_noutput_items, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_max_noutput_items(test_tag_variable_rate_ff_sptr self) -> int"},
	 { (char *)"test_tag_variable_rate_ff_sptr_set_max_noutput_items", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_set_max_noutput_items(test_tag_variable_rate_ff_sptr self, int m)"},
	 { (char *)"test_tag_variable_rate_ff_sptr_unset_max_noutput_items", _wrap_test_tag_variable_rate_ff_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_unset_max_noutput_items(test_tag_variable_rate_ff_sptr self)"},
	 { (char *)"test_tag_variable_rate_ff_sptr_is_set_max_noutput_items", _wrap_test_tag_variable_rate_ff_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_is_set_max_noutput_items(test_tag_variable_rate_ff_sptr self) -> bool"},
	 { (char *)"test_tag_variable_rate_ff_sptr_set_min_noutput_items", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_set_min_noutput_items(test_tag_variable_rate_ff_sptr self, int m)"},
	 { (char *)"test_tag_variable_rate_ff_sptr_min_noutput_items", _wrap_test_tag_variable_rate_ff_sptr_min_noutput_items, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_min_noutput_items(test_tag_variable_rate_ff_sptr self) -> int"},
	 { (char *)"test_tag_variable_rate_ff_sptr_max_output_buffer", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_max_output_buffer(test_tag_variable_rate_ff_sptr self, int i) -> long"},
	 { (char *)"test_tag_variable_rate_ff_sptr_set_max_output_buffer", _wrap_test_tag_variable_rate_ff_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"test_tag_variable_rate_ff_sptr_set_max_output_buffer(test_tag_variable_rate_ff_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"test_tag_variable_rate_ff_sptr_min_output_buffer", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_min_output_buffer(test_tag_variable_rate_ff_sptr self, int i) -> long"},
	 { (char *)"test_tag_variable_rate_ff_sptr_set_min_output_buffer", _wrap_test_tag_variable_rate_ff_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"test_tag_variable_rate_ff_sptr_set_min_output_buffer(test_tag_variable_rate_ff_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_noutput_items", _wrap_test_tag_variable_rate_ff_sptr_pc_noutput_items, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_pc_noutput_items(test_tag_variable_rate_ff_sptr self) -> float"},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_noutput_items_avg", _wrap_test_tag_variable_rate_ff_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_pc_noutput_items_avg(test_tag_variable_rate_ff_sptr self) -> float"},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_noutput_items_var", _wrap_test_tag_variable_rate_ff_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_pc_noutput_items_var(test_tag_variable_rate_ff_sptr self) -> float"},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_nproduced", _wrap_test_tag_variable_rate_ff_sptr_pc_nproduced, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_pc_nproduced(test_tag_variable_rate_ff_sptr self) -> float"},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_nproduced_avg", _wrap_test_tag_variable_rate_ff_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_pc_nproduced_avg(test_tag_variable_rate_ff_sptr self) -> float"},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_nproduced_var", _wrap_test_tag_variable_rate_ff_sptr_pc_nproduced_var, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_pc_nproduced_var(test_tag_variable_rate_ff_sptr self) -> float"},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_input_buffers_full", _wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"test_tag_variable_rate_ff_sptr_pc_input_buffers_full(test_tag_variable_rate_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg", _wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"test_tag_variable_rate_ff_sptr_pc_input_buffers_full_avg(test_tag_variable_rate_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var", _wrap_test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"test_tag_variable_rate_ff_sptr_pc_input_buffers_full_var(test_tag_variable_rate_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_output_buffers_full", _wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"test_tag_variable_rate_ff_sptr_pc_output_buffers_full(test_tag_variable_rate_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg", _wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"test_tag_variable_rate_ff_sptr_pc_output_buffers_full_avg(test_tag_variable_rate_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var", _wrap_test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"test_tag_variable_rate_ff_sptr_pc_output_buffers_full_var(test_tag_variable_rate_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_work_time", _wrap_test_tag_variable_rate_ff_sptr_pc_work_time, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_pc_work_time(test_tag_variable_rate_ff_sptr self) -> float"},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_work_time_avg", _wrap_test_tag_variable_rate_ff_sptr_pc_work_time_avg, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_pc_work_time_avg(test_tag_variable_rate_ff_sptr self) -> float"},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_work_time_var", _wrap_test_tag_variable_rate_ff_sptr_pc_work_time_var, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_pc_work_time_var(test_tag_variable_rate_ff_sptr self) -> float"},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_work_time_total", _wrap_test_tag_variable_rate_ff_sptr_pc_work_time_total, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_pc_work_time_total(test_tag_variable_rate_ff_sptr self) -> float"},
	 { (char *)"test_tag_variable_rate_ff_sptr_pc_throughput_avg", _wrap_test_tag_variable_rate_ff_sptr_pc_throughput_avg, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_pc_throughput_avg(test_tag_variable_rate_ff_sptr self) -> float"},
	 { (char *)"test_tag_variable_rate_ff_sptr_set_processor_affinity", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_set_processor_affinity(test_tag_variable_rate_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"test_tag_variable_rate_ff_sptr_unset_processor_affinity", _wrap_test_tag_variable_rate_ff_sptr_unset_processor_affinity, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_unset_processor_affinity(test_tag_variable_rate_ff_sptr self)"},
	 { (char *)"test_tag_variable_rate_ff_sptr_processor_affinity", _wrap_test_tag_variable_rate_ff_sptr_processor_affinity, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_processor_affinity(test_tag_variable_rate_ff_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"test_tag_variable_rate_ff_sptr_active_thread_priority", _wrap_test_tag_variable_rate_ff_sptr_active_thread_priority, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_active_thread_priority(test_tag_variable_rate_ff_sptr self) -> int"},
	 { (char *)"test_tag_variable_rate_ff_sptr_thread_priority", _wrap_test_tag_variable_rate_ff_sptr_thread_priority, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_thread_priority(test_tag_variable_rate_ff_sptr self) -> int"},
	 { (char *)"test_tag_variable_rate_ff_sptr_set_thread_priority", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_set_thread_priority(test_tag_variable_rate_ff_sptr self, int priority) -> int"},
	 { (char *)"test_tag_variable_rate_ff_sptr_name", _wrap_test_tag_variable_rate_ff_sptr_name, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_name(test_tag_variable_rate_ff_sptr self) -> std::string"},
	 { (char *)"test_tag_variable_rate_ff_sptr_symbol_name", _wrap_test_tag_variable_rate_ff_sptr_symbol_name, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_symbol_name(test_tag_variable_rate_ff_sptr self) -> std::string"},
	 { (char *)"test_tag_variable_rate_ff_sptr_input_signature", _wrap_test_tag_variable_rate_ff_sptr_input_signature, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_input_signature(test_tag_variable_rate_ff_sptr self) -> io_signature_sptr"},
	 { (char *)"test_tag_variable_rate_ff_sptr_output_signature", _wrap_test_tag_variable_rate_ff_sptr_output_signature, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_output_signature(test_tag_variable_rate_ff_sptr self) -> io_signature_sptr"},
	 { (char *)"test_tag_variable_rate_ff_sptr_unique_id", _wrap_test_tag_variable_rate_ff_sptr_unique_id, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_unique_id(test_tag_variable_rate_ff_sptr self) -> long"},
	 { (char *)"test_tag_variable_rate_ff_sptr_to_basic_block", _wrap_test_tag_variable_rate_ff_sptr_to_basic_block, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_to_basic_block(test_tag_variable_rate_ff_sptr self) -> basic_block_sptr"},
	 { (char *)"test_tag_variable_rate_ff_sptr_check_topology", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_check_topology(test_tag_variable_rate_ff_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"test_tag_variable_rate_ff_sptr_alias", _wrap_test_tag_variable_rate_ff_sptr_alias, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_alias(test_tag_variable_rate_ff_sptr self) -> std::string"},
	 { (char *)"test_tag_variable_rate_ff_sptr_set_block_alias", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_set_block_alias(test_tag_variable_rate_ff_sptr self, std::string name)"},
	 { (char *)"test_tag_variable_rate_ff_sptr__post", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr__post(test_tag_variable_rate_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"test_tag_variable_rate_ff_sptr_message_ports_in", _wrap_test_tag_variable_rate_ff_sptr_message_ports_in, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_message_ports_in(test_tag_variable_rate_ff_sptr self) -> swig_int_ptr"},
	 { (char *)"test_tag_variable_rate_ff_sptr_message_ports_out", _wrap_test_tag_variable_rate_ff_sptr_message_ports_out, METH_VARARGS, (char *)"test_tag_variable_rate_ff_sptr_message_ports_out(test_tag_variable_rate_ff_sptr self) -> swig_int_ptr"},
	 { (char *)"test_tag_variable_rate_ff_sptr_message_subscribers", (PyCFunction) _wrap_test_tag_variable_rate_ff_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"test_tag_variable_rate_ff_sptr_message_subscribers(test_tag_variable_rate_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"test_tag_variable_rate_ff_sptr_swigregister", test_tag_variable_rate_ff_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_threshold_ff_sptr", _wrap_new_threshold_ff_sptr, METH_VARARGS, (char *)"\n"
		"threshold_ff_sptr()\n"
		"new_threshold_ff_sptr(threshold_ff p) -> threshold_ff_sptr\n"
		""},
	 { (char *)"threshold_ff_sptr___deref__", _wrap_threshold_ff_sptr___deref__, METH_VARARGS, (char *)"threshold_ff_sptr___deref__(threshold_ff_sptr self) -> threshold_ff"},
	 { (char *)"delete_threshold_ff_sptr", _wrap_delete_threshold_ff_sptr, METH_VARARGS, (char *)"delete_threshold_ff_sptr(threshold_ff_sptr self)"},
	 { (char *)"threshold_ff_sptr_make", (PyCFunction) _wrap_threshold_ff_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"threshold_ff_sptr_make(threshold_ff_sptr self, float lo, float hi, float initial_state=0) -> threshold_ff_sptr\n"
		"\n"
		"Output a 1 or zero based on a threshold value.\n"
		"\n"
		"Test the incoming signal against a threshold. If the signal excedes the  value, it will output a 1 until the signal falls below the  value.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    lo : \n"
		"    hi : \n"
		"    initial_state : \n"
		""},
	 { (char *)"threshold_ff_sptr_lo", _wrap_threshold_ff_sptr_lo, METH_VARARGS, (char *)"threshold_ff_sptr_lo(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_set_lo", (PyCFunction) _wrap_threshold_ff_sptr_set_lo, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_set_lo(threshold_ff_sptr self, float lo)"},
	 { (char *)"threshold_ff_sptr_hi", _wrap_threshold_ff_sptr_hi, METH_VARARGS, (char *)"threshold_ff_sptr_hi(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_set_hi", (PyCFunction) _wrap_threshold_ff_sptr_set_hi, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_set_hi(threshold_ff_sptr self, float hi)"},
	 { (char *)"threshold_ff_sptr_last_state", _wrap_threshold_ff_sptr_last_state, METH_VARARGS, (char *)"threshold_ff_sptr_last_state(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_set_last_state", (PyCFunction) _wrap_threshold_ff_sptr_set_last_state, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_set_last_state(threshold_ff_sptr self, float last_state)"},
	 { (char *)"threshold_ff_sptr_history", _wrap_threshold_ff_sptr_history, METH_VARARGS, (char *)"threshold_ff_sptr_history(threshold_ff_sptr self) -> unsigned int"},
	 { (char *)"threshold_ff_sptr_declare_sample_delay", _wrap_threshold_ff_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"threshold_ff_sptr_declare_sample_delay(threshold_ff_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"threshold_ff_sptr_sample_delay", (PyCFunction) _wrap_threshold_ff_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_sample_delay(threshold_ff_sptr self, int which) -> unsigned int"},
	 { (char *)"threshold_ff_sptr_output_multiple", _wrap_threshold_ff_sptr_output_multiple, METH_VARARGS, (char *)"threshold_ff_sptr_output_multiple(threshold_ff_sptr self) -> int"},
	 { (char *)"threshold_ff_sptr_relative_rate", _wrap_threshold_ff_sptr_relative_rate, METH_VARARGS, (char *)"threshold_ff_sptr_relative_rate(threshold_ff_sptr self) -> double"},
	 { (char *)"threshold_ff_sptr_start", _wrap_threshold_ff_sptr_start, METH_VARARGS, (char *)"threshold_ff_sptr_start(threshold_ff_sptr self) -> bool"},
	 { (char *)"threshold_ff_sptr_stop", _wrap_threshold_ff_sptr_stop, METH_VARARGS, (char *)"threshold_ff_sptr_stop(threshold_ff_sptr self) -> bool"},
	 { (char *)"threshold_ff_sptr_nitems_read", (PyCFunction) _wrap_threshold_ff_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_nitems_read(threshold_ff_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"threshold_ff_sptr_nitems_written", (PyCFunction) _wrap_threshold_ff_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_nitems_written(threshold_ff_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"threshold_ff_sptr_max_noutput_items", _wrap_threshold_ff_sptr_max_noutput_items, METH_VARARGS, (char *)"threshold_ff_sptr_max_noutput_items(threshold_ff_sptr self) -> int"},
	 { (char *)"threshold_ff_sptr_set_max_noutput_items", (PyCFunction) _wrap_threshold_ff_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_set_max_noutput_items(threshold_ff_sptr self, int m)"},
	 { (char *)"threshold_ff_sptr_unset_max_noutput_items", _wrap_threshold_ff_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"threshold_ff_sptr_unset_max_noutput_items(threshold_ff_sptr self)"},
	 { (char *)"threshold_ff_sptr_is_set_max_noutput_items", _wrap_threshold_ff_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"threshold_ff_sptr_is_set_max_noutput_items(threshold_ff_sptr self) -> bool"},
	 { (char *)"threshold_ff_sptr_set_min_noutput_items", (PyCFunction) _wrap_threshold_ff_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_set_min_noutput_items(threshold_ff_sptr self, int m)"},
	 { (char *)"threshold_ff_sptr_min_noutput_items", _wrap_threshold_ff_sptr_min_noutput_items, METH_VARARGS, (char *)"threshold_ff_sptr_min_noutput_items(threshold_ff_sptr self) -> int"},
	 { (char *)"threshold_ff_sptr_max_output_buffer", (PyCFunction) _wrap_threshold_ff_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_max_output_buffer(threshold_ff_sptr self, int i) -> long"},
	 { (char *)"threshold_ff_sptr_set_max_output_buffer", _wrap_threshold_ff_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"threshold_ff_sptr_set_max_output_buffer(threshold_ff_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"threshold_ff_sptr_min_output_buffer", (PyCFunction) _wrap_threshold_ff_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_min_output_buffer(threshold_ff_sptr self, int i) -> long"},
	 { (char *)"threshold_ff_sptr_set_min_output_buffer", _wrap_threshold_ff_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"threshold_ff_sptr_set_min_output_buffer(threshold_ff_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"threshold_ff_sptr_pc_noutput_items", _wrap_threshold_ff_sptr_pc_noutput_items, METH_VARARGS, (char *)"threshold_ff_sptr_pc_noutput_items(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_pc_noutput_items_avg", _wrap_threshold_ff_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"threshold_ff_sptr_pc_noutput_items_avg(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_pc_noutput_items_var", _wrap_threshold_ff_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"threshold_ff_sptr_pc_noutput_items_var(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_pc_nproduced", _wrap_threshold_ff_sptr_pc_nproduced, METH_VARARGS, (char *)"threshold_ff_sptr_pc_nproduced(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_pc_nproduced_avg", _wrap_threshold_ff_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"threshold_ff_sptr_pc_nproduced_avg(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_pc_nproduced_var", _wrap_threshold_ff_sptr_pc_nproduced_var, METH_VARARGS, (char *)"threshold_ff_sptr_pc_nproduced_var(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_pc_input_buffers_full", _wrap_threshold_ff_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"threshold_ff_sptr_pc_input_buffers_full(threshold_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"threshold_ff_sptr_pc_input_buffers_full_avg", _wrap_threshold_ff_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"threshold_ff_sptr_pc_input_buffers_full_avg(threshold_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"threshold_ff_sptr_pc_input_buffers_full_var", _wrap_threshold_ff_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"threshold_ff_sptr_pc_input_buffers_full_var(threshold_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"threshold_ff_sptr_pc_output_buffers_full", _wrap_threshold_ff_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"threshold_ff_sptr_pc_output_buffers_full(threshold_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"threshold_ff_sptr_pc_output_buffers_full_avg", _wrap_threshold_ff_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"threshold_ff_sptr_pc_output_buffers_full_avg(threshold_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"threshold_ff_sptr_pc_output_buffers_full_var", _wrap_threshold_ff_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"threshold_ff_sptr_pc_output_buffers_full_var(threshold_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"threshold_ff_sptr_pc_work_time", _wrap_threshold_ff_sptr_pc_work_time, METH_VARARGS, (char *)"threshold_ff_sptr_pc_work_time(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_pc_work_time_avg", _wrap_threshold_ff_sptr_pc_work_time_avg, METH_VARARGS, (char *)"threshold_ff_sptr_pc_work_time_avg(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_pc_work_time_var", _wrap_threshold_ff_sptr_pc_work_time_var, METH_VARARGS, (char *)"threshold_ff_sptr_pc_work_time_var(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_pc_work_time_total", _wrap_threshold_ff_sptr_pc_work_time_total, METH_VARARGS, (char *)"threshold_ff_sptr_pc_work_time_total(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_pc_throughput_avg", _wrap_threshold_ff_sptr_pc_throughput_avg, METH_VARARGS, (char *)"threshold_ff_sptr_pc_throughput_avg(threshold_ff_sptr self) -> float"},
	 { (char *)"threshold_ff_sptr_set_processor_affinity", (PyCFunction) _wrap_threshold_ff_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_set_processor_affinity(threshold_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"threshold_ff_sptr_unset_processor_affinity", _wrap_threshold_ff_sptr_unset_processor_affinity, METH_VARARGS, (char *)"threshold_ff_sptr_unset_processor_affinity(threshold_ff_sptr self)"},
	 { (char *)"threshold_ff_sptr_processor_affinity", _wrap_threshold_ff_sptr_processor_affinity, METH_VARARGS, (char *)"threshold_ff_sptr_processor_affinity(threshold_ff_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"threshold_ff_sptr_active_thread_priority", _wrap_threshold_ff_sptr_active_thread_priority, METH_VARARGS, (char *)"threshold_ff_sptr_active_thread_priority(threshold_ff_sptr self) -> int"},
	 { (char *)"threshold_ff_sptr_thread_priority", _wrap_threshold_ff_sptr_thread_priority, METH_VARARGS, (char *)"threshold_ff_sptr_thread_priority(threshold_ff_sptr self) -> int"},
	 { (char *)"threshold_ff_sptr_set_thread_priority", (PyCFunction) _wrap_threshold_ff_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_set_thread_priority(threshold_ff_sptr self, int priority) -> int"},
	 { (char *)"threshold_ff_sptr_name", _wrap_threshold_ff_sptr_name, METH_VARARGS, (char *)"threshold_ff_sptr_name(threshold_ff_sptr self) -> std::string"},
	 { (char *)"threshold_ff_sptr_symbol_name", _wrap_threshold_ff_sptr_symbol_name, METH_VARARGS, (char *)"threshold_ff_sptr_symbol_name(threshold_ff_sptr self) -> std::string"},
	 { (char *)"threshold_ff_sptr_input_signature", _wrap_threshold_ff_sptr_input_signature, METH_VARARGS, (char *)"threshold_ff_sptr_input_signature(threshold_ff_sptr self) -> io_signature_sptr"},
	 { (char *)"threshold_ff_sptr_output_signature", _wrap_threshold_ff_sptr_output_signature, METH_VARARGS, (char *)"threshold_ff_sptr_output_signature(threshold_ff_sptr self) -> io_signature_sptr"},
	 { (char *)"threshold_ff_sptr_unique_id", _wrap_threshold_ff_sptr_unique_id, METH_VARARGS, (char *)"threshold_ff_sptr_unique_id(threshold_ff_sptr self) -> long"},
	 { (char *)"threshold_ff_sptr_to_basic_block", _wrap_threshold_ff_sptr_to_basic_block, METH_VARARGS, (char *)"threshold_ff_sptr_to_basic_block(threshold_ff_sptr self) -> basic_block_sptr"},
	 { (char *)"threshold_ff_sptr_check_topology", (PyCFunction) _wrap_threshold_ff_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_check_topology(threshold_ff_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"threshold_ff_sptr_alias", _wrap_threshold_ff_sptr_alias, METH_VARARGS, (char *)"threshold_ff_sptr_alias(threshold_ff_sptr self) -> std::string"},
	 { (char *)"threshold_ff_sptr_set_block_alias", (PyCFunction) _wrap_threshold_ff_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_set_block_alias(threshold_ff_sptr self, std::string name)"},
	 { (char *)"threshold_ff_sptr__post", (PyCFunction) _wrap_threshold_ff_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr__post(threshold_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"threshold_ff_sptr_message_ports_in", _wrap_threshold_ff_sptr_message_ports_in, METH_VARARGS, (char *)"threshold_ff_sptr_message_ports_in(threshold_ff_sptr self) -> swig_int_ptr"},
	 { (char *)"threshold_ff_sptr_message_ports_out", _wrap_threshold_ff_sptr_message_ports_out, METH_VARARGS, (char *)"threshold_ff_sptr_message_ports_out(threshold_ff_sptr self) -> swig_int_ptr"},
	 { (char *)"threshold_ff_sptr_message_subscribers", (PyCFunction) _wrap_threshold_ff_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"threshold_ff_sptr_message_subscribers(threshold_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"threshold_ff_sptr_swigregister", threshold_ff_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_transcendental_sptr", _wrap_new_transcendental_sptr, METH_VARARGS, (char *)"\n"
		"transcendental_sptr()\n"
		"new_transcendental_sptr(transcendental p) -> transcendental_sptr\n"
		""},
	 { (char *)"transcendental_sptr___deref__", _wrap_transcendental_sptr___deref__, METH_VARARGS, (char *)"transcendental_sptr___deref__(transcendental_sptr self) -> transcendental"},
	 { (char *)"delete_transcendental_sptr", _wrap_delete_transcendental_sptr, METH_VARARGS, (char *)"delete_transcendental_sptr(transcendental_sptr self)"},
	 { (char *)"transcendental_sptr_make", (PyCFunction) _wrap_transcendental_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"transcendental_sptr_make(transcendental_sptr self, std::string const & name, std::string const & type=\"float\") -> transcendental_sptr\n"
		"\n"
		"A block that performs various transcendental math operations.\n"
		"\n"
		"Possible function names can be found in the cmath library. IO may be either complex or real, double or single precision.\n"
		"\n"
		"Possible type strings: float, double, complex_float, complex_double\n"
		"\n"
		"output[i] = trans_fcn(input[i])\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    name : \n"
		"    type : \n"
		""},
	 { (char *)"transcendental_sptr_history", _wrap_transcendental_sptr_history, METH_VARARGS, (char *)"transcendental_sptr_history(transcendental_sptr self) -> unsigned int"},
	 { (char *)"transcendental_sptr_declare_sample_delay", _wrap_transcendental_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"transcendental_sptr_declare_sample_delay(transcendental_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"transcendental_sptr_sample_delay", (PyCFunction) _wrap_transcendental_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_sample_delay(transcendental_sptr self, int which) -> unsigned int"},
	 { (char *)"transcendental_sptr_output_multiple", _wrap_transcendental_sptr_output_multiple, METH_VARARGS, (char *)"transcendental_sptr_output_multiple(transcendental_sptr self) -> int"},
	 { (char *)"transcendental_sptr_relative_rate", _wrap_transcendental_sptr_relative_rate, METH_VARARGS, (char *)"transcendental_sptr_relative_rate(transcendental_sptr self) -> double"},
	 { (char *)"transcendental_sptr_start", _wrap_transcendental_sptr_start, METH_VARARGS, (char *)"transcendental_sptr_start(transcendental_sptr self) -> bool"},
	 { (char *)"transcendental_sptr_stop", _wrap_transcendental_sptr_stop, METH_VARARGS, (char *)"transcendental_sptr_stop(transcendental_sptr self) -> bool"},
	 { (char *)"transcendental_sptr_nitems_read", (PyCFunction) _wrap_transcendental_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_nitems_read(transcendental_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"transcendental_sptr_nitems_written", (PyCFunction) _wrap_transcendental_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_nitems_written(transcendental_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"transcendental_sptr_max_noutput_items", _wrap_transcendental_sptr_max_noutput_items, METH_VARARGS, (char *)"transcendental_sptr_max_noutput_items(transcendental_sptr self) -> int"},
	 { (char *)"transcendental_sptr_set_max_noutput_items", (PyCFunction) _wrap_transcendental_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_set_max_noutput_items(transcendental_sptr self, int m)"},
	 { (char *)"transcendental_sptr_unset_max_noutput_items", _wrap_transcendental_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"transcendental_sptr_unset_max_noutput_items(transcendental_sptr self)"},
	 { (char *)"transcendental_sptr_is_set_max_noutput_items", _wrap_transcendental_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"transcendental_sptr_is_set_max_noutput_items(transcendental_sptr self) -> bool"},
	 { (char *)"transcendental_sptr_set_min_noutput_items", (PyCFunction) _wrap_transcendental_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_set_min_noutput_items(transcendental_sptr self, int m)"},
	 { (char *)"transcendental_sptr_min_noutput_items", _wrap_transcendental_sptr_min_noutput_items, METH_VARARGS, (char *)"transcendental_sptr_min_noutput_items(transcendental_sptr self) -> int"},
	 { (char *)"transcendental_sptr_max_output_buffer", (PyCFunction) _wrap_transcendental_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_max_output_buffer(transcendental_sptr self, int i) -> long"},
	 { (char *)"transcendental_sptr_set_max_output_buffer", _wrap_transcendental_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"transcendental_sptr_set_max_output_buffer(transcendental_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"transcendental_sptr_min_output_buffer", (PyCFunction) _wrap_transcendental_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_min_output_buffer(transcendental_sptr self, int i) -> long"},
	 { (char *)"transcendental_sptr_set_min_output_buffer", _wrap_transcendental_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"transcendental_sptr_set_min_output_buffer(transcendental_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"transcendental_sptr_pc_noutput_items", _wrap_transcendental_sptr_pc_noutput_items, METH_VARARGS, (char *)"transcendental_sptr_pc_noutput_items(transcendental_sptr self) -> float"},
	 { (char *)"transcendental_sptr_pc_noutput_items_avg", _wrap_transcendental_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"transcendental_sptr_pc_noutput_items_avg(transcendental_sptr self) -> float"},
	 { (char *)"transcendental_sptr_pc_noutput_items_var", _wrap_transcendental_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"transcendental_sptr_pc_noutput_items_var(transcendental_sptr self) -> float"},
	 { (char *)"transcendental_sptr_pc_nproduced", _wrap_transcendental_sptr_pc_nproduced, METH_VARARGS, (char *)"transcendental_sptr_pc_nproduced(transcendental_sptr self) -> float"},
	 { (char *)"transcendental_sptr_pc_nproduced_avg", _wrap_transcendental_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"transcendental_sptr_pc_nproduced_avg(transcendental_sptr self) -> float"},
	 { (char *)"transcendental_sptr_pc_nproduced_var", _wrap_transcendental_sptr_pc_nproduced_var, METH_VARARGS, (char *)"transcendental_sptr_pc_nproduced_var(transcendental_sptr self) -> float"},
	 { (char *)"transcendental_sptr_pc_input_buffers_full", _wrap_transcendental_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"transcendental_sptr_pc_input_buffers_full(transcendental_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"transcendental_sptr_pc_input_buffers_full_avg", _wrap_transcendental_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"transcendental_sptr_pc_input_buffers_full_avg(transcendental_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"transcendental_sptr_pc_input_buffers_full_var", _wrap_transcendental_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"transcendental_sptr_pc_input_buffers_full_var(transcendental_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"transcendental_sptr_pc_output_buffers_full", _wrap_transcendental_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"transcendental_sptr_pc_output_buffers_full(transcendental_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"transcendental_sptr_pc_output_buffers_full_avg", _wrap_transcendental_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"transcendental_sptr_pc_output_buffers_full_avg(transcendental_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"transcendental_sptr_pc_output_buffers_full_var", _wrap_transcendental_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"transcendental_sptr_pc_output_buffers_full_var(transcendental_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"transcendental_sptr_pc_work_time", _wrap_transcendental_sptr_pc_work_time, METH_VARARGS, (char *)"transcendental_sptr_pc_work_time(transcendental_sptr self) -> float"},
	 { (char *)"transcendental_sptr_pc_work_time_avg", _wrap_transcendental_sptr_pc_work_time_avg, METH_VARARGS, (char *)"transcendental_sptr_pc_work_time_avg(transcendental_sptr self) -> float"},
	 { (char *)"transcendental_sptr_pc_work_time_var", _wrap_transcendental_sptr_pc_work_time_var, METH_VARARGS, (char *)"transcendental_sptr_pc_work_time_var(transcendental_sptr self) -> float"},
	 { (char *)"transcendental_sptr_pc_work_time_total", _wrap_transcendental_sptr_pc_work_time_total, METH_VARARGS, (char *)"transcendental_sptr_pc_work_time_total(transcendental_sptr self) -> float"},
	 { (char *)"transcendental_sptr_pc_throughput_avg", _wrap_transcendental_sptr_pc_throughput_avg, METH_VARARGS, (char *)"transcendental_sptr_pc_throughput_avg(transcendental_sptr self) -> float"},
	 { (char *)"transcendental_sptr_set_processor_affinity", (PyCFunction) _wrap_transcendental_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_set_processor_affinity(transcendental_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"transcendental_sptr_unset_processor_affinity", _wrap_transcendental_sptr_unset_processor_affinity, METH_VARARGS, (char *)"transcendental_sptr_unset_processor_affinity(transcendental_sptr self)"},
	 { (char *)"transcendental_sptr_processor_affinity", _wrap_transcendental_sptr_processor_affinity, METH_VARARGS, (char *)"transcendental_sptr_processor_affinity(transcendental_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"transcendental_sptr_active_thread_priority", _wrap_transcendental_sptr_active_thread_priority, METH_VARARGS, (char *)"transcendental_sptr_active_thread_priority(transcendental_sptr self) -> int"},
	 { (char *)"transcendental_sptr_thread_priority", _wrap_transcendental_sptr_thread_priority, METH_VARARGS, (char *)"transcendental_sptr_thread_priority(transcendental_sptr self) -> int"},
	 { (char *)"transcendental_sptr_set_thread_priority", (PyCFunction) _wrap_transcendental_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_set_thread_priority(transcendental_sptr self, int priority) -> int"},
	 { (char *)"transcendental_sptr_name", _wrap_transcendental_sptr_name, METH_VARARGS, (char *)"transcendental_sptr_name(transcendental_sptr self) -> std::string"},
	 { (char *)"transcendental_sptr_symbol_name", _wrap_transcendental_sptr_symbol_name, METH_VARARGS, (char *)"transcendental_sptr_symbol_name(transcendental_sptr self) -> std::string"},
	 { (char *)"transcendental_sptr_input_signature", _wrap_transcendental_sptr_input_signature, METH_VARARGS, (char *)"transcendental_sptr_input_signature(transcendental_sptr self) -> io_signature_sptr"},
	 { (char *)"transcendental_sptr_output_signature", _wrap_transcendental_sptr_output_signature, METH_VARARGS, (char *)"transcendental_sptr_output_signature(transcendental_sptr self) -> io_signature_sptr"},
	 { (char *)"transcendental_sptr_unique_id", _wrap_transcendental_sptr_unique_id, METH_VARARGS, (char *)"transcendental_sptr_unique_id(transcendental_sptr self) -> long"},
	 { (char *)"transcendental_sptr_to_basic_block", _wrap_transcendental_sptr_to_basic_block, METH_VARARGS, (char *)"transcendental_sptr_to_basic_block(transcendental_sptr self) -> basic_block_sptr"},
	 { (char *)"transcendental_sptr_check_topology", (PyCFunction) _wrap_transcendental_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_check_topology(transcendental_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"transcendental_sptr_alias", _wrap_transcendental_sptr_alias, METH_VARARGS, (char *)"transcendental_sptr_alias(transcendental_sptr self) -> std::string"},
	 { (char *)"transcendental_sptr_set_block_alias", (PyCFunction) _wrap_transcendental_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_set_block_alias(transcendental_sptr self, std::string name)"},
	 { (char *)"transcendental_sptr__post", (PyCFunction) _wrap_transcendental_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr__post(transcendental_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"transcendental_sptr_message_ports_in", _wrap_transcendental_sptr_message_ports_in, METH_VARARGS, (char *)"transcendental_sptr_message_ports_in(transcendental_sptr self) -> swig_int_ptr"},
	 { (char *)"transcendental_sptr_message_ports_out", _wrap_transcendental_sptr_message_ports_out, METH_VARARGS, (char *)"transcendental_sptr_message_ports_out(transcendental_sptr self) -> swig_int_ptr"},
	 { (char *)"transcendental_sptr_message_subscribers", (PyCFunction) _wrap_transcendental_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"transcendental_sptr_message_subscribers(transcendental_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"transcendental_sptr_swigregister", transcendental_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tuntap_pdu_sptr", _wrap_new_tuntap_pdu_sptr, METH_VARARGS, (char *)"\n"
		"tuntap_pdu_sptr()\n"
		"new_tuntap_pdu_sptr(tuntap_pdu p) -> tuntap_pdu_sptr\n"
		""},
	 { (char *)"tuntap_pdu_sptr___deref__", _wrap_tuntap_pdu_sptr___deref__, METH_VARARGS, (char *)"tuntap_pdu_sptr___deref__(tuntap_pdu_sptr self) -> tuntap_pdu"},
	 { (char *)"delete_tuntap_pdu_sptr", _wrap_delete_tuntap_pdu_sptr, METH_VARARGS, (char *)"delete_tuntap_pdu_sptr(tuntap_pdu_sptr self)"},
	 { (char *)"tuntap_pdu_sptr_make", (PyCFunction) _wrap_tuntap_pdu_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tuntap_pdu_sptr_make(tuntap_pdu_sptr self, std::string dev, int MTU=10000, bool istunflag=False) -> tuntap_pdu_sptr\n"
		"\n"
		"Creates TUNTAP interface and translates traffic to PDUs.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Construct a TUNTAP PDU interface.\n"
		"\n"
		"Args:\n"
		"    dev : Device name to create\n"
		"    MTU : Maximum Transmission Unit size\n"
		"    istunflag : Flag to indicate TUN or Tap\n"
		""},
	 { (char *)"tuntap_pdu_sptr_history", _wrap_tuntap_pdu_sptr_history, METH_VARARGS, (char *)"tuntap_pdu_sptr_history(tuntap_pdu_sptr self) -> unsigned int"},
	 { (char *)"tuntap_pdu_sptr_declare_sample_delay", _wrap_tuntap_pdu_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"tuntap_pdu_sptr_declare_sample_delay(tuntap_pdu_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"tuntap_pdu_sptr_sample_delay", (PyCFunction) _wrap_tuntap_pdu_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_sample_delay(tuntap_pdu_sptr self, int which) -> unsigned int"},
	 { (char *)"tuntap_pdu_sptr_output_multiple", _wrap_tuntap_pdu_sptr_output_multiple, METH_VARARGS, (char *)"tuntap_pdu_sptr_output_multiple(tuntap_pdu_sptr self) -> int"},
	 { (char *)"tuntap_pdu_sptr_relative_rate", _wrap_tuntap_pdu_sptr_relative_rate, METH_VARARGS, (char *)"tuntap_pdu_sptr_relative_rate(tuntap_pdu_sptr self) -> double"},
	 { (char *)"tuntap_pdu_sptr_start", _wrap_tuntap_pdu_sptr_start, METH_VARARGS, (char *)"tuntap_pdu_sptr_start(tuntap_pdu_sptr self) -> bool"},
	 { (char *)"tuntap_pdu_sptr_stop", _wrap_tuntap_pdu_sptr_stop, METH_VARARGS, (char *)"tuntap_pdu_sptr_stop(tuntap_pdu_sptr self) -> bool"},
	 { (char *)"tuntap_pdu_sptr_nitems_read", (PyCFunction) _wrap_tuntap_pdu_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_nitems_read(tuntap_pdu_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"tuntap_pdu_sptr_nitems_written", (PyCFunction) _wrap_tuntap_pdu_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_nitems_written(tuntap_pdu_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"tuntap_pdu_sptr_max_noutput_items", _wrap_tuntap_pdu_sptr_max_noutput_items, METH_VARARGS, (char *)"tuntap_pdu_sptr_max_noutput_items(tuntap_pdu_sptr self) -> int"},
	 { (char *)"tuntap_pdu_sptr_set_max_noutput_items", (PyCFunction) _wrap_tuntap_pdu_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_set_max_noutput_items(tuntap_pdu_sptr self, int m)"},
	 { (char *)"tuntap_pdu_sptr_unset_max_noutput_items", _wrap_tuntap_pdu_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"tuntap_pdu_sptr_unset_max_noutput_items(tuntap_pdu_sptr self)"},
	 { (char *)"tuntap_pdu_sptr_is_set_max_noutput_items", _wrap_tuntap_pdu_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"tuntap_pdu_sptr_is_set_max_noutput_items(tuntap_pdu_sptr self) -> bool"},
	 { (char *)"tuntap_pdu_sptr_set_min_noutput_items", (PyCFunction) _wrap_tuntap_pdu_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_set_min_noutput_items(tuntap_pdu_sptr self, int m)"},
	 { (char *)"tuntap_pdu_sptr_min_noutput_items", _wrap_tuntap_pdu_sptr_min_noutput_items, METH_VARARGS, (char *)"tuntap_pdu_sptr_min_noutput_items(tuntap_pdu_sptr self) -> int"},
	 { (char *)"tuntap_pdu_sptr_max_output_buffer", (PyCFunction) _wrap_tuntap_pdu_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_max_output_buffer(tuntap_pdu_sptr self, int i) -> long"},
	 { (char *)"tuntap_pdu_sptr_set_max_output_buffer", _wrap_tuntap_pdu_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"tuntap_pdu_sptr_set_max_output_buffer(tuntap_pdu_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"tuntap_pdu_sptr_min_output_buffer", (PyCFunction) _wrap_tuntap_pdu_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_min_output_buffer(tuntap_pdu_sptr self, int i) -> long"},
	 { (char *)"tuntap_pdu_sptr_set_min_output_buffer", _wrap_tuntap_pdu_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"tuntap_pdu_sptr_set_min_output_buffer(tuntap_pdu_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"tuntap_pdu_sptr_pc_noutput_items", _wrap_tuntap_pdu_sptr_pc_noutput_items, METH_VARARGS, (char *)"tuntap_pdu_sptr_pc_noutput_items(tuntap_pdu_sptr self) -> float"},
	 { (char *)"tuntap_pdu_sptr_pc_noutput_items_avg", _wrap_tuntap_pdu_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"tuntap_pdu_sptr_pc_noutput_items_avg(tuntap_pdu_sptr self) -> float"},
	 { (char *)"tuntap_pdu_sptr_pc_noutput_items_var", _wrap_tuntap_pdu_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"tuntap_pdu_sptr_pc_noutput_items_var(tuntap_pdu_sptr self) -> float"},
	 { (char *)"tuntap_pdu_sptr_pc_nproduced", _wrap_tuntap_pdu_sptr_pc_nproduced, METH_VARARGS, (char *)"tuntap_pdu_sptr_pc_nproduced(tuntap_pdu_sptr self) -> float"},
	 { (char *)"tuntap_pdu_sptr_pc_nproduced_avg", _wrap_tuntap_pdu_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"tuntap_pdu_sptr_pc_nproduced_avg(tuntap_pdu_sptr self) -> float"},
	 { (char *)"tuntap_pdu_sptr_pc_nproduced_var", _wrap_tuntap_pdu_sptr_pc_nproduced_var, METH_VARARGS, (char *)"tuntap_pdu_sptr_pc_nproduced_var(tuntap_pdu_sptr self) -> float"},
	 { (char *)"tuntap_pdu_sptr_pc_input_buffers_full", _wrap_tuntap_pdu_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"tuntap_pdu_sptr_pc_input_buffers_full(tuntap_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tuntap_pdu_sptr_pc_input_buffers_full_avg", _wrap_tuntap_pdu_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"tuntap_pdu_sptr_pc_input_buffers_full_avg(tuntap_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tuntap_pdu_sptr_pc_input_buffers_full_var", _wrap_tuntap_pdu_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"tuntap_pdu_sptr_pc_input_buffers_full_var(tuntap_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tuntap_pdu_sptr_pc_output_buffers_full", _wrap_tuntap_pdu_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"tuntap_pdu_sptr_pc_output_buffers_full(tuntap_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tuntap_pdu_sptr_pc_output_buffers_full_avg", _wrap_tuntap_pdu_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"tuntap_pdu_sptr_pc_output_buffers_full_avg(tuntap_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tuntap_pdu_sptr_pc_output_buffers_full_var", _wrap_tuntap_pdu_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"tuntap_pdu_sptr_pc_output_buffers_full_var(tuntap_pdu_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tuntap_pdu_sptr_pc_work_time", _wrap_tuntap_pdu_sptr_pc_work_time, METH_VARARGS, (char *)"tuntap_pdu_sptr_pc_work_time(tuntap_pdu_sptr self) -> float"},
	 { (char *)"tuntap_pdu_sptr_pc_work_time_avg", _wrap_tuntap_pdu_sptr_pc_work_time_avg, METH_VARARGS, (char *)"tuntap_pdu_sptr_pc_work_time_avg(tuntap_pdu_sptr self) -> float"},
	 { (char *)"tuntap_pdu_sptr_pc_work_time_var", _wrap_tuntap_pdu_sptr_pc_work_time_var, METH_VARARGS, (char *)"tuntap_pdu_sptr_pc_work_time_var(tuntap_pdu_sptr self) -> float"},
	 { (char *)"tuntap_pdu_sptr_pc_work_time_total", _wrap_tuntap_pdu_sptr_pc_work_time_total, METH_VARARGS, (char *)"tuntap_pdu_sptr_pc_work_time_total(tuntap_pdu_sptr self) -> float"},
	 { (char *)"tuntap_pdu_sptr_pc_throughput_avg", _wrap_tuntap_pdu_sptr_pc_throughput_avg, METH_VARARGS, (char *)"tuntap_pdu_sptr_pc_throughput_avg(tuntap_pdu_sptr self) -> float"},
	 { (char *)"tuntap_pdu_sptr_set_processor_affinity", (PyCFunction) _wrap_tuntap_pdu_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_set_processor_affinity(tuntap_pdu_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"tuntap_pdu_sptr_unset_processor_affinity", _wrap_tuntap_pdu_sptr_unset_processor_affinity, METH_VARARGS, (char *)"tuntap_pdu_sptr_unset_processor_affinity(tuntap_pdu_sptr self)"},
	 { (char *)"tuntap_pdu_sptr_processor_affinity", _wrap_tuntap_pdu_sptr_processor_affinity, METH_VARARGS, (char *)"tuntap_pdu_sptr_processor_affinity(tuntap_pdu_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"tuntap_pdu_sptr_active_thread_priority", _wrap_tuntap_pdu_sptr_active_thread_priority, METH_VARARGS, (char *)"tuntap_pdu_sptr_active_thread_priority(tuntap_pdu_sptr self) -> int"},
	 { (char *)"tuntap_pdu_sptr_thread_priority", _wrap_tuntap_pdu_sptr_thread_priority, METH_VARARGS, (char *)"tuntap_pdu_sptr_thread_priority(tuntap_pdu_sptr self) -> int"},
	 { (char *)"tuntap_pdu_sptr_set_thread_priority", (PyCFunction) _wrap_tuntap_pdu_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_set_thread_priority(tuntap_pdu_sptr self, int priority) -> int"},
	 { (char *)"tuntap_pdu_sptr_name", _wrap_tuntap_pdu_sptr_name, METH_VARARGS, (char *)"tuntap_pdu_sptr_name(tuntap_pdu_sptr self) -> std::string"},
	 { (char *)"tuntap_pdu_sptr_symbol_name", _wrap_tuntap_pdu_sptr_symbol_name, METH_VARARGS, (char *)"tuntap_pdu_sptr_symbol_name(tuntap_pdu_sptr self) -> std::string"},
	 { (char *)"tuntap_pdu_sptr_input_signature", _wrap_tuntap_pdu_sptr_input_signature, METH_VARARGS, (char *)"tuntap_pdu_sptr_input_signature(tuntap_pdu_sptr self) -> io_signature_sptr"},
	 { (char *)"tuntap_pdu_sptr_output_signature", _wrap_tuntap_pdu_sptr_output_signature, METH_VARARGS, (char *)"tuntap_pdu_sptr_output_signature(tuntap_pdu_sptr self) -> io_signature_sptr"},
	 { (char *)"tuntap_pdu_sptr_unique_id", _wrap_tuntap_pdu_sptr_unique_id, METH_VARARGS, (char *)"tuntap_pdu_sptr_unique_id(tuntap_pdu_sptr self) -> long"},
	 { (char *)"tuntap_pdu_sptr_to_basic_block", _wrap_tuntap_pdu_sptr_to_basic_block, METH_VARARGS, (char *)"tuntap_pdu_sptr_to_basic_block(tuntap_pdu_sptr self) -> basic_block_sptr"},
	 { (char *)"tuntap_pdu_sptr_check_topology", (PyCFunction) _wrap_tuntap_pdu_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_check_topology(tuntap_pdu_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"tuntap_pdu_sptr_alias", _wrap_tuntap_pdu_sptr_alias, METH_VARARGS, (char *)"tuntap_pdu_sptr_alias(tuntap_pdu_sptr self) -> std::string"},
	 { (char *)"tuntap_pdu_sptr_set_block_alias", (PyCFunction) _wrap_tuntap_pdu_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_set_block_alias(tuntap_pdu_sptr self, std::string name)"},
	 { (char *)"tuntap_pdu_sptr__post", (PyCFunction) _wrap_tuntap_pdu_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr__post(tuntap_pdu_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"tuntap_pdu_sptr_message_ports_in", _wrap_tuntap_pdu_sptr_message_ports_in, METH_VARARGS, (char *)"tuntap_pdu_sptr_message_ports_in(tuntap_pdu_sptr self) -> swig_int_ptr"},
	 { (char *)"tuntap_pdu_sptr_message_ports_out", _wrap_tuntap_pdu_sptr_message_ports_out, METH_VARARGS, (char *)"tuntap_pdu_sptr_message_ports_out(tuntap_pdu_sptr self) -> swig_int_ptr"},
	 { (char *)"tuntap_pdu_sptr_message_subscribers", (PyCFunction) _wrap_tuntap_pdu_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"tuntap_pdu_sptr_message_subscribers(tuntap_pdu_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"tuntap_pdu_sptr_swigregister", tuntap_pdu_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_uchar_to_float_sptr", _wrap_new_uchar_to_float_sptr, METH_VARARGS, (char *)"\n"
		"uchar_to_float_sptr()\n"
		"new_uchar_to_float_sptr(uchar_to_float p) -> uchar_to_float_sptr\n"
		""},
	 { (char *)"uchar_to_float_sptr___deref__", _wrap_uchar_to_float_sptr___deref__, METH_VARARGS, (char *)"uchar_to_float_sptr___deref__(uchar_to_float_sptr self) -> uchar_to_float"},
	 { (char *)"delete_uchar_to_float_sptr", _wrap_delete_uchar_to_float_sptr, METH_VARARGS, (char *)"delete_uchar_to_float_sptr(uchar_to_float_sptr self)"},
	 { (char *)"uchar_to_float_sptr_make", _wrap_uchar_to_float_sptr_make, METH_VARARGS, (char *)"\n"
		"uchar_to_float_sptr_make(uchar_to_float_sptr self) -> uchar_to_float_sptr\n"
		"\n"
		"Convert stream of unsigned chars to a stream of floats.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build a uchar to float block.\n"
		""},
	 { (char *)"uchar_to_float_sptr_history", _wrap_uchar_to_float_sptr_history, METH_VARARGS, (char *)"uchar_to_float_sptr_history(uchar_to_float_sptr self) -> unsigned int"},
	 { (char *)"uchar_to_float_sptr_declare_sample_delay", _wrap_uchar_to_float_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"uchar_to_float_sptr_declare_sample_delay(uchar_to_float_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"uchar_to_float_sptr_sample_delay", (PyCFunction) _wrap_uchar_to_float_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_sample_delay(uchar_to_float_sptr self, int which) -> unsigned int"},
	 { (char *)"uchar_to_float_sptr_output_multiple", _wrap_uchar_to_float_sptr_output_multiple, METH_VARARGS, (char *)"uchar_to_float_sptr_output_multiple(uchar_to_float_sptr self) -> int"},
	 { (char *)"uchar_to_float_sptr_relative_rate", _wrap_uchar_to_float_sptr_relative_rate, METH_VARARGS, (char *)"uchar_to_float_sptr_relative_rate(uchar_to_float_sptr self) -> double"},
	 { (char *)"uchar_to_float_sptr_start", _wrap_uchar_to_float_sptr_start, METH_VARARGS, (char *)"uchar_to_float_sptr_start(uchar_to_float_sptr self) -> bool"},
	 { (char *)"uchar_to_float_sptr_stop", _wrap_uchar_to_float_sptr_stop, METH_VARARGS, (char *)"uchar_to_float_sptr_stop(uchar_to_float_sptr self) -> bool"},
	 { (char *)"uchar_to_float_sptr_nitems_read", (PyCFunction) _wrap_uchar_to_float_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_nitems_read(uchar_to_float_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"uchar_to_float_sptr_nitems_written", (PyCFunction) _wrap_uchar_to_float_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_nitems_written(uchar_to_float_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"uchar_to_float_sptr_max_noutput_items", _wrap_uchar_to_float_sptr_max_noutput_items, METH_VARARGS, (char *)"uchar_to_float_sptr_max_noutput_items(uchar_to_float_sptr self) -> int"},
	 { (char *)"uchar_to_float_sptr_set_max_noutput_items", (PyCFunction) _wrap_uchar_to_float_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_set_max_noutput_items(uchar_to_float_sptr self, int m)"},
	 { (char *)"uchar_to_float_sptr_unset_max_noutput_items", _wrap_uchar_to_float_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"uchar_to_float_sptr_unset_max_noutput_items(uchar_to_float_sptr self)"},
	 { (char *)"uchar_to_float_sptr_is_set_max_noutput_items", _wrap_uchar_to_float_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"uchar_to_float_sptr_is_set_max_noutput_items(uchar_to_float_sptr self) -> bool"},
	 { (char *)"uchar_to_float_sptr_set_min_noutput_items", (PyCFunction) _wrap_uchar_to_float_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_set_min_noutput_items(uchar_to_float_sptr self, int m)"},
	 { (char *)"uchar_to_float_sptr_min_noutput_items", _wrap_uchar_to_float_sptr_min_noutput_items, METH_VARARGS, (char *)"uchar_to_float_sptr_min_noutput_items(uchar_to_float_sptr self) -> int"},
	 { (char *)"uchar_to_float_sptr_max_output_buffer", (PyCFunction) _wrap_uchar_to_float_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_max_output_buffer(uchar_to_float_sptr self, int i) -> long"},
	 { (char *)"uchar_to_float_sptr_set_max_output_buffer", _wrap_uchar_to_float_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"uchar_to_float_sptr_set_max_output_buffer(uchar_to_float_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"uchar_to_float_sptr_min_output_buffer", (PyCFunction) _wrap_uchar_to_float_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_min_output_buffer(uchar_to_float_sptr self, int i) -> long"},
	 { (char *)"uchar_to_float_sptr_set_min_output_buffer", _wrap_uchar_to_float_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"uchar_to_float_sptr_set_min_output_buffer(uchar_to_float_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"uchar_to_float_sptr_pc_noutput_items", _wrap_uchar_to_float_sptr_pc_noutput_items, METH_VARARGS, (char *)"uchar_to_float_sptr_pc_noutput_items(uchar_to_float_sptr self) -> float"},
	 { (char *)"uchar_to_float_sptr_pc_noutput_items_avg", _wrap_uchar_to_float_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"uchar_to_float_sptr_pc_noutput_items_avg(uchar_to_float_sptr self) -> float"},
	 { (char *)"uchar_to_float_sptr_pc_noutput_items_var", _wrap_uchar_to_float_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"uchar_to_float_sptr_pc_noutput_items_var(uchar_to_float_sptr self) -> float"},
	 { (char *)"uchar_to_float_sptr_pc_nproduced", _wrap_uchar_to_float_sptr_pc_nproduced, METH_VARARGS, (char *)"uchar_to_float_sptr_pc_nproduced(uchar_to_float_sptr self) -> float"},
	 { (char *)"uchar_to_float_sptr_pc_nproduced_avg", _wrap_uchar_to_float_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"uchar_to_float_sptr_pc_nproduced_avg(uchar_to_float_sptr self) -> float"},
	 { (char *)"uchar_to_float_sptr_pc_nproduced_var", _wrap_uchar_to_float_sptr_pc_nproduced_var, METH_VARARGS, (char *)"uchar_to_float_sptr_pc_nproduced_var(uchar_to_float_sptr self) -> float"},
	 { (char *)"uchar_to_float_sptr_pc_input_buffers_full", _wrap_uchar_to_float_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"uchar_to_float_sptr_pc_input_buffers_full(uchar_to_float_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"uchar_to_float_sptr_pc_input_buffers_full_avg", _wrap_uchar_to_float_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"uchar_to_float_sptr_pc_input_buffers_full_avg(uchar_to_float_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"uchar_to_float_sptr_pc_input_buffers_full_var", _wrap_uchar_to_float_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"uchar_to_float_sptr_pc_input_buffers_full_var(uchar_to_float_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"uchar_to_float_sptr_pc_output_buffers_full", _wrap_uchar_to_float_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"uchar_to_float_sptr_pc_output_buffers_full(uchar_to_float_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"uchar_to_float_sptr_pc_output_buffers_full_avg", _wrap_uchar_to_float_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"uchar_to_float_sptr_pc_output_buffers_full_avg(uchar_to_float_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"uchar_to_float_sptr_pc_output_buffers_full_var", _wrap_uchar_to_float_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"uchar_to_float_sptr_pc_output_buffers_full_var(uchar_to_float_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"uchar_to_float_sptr_pc_work_time", _wrap_uchar_to_float_sptr_pc_work_time, METH_VARARGS, (char *)"uchar_to_float_sptr_pc_work_time(uchar_to_float_sptr self) -> float"},
	 { (char *)"uchar_to_float_sptr_pc_work_time_avg", _wrap_uchar_to_float_sptr_pc_work_time_avg, METH_VARARGS, (char *)"uchar_to_float_sptr_pc_work_time_avg(uchar_to_float_sptr self) -> float"},
	 { (char *)"uchar_to_float_sptr_pc_work_time_var", _wrap_uchar_to_float_sptr_pc_work_time_var, METH_VARARGS, (char *)"uchar_to_float_sptr_pc_work_time_var(uchar_to_float_sptr self) -> float"},
	 { (char *)"uchar_to_float_sptr_pc_work_time_total", _wrap_uchar_to_float_sptr_pc_work_time_total, METH_VARARGS, (char *)"uchar_to_float_sptr_pc_work_time_total(uchar_to_float_sptr self) -> float"},
	 { (char *)"uchar_to_float_sptr_pc_throughput_avg", _wrap_uchar_to_float_sptr_pc_throughput_avg, METH_VARARGS, (char *)"uchar_to_float_sptr_pc_throughput_avg(uchar_to_float_sptr self) -> float"},
	 { (char *)"uchar_to_float_sptr_set_processor_affinity", (PyCFunction) _wrap_uchar_to_float_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_set_processor_affinity(uchar_to_float_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"uchar_to_float_sptr_unset_processor_affinity", _wrap_uchar_to_float_sptr_unset_processor_affinity, METH_VARARGS, (char *)"uchar_to_float_sptr_unset_processor_affinity(uchar_to_float_sptr self)"},
	 { (char *)"uchar_to_float_sptr_processor_affinity", _wrap_uchar_to_float_sptr_processor_affinity, METH_VARARGS, (char *)"uchar_to_float_sptr_processor_affinity(uchar_to_float_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"uchar_to_float_sptr_active_thread_priority", _wrap_uchar_to_float_sptr_active_thread_priority, METH_VARARGS, (char *)"uchar_to_float_sptr_active_thread_priority(uchar_to_float_sptr self) -> int"},
	 { (char *)"uchar_to_float_sptr_thread_priority", _wrap_uchar_to_float_sptr_thread_priority, METH_VARARGS, (char *)"uchar_to_float_sptr_thread_priority(uchar_to_float_sptr self) -> int"},
	 { (char *)"uchar_to_float_sptr_set_thread_priority", (PyCFunction) _wrap_uchar_to_float_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_set_thread_priority(uchar_to_float_sptr self, int priority) -> int"},
	 { (char *)"uchar_to_float_sptr_name", _wrap_uchar_to_float_sptr_name, METH_VARARGS, (char *)"uchar_to_float_sptr_name(uchar_to_float_sptr self) -> std::string"},
	 { (char *)"uchar_to_float_sptr_symbol_name", _wrap_uchar_to_float_sptr_symbol_name, METH_VARARGS, (char *)"uchar_to_float_sptr_symbol_name(uchar_to_float_sptr self) -> std::string"},
	 { (char *)"uchar_to_float_sptr_input_signature", _wrap_uchar_to_float_sptr_input_signature, METH_VARARGS, (char *)"uchar_to_float_sptr_input_signature(uchar_to_float_sptr self) -> io_signature_sptr"},
	 { (char *)"uchar_to_float_sptr_output_signature", _wrap_uchar_to_float_sptr_output_signature, METH_VARARGS, (char *)"uchar_to_float_sptr_output_signature(uchar_to_float_sptr self) -> io_signature_sptr"},
	 { (char *)"uchar_to_float_sptr_unique_id", _wrap_uchar_to_float_sptr_unique_id, METH_VARARGS, (char *)"uchar_to_float_sptr_unique_id(uchar_to_float_sptr self) -> long"},
	 { (char *)"uchar_to_float_sptr_to_basic_block", _wrap_uchar_to_float_sptr_to_basic_block, METH_VARARGS, (char *)"uchar_to_float_sptr_to_basic_block(uchar_to_float_sptr self) -> basic_block_sptr"},
	 { (char *)"uchar_to_float_sptr_check_topology", (PyCFunction) _wrap_uchar_to_float_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_check_topology(uchar_to_float_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"uchar_to_float_sptr_alias", _wrap_uchar_to_float_sptr_alias, METH_VARARGS, (char *)"uchar_to_float_sptr_alias(uchar_to_float_sptr self) -> std::string"},
	 { (char *)"uchar_to_float_sptr_set_block_alias", (PyCFunction) _wrap_uchar_to_float_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_set_block_alias(uchar_to_float_sptr self, std::string name)"},
	 { (char *)"uchar_to_float_sptr__post", (PyCFunction) _wrap_uchar_to_float_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr__post(uchar_to_float_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"uchar_to_float_sptr_message_ports_in", _wrap_uchar_to_float_sptr_message_ports_in, METH_VARARGS, (char *)"uchar_to_float_sptr_message_ports_in(uchar_to_float_sptr self) -> swig_int_ptr"},
	 { (char *)"uchar_to_float_sptr_message_ports_out", _wrap_uchar_to_float_sptr_message_ports_out, METH_VARARGS, (char *)"uchar_to_float_sptr_message_ports_out(uchar_to_float_sptr self) -> swig_int_ptr"},
	 { (char *)"uchar_to_float_sptr_message_subscribers", (PyCFunction) _wrap_uchar_to_float_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"uchar_to_float_sptr_message_subscribers(uchar_to_float_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"uchar_to_float_sptr_swigregister", uchar_to_float_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_udp_sink_sptr", _wrap_new_udp_sink_sptr, METH_VARARGS, (char *)"\n"
		"udp_sink_sptr()\n"
		"new_udp_sink_sptr(udp_sink p) -> udp_sink_sptr\n"
		""},
	 { (char *)"udp_sink_sptr___deref__", _wrap_udp_sink_sptr___deref__, METH_VARARGS, (char *)"udp_sink_sptr___deref__(udp_sink_sptr self) -> udp_sink"},
	 { (char *)"delete_udp_sink_sptr", _wrap_delete_udp_sink_sptr, METH_VARARGS, (char *)"delete_udp_sink_sptr(udp_sink_sptr self)"},
	 { (char *)"udp_sink_sptr_make", (PyCFunction) _wrap_udp_sink_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"udp_sink_sptr_make(udp_sink_sptr self, size_t itemsize, std::string const & host, int port, int payload_size=1472, \n"
		"    bool eof=True) -> udp_sink_sptr\n"
		"\n"
		"Write stream to an UDP socket.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"UDP Sink Constructor.\n"
		"\n"
		"Args:\n"
		"    itemsize : The size (in bytes) of the item datatype\n"
		"    host : The name or IP address of the receiving host; use NULL or None for no connection\n"
		"    port : Destination port to connect to on receiving host\n"
		"    payload_size : UDP payload size by default set to 1472 = (1500 MTU - (8 byte UDP header) - (20 byte IP header))\n"
		"    eof : Send zero-length packet on disconnect\n"
		""},
	 { (char *)"udp_sink_sptr_payload_size", _wrap_udp_sink_sptr_payload_size, METH_VARARGS, (char *)"\n"
		"udp_sink_sptr_payload_size(udp_sink_sptr self) -> int\n"
		"\n"
		"return the PAYLOAD_SIZE of the socket\n"
		""},
	 { (char *)"udp_sink_sptr_connect", (PyCFunction) _wrap_udp_sink_sptr_connect, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"udp_sink_sptr_connect(udp_sink_sptr self, std::string const & host, int port)\n"
		"\n"
		"Change the connection to a new destination.\n"
		"\n"
		"Calls disconnect() to terminate any current connection first.\n"
		""},
	 { (char *)"udp_sink_sptr_disconnect", _wrap_udp_sink_sptr_disconnect, METH_VARARGS, (char *)"\n"
		"udp_sink_sptr_disconnect(udp_sink_sptr self)\n"
		"\n"
		"Send zero-length packet (if eof is requested) then stop sending.\n"
		"\n"
		"Zero-byte packets can be interpreted as EOF by gr_udp_source. Note that disconnect occurs automatically when the sink is destroyed, but not when its top_block stops.\n"
		""},
	 { (char *)"udp_sink_sptr_history", _wrap_udp_sink_sptr_history, METH_VARARGS, (char *)"udp_sink_sptr_history(udp_sink_sptr self) -> unsigned int"},
	 { (char *)"udp_sink_sptr_declare_sample_delay", _wrap_udp_sink_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"udp_sink_sptr_declare_sample_delay(udp_sink_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"udp_sink_sptr_sample_delay", (PyCFunction) _wrap_udp_sink_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_sample_delay(udp_sink_sptr self, int which) -> unsigned int"},
	 { (char *)"udp_sink_sptr_output_multiple", _wrap_udp_sink_sptr_output_multiple, METH_VARARGS, (char *)"udp_sink_sptr_output_multiple(udp_sink_sptr self) -> int"},
	 { (char *)"udp_sink_sptr_relative_rate", _wrap_udp_sink_sptr_relative_rate, METH_VARARGS, (char *)"udp_sink_sptr_relative_rate(udp_sink_sptr self) -> double"},
	 { (char *)"udp_sink_sptr_start", _wrap_udp_sink_sptr_start, METH_VARARGS, (char *)"udp_sink_sptr_start(udp_sink_sptr self) -> bool"},
	 { (char *)"udp_sink_sptr_stop", _wrap_udp_sink_sptr_stop, METH_VARARGS, (char *)"udp_sink_sptr_stop(udp_sink_sptr self) -> bool"},
	 { (char *)"udp_sink_sptr_nitems_read", (PyCFunction) _wrap_udp_sink_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_nitems_read(udp_sink_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"udp_sink_sptr_nitems_written", (PyCFunction) _wrap_udp_sink_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_nitems_written(udp_sink_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"udp_sink_sptr_max_noutput_items", _wrap_udp_sink_sptr_max_noutput_items, METH_VARARGS, (char *)"udp_sink_sptr_max_noutput_items(udp_sink_sptr self) -> int"},
	 { (char *)"udp_sink_sptr_set_max_noutput_items", (PyCFunction) _wrap_udp_sink_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_set_max_noutput_items(udp_sink_sptr self, int m)"},
	 { (char *)"udp_sink_sptr_unset_max_noutput_items", _wrap_udp_sink_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"udp_sink_sptr_unset_max_noutput_items(udp_sink_sptr self)"},
	 { (char *)"udp_sink_sptr_is_set_max_noutput_items", _wrap_udp_sink_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"udp_sink_sptr_is_set_max_noutput_items(udp_sink_sptr self) -> bool"},
	 { (char *)"udp_sink_sptr_set_min_noutput_items", (PyCFunction) _wrap_udp_sink_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_set_min_noutput_items(udp_sink_sptr self, int m)"},
	 { (char *)"udp_sink_sptr_min_noutput_items", _wrap_udp_sink_sptr_min_noutput_items, METH_VARARGS, (char *)"udp_sink_sptr_min_noutput_items(udp_sink_sptr self) -> int"},
	 { (char *)"udp_sink_sptr_max_output_buffer", (PyCFunction) _wrap_udp_sink_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_max_output_buffer(udp_sink_sptr self, int i) -> long"},
	 { (char *)"udp_sink_sptr_set_max_output_buffer", _wrap_udp_sink_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"udp_sink_sptr_set_max_output_buffer(udp_sink_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"udp_sink_sptr_min_output_buffer", (PyCFunction) _wrap_udp_sink_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_min_output_buffer(udp_sink_sptr self, int i) -> long"},
	 { (char *)"udp_sink_sptr_set_min_output_buffer", _wrap_udp_sink_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"udp_sink_sptr_set_min_output_buffer(udp_sink_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"udp_sink_sptr_pc_noutput_items", _wrap_udp_sink_sptr_pc_noutput_items, METH_VARARGS, (char *)"udp_sink_sptr_pc_noutput_items(udp_sink_sptr self) -> float"},
	 { (char *)"udp_sink_sptr_pc_noutput_items_avg", _wrap_udp_sink_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"udp_sink_sptr_pc_noutput_items_avg(udp_sink_sptr self) -> float"},
	 { (char *)"udp_sink_sptr_pc_noutput_items_var", _wrap_udp_sink_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"udp_sink_sptr_pc_noutput_items_var(udp_sink_sptr self) -> float"},
	 { (char *)"udp_sink_sptr_pc_nproduced", _wrap_udp_sink_sptr_pc_nproduced, METH_VARARGS, (char *)"udp_sink_sptr_pc_nproduced(udp_sink_sptr self) -> float"},
	 { (char *)"udp_sink_sptr_pc_nproduced_avg", _wrap_udp_sink_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"udp_sink_sptr_pc_nproduced_avg(udp_sink_sptr self) -> float"},
	 { (char *)"udp_sink_sptr_pc_nproduced_var", _wrap_udp_sink_sptr_pc_nproduced_var, METH_VARARGS, (char *)"udp_sink_sptr_pc_nproduced_var(udp_sink_sptr self) -> float"},
	 { (char *)"udp_sink_sptr_pc_input_buffers_full", _wrap_udp_sink_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"udp_sink_sptr_pc_input_buffers_full(udp_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_sink_sptr_pc_input_buffers_full_avg", _wrap_udp_sink_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"udp_sink_sptr_pc_input_buffers_full_avg(udp_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_sink_sptr_pc_input_buffers_full_var", _wrap_udp_sink_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"udp_sink_sptr_pc_input_buffers_full_var(udp_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_sink_sptr_pc_output_buffers_full", _wrap_udp_sink_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"udp_sink_sptr_pc_output_buffers_full(udp_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_sink_sptr_pc_output_buffers_full_avg", _wrap_udp_sink_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"udp_sink_sptr_pc_output_buffers_full_avg(udp_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_sink_sptr_pc_output_buffers_full_var", _wrap_udp_sink_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"udp_sink_sptr_pc_output_buffers_full_var(udp_sink_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_sink_sptr_pc_work_time", _wrap_udp_sink_sptr_pc_work_time, METH_VARARGS, (char *)"udp_sink_sptr_pc_work_time(udp_sink_sptr self) -> float"},
	 { (char *)"udp_sink_sptr_pc_work_time_avg", _wrap_udp_sink_sptr_pc_work_time_avg, METH_VARARGS, (char *)"udp_sink_sptr_pc_work_time_avg(udp_sink_sptr self) -> float"},
	 { (char *)"udp_sink_sptr_pc_work_time_var", _wrap_udp_sink_sptr_pc_work_time_var, METH_VARARGS, (char *)"udp_sink_sptr_pc_work_time_var(udp_sink_sptr self) -> float"},
	 { (char *)"udp_sink_sptr_pc_work_time_total", _wrap_udp_sink_sptr_pc_work_time_total, METH_VARARGS, (char *)"udp_sink_sptr_pc_work_time_total(udp_sink_sptr self) -> float"},
	 { (char *)"udp_sink_sptr_pc_throughput_avg", _wrap_udp_sink_sptr_pc_throughput_avg, METH_VARARGS, (char *)"udp_sink_sptr_pc_throughput_avg(udp_sink_sptr self) -> float"},
	 { (char *)"udp_sink_sptr_set_processor_affinity", (PyCFunction) _wrap_udp_sink_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_set_processor_affinity(udp_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"udp_sink_sptr_unset_processor_affinity", _wrap_udp_sink_sptr_unset_processor_affinity, METH_VARARGS, (char *)"udp_sink_sptr_unset_processor_affinity(udp_sink_sptr self)"},
	 { (char *)"udp_sink_sptr_processor_affinity", _wrap_udp_sink_sptr_processor_affinity, METH_VARARGS, (char *)"udp_sink_sptr_processor_affinity(udp_sink_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"udp_sink_sptr_active_thread_priority", _wrap_udp_sink_sptr_active_thread_priority, METH_VARARGS, (char *)"udp_sink_sptr_active_thread_priority(udp_sink_sptr self) -> int"},
	 { (char *)"udp_sink_sptr_thread_priority", _wrap_udp_sink_sptr_thread_priority, METH_VARARGS, (char *)"udp_sink_sptr_thread_priority(udp_sink_sptr self) -> int"},
	 { (char *)"udp_sink_sptr_set_thread_priority", (PyCFunction) _wrap_udp_sink_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_set_thread_priority(udp_sink_sptr self, int priority) -> int"},
	 { (char *)"udp_sink_sptr_name", _wrap_udp_sink_sptr_name, METH_VARARGS, (char *)"udp_sink_sptr_name(udp_sink_sptr self) -> std::string"},
	 { (char *)"udp_sink_sptr_symbol_name", _wrap_udp_sink_sptr_symbol_name, METH_VARARGS, (char *)"udp_sink_sptr_symbol_name(udp_sink_sptr self) -> std::string"},
	 { (char *)"udp_sink_sptr_input_signature", _wrap_udp_sink_sptr_input_signature, METH_VARARGS, (char *)"udp_sink_sptr_input_signature(udp_sink_sptr self) -> io_signature_sptr"},
	 { (char *)"udp_sink_sptr_output_signature", _wrap_udp_sink_sptr_output_signature, METH_VARARGS, (char *)"udp_sink_sptr_output_signature(udp_sink_sptr self) -> io_signature_sptr"},
	 { (char *)"udp_sink_sptr_unique_id", _wrap_udp_sink_sptr_unique_id, METH_VARARGS, (char *)"udp_sink_sptr_unique_id(udp_sink_sptr self) -> long"},
	 { (char *)"udp_sink_sptr_to_basic_block", _wrap_udp_sink_sptr_to_basic_block, METH_VARARGS, (char *)"udp_sink_sptr_to_basic_block(udp_sink_sptr self) -> basic_block_sptr"},
	 { (char *)"udp_sink_sptr_check_topology", (PyCFunction) _wrap_udp_sink_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_check_topology(udp_sink_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"udp_sink_sptr_alias", _wrap_udp_sink_sptr_alias, METH_VARARGS, (char *)"udp_sink_sptr_alias(udp_sink_sptr self) -> std::string"},
	 { (char *)"udp_sink_sptr_set_block_alias", (PyCFunction) _wrap_udp_sink_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_set_block_alias(udp_sink_sptr self, std::string name)"},
	 { (char *)"udp_sink_sptr__post", (PyCFunction) _wrap_udp_sink_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr__post(udp_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"udp_sink_sptr_message_ports_in", _wrap_udp_sink_sptr_message_ports_in, METH_VARARGS, (char *)"udp_sink_sptr_message_ports_in(udp_sink_sptr self) -> swig_int_ptr"},
	 { (char *)"udp_sink_sptr_message_ports_out", _wrap_udp_sink_sptr_message_ports_out, METH_VARARGS, (char *)"udp_sink_sptr_message_ports_out(udp_sink_sptr self) -> swig_int_ptr"},
	 { (char *)"udp_sink_sptr_message_subscribers", (PyCFunction) _wrap_udp_sink_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"udp_sink_sptr_message_subscribers(udp_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"udp_sink_sptr_swigregister", udp_sink_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_udp_source_sptr", _wrap_new_udp_source_sptr, METH_VARARGS, (char *)"\n"
		"udp_source_sptr()\n"
		"new_udp_source_sptr(udp_source p) -> udp_source_sptr\n"
		""},
	 { (char *)"udp_source_sptr___deref__", _wrap_udp_source_sptr___deref__, METH_VARARGS, (char *)"udp_source_sptr___deref__(udp_source_sptr self) -> udp_source"},
	 { (char *)"delete_udp_source_sptr", _wrap_delete_udp_source_sptr, METH_VARARGS, (char *)"delete_udp_source_sptr(udp_source_sptr self)"},
	 { (char *)"udp_source_sptr_make", (PyCFunction) _wrap_udp_source_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"udp_source_sptr_make(udp_source_sptr self, size_t itemsize, std::string const & host, int port, int payload_size=1472, \n"
		"    bool eof=True) -> udp_source_sptr\n"
		"\n"
		"Read stream from an UDP socket.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"UDP Source Constructor.\n"
		"\n"
		"Args:\n"
		"    itemsize : The size (in bytes) of the item datatype\n"
		"    host : The name or IP address of the transmitting host; can be NULL, None, or \"0.0.0.0\" to allow reading from any interface on the host\n"
		"    port : The port number on which to receive data; use 0 to have the system assign an unused port number\n"
		"    payload_size : UDP payload size by default set to 1472 = (1500 MTU - (8 byte UDP header) - (20 byte IP header))\n"
		"    eof : Interpret zero-length packet as EOF (default: true)\n"
		""},
	 { (char *)"udp_source_sptr_connect", (PyCFunction) _wrap_udp_source_sptr_connect, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"udp_source_sptr_connect(udp_source_sptr self, std::string const & host, int port)\n"
		"\n"
		"Change the connection to a new destination.\n"
		"\n"
		"Calls disconnect() to terminate any current connection first.\n"
		""},
	 { (char *)"udp_source_sptr_disconnect", _wrap_udp_source_sptr_disconnect, METH_VARARGS, (char *)"\n"
		"udp_source_sptr_disconnect(udp_source_sptr self)\n"
		"\n"
		"Cut the connection if we have one set up.\n"
		""},
	 { (char *)"udp_source_sptr_payload_size", _wrap_udp_source_sptr_payload_size, METH_VARARGS, (char *)"\n"
		"udp_source_sptr_payload_size(udp_source_sptr self) -> int\n"
		"\n"
		"return the PAYLOAD_SIZE of the socket\n"
		""},
	 { (char *)"udp_source_sptr_get_port", _wrap_udp_source_sptr_get_port, METH_VARARGS, (char *)"\n"
		"udp_source_sptr_get_port(udp_source_sptr self) -> int\n"
		"\n"
		"return the port number of the socket\n"
		""},
	 { (char *)"udp_source_sptr_history", _wrap_udp_source_sptr_history, METH_VARARGS, (char *)"udp_source_sptr_history(udp_source_sptr self) -> unsigned int"},
	 { (char *)"udp_source_sptr_declare_sample_delay", _wrap_udp_source_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"udp_source_sptr_declare_sample_delay(udp_source_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"udp_source_sptr_sample_delay", (PyCFunction) _wrap_udp_source_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_sample_delay(udp_source_sptr self, int which) -> unsigned int"},
	 { (char *)"udp_source_sptr_output_multiple", _wrap_udp_source_sptr_output_multiple, METH_VARARGS, (char *)"udp_source_sptr_output_multiple(udp_source_sptr self) -> int"},
	 { (char *)"udp_source_sptr_relative_rate", _wrap_udp_source_sptr_relative_rate, METH_VARARGS, (char *)"udp_source_sptr_relative_rate(udp_source_sptr self) -> double"},
	 { (char *)"udp_source_sptr_start", _wrap_udp_source_sptr_start, METH_VARARGS, (char *)"udp_source_sptr_start(udp_source_sptr self) -> bool"},
	 { (char *)"udp_source_sptr_stop", _wrap_udp_source_sptr_stop, METH_VARARGS, (char *)"udp_source_sptr_stop(udp_source_sptr self) -> bool"},
	 { (char *)"udp_source_sptr_nitems_read", (PyCFunction) _wrap_udp_source_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_nitems_read(udp_source_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"udp_source_sptr_nitems_written", (PyCFunction) _wrap_udp_source_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_nitems_written(udp_source_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"udp_source_sptr_max_noutput_items", _wrap_udp_source_sptr_max_noutput_items, METH_VARARGS, (char *)"udp_source_sptr_max_noutput_items(udp_source_sptr self) -> int"},
	 { (char *)"udp_source_sptr_set_max_noutput_items", (PyCFunction) _wrap_udp_source_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_set_max_noutput_items(udp_source_sptr self, int m)"},
	 { (char *)"udp_source_sptr_unset_max_noutput_items", _wrap_udp_source_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"udp_source_sptr_unset_max_noutput_items(udp_source_sptr self)"},
	 { (char *)"udp_source_sptr_is_set_max_noutput_items", _wrap_udp_source_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"udp_source_sptr_is_set_max_noutput_items(udp_source_sptr self) -> bool"},
	 { (char *)"udp_source_sptr_set_min_noutput_items", (PyCFunction) _wrap_udp_source_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_set_min_noutput_items(udp_source_sptr self, int m)"},
	 { (char *)"udp_source_sptr_min_noutput_items", _wrap_udp_source_sptr_min_noutput_items, METH_VARARGS, (char *)"udp_source_sptr_min_noutput_items(udp_source_sptr self) -> int"},
	 { (char *)"udp_source_sptr_max_output_buffer", (PyCFunction) _wrap_udp_source_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_max_output_buffer(udp_source_sptr self, int i) -> long"},
	 { (char *)"udp_source_sptr_set_max_output_buffer", _wrap_udp_source_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"udp_source_sptr_set_max_output_buffer(udp_source_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"udp_source_sptr_min_output_buffer", (PyCFunction) _wrap_udp_source_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_min_output_buffer(udp_source_sptr self, int i) -> long"},
	 { (char *)"udp_source_sptr_set_min_output_buffer", _wrap_udp_source_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"udp_source_sptr_set_min_output_buffer(udp_source_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"udp_source_sptr_pc_noutput_items", _wrap_udp_source_sptr_pc_noutput_items, METH_VARARGS, (char *)"udp_source_sptr_pc_noutput_items(udp_source_sptr self) -> float"},
	 { (char *)"udp_source_sptr_pc_noutput_items_avg", _wrap_udp_source_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"udp_source_sptr_pc_noutput_items_avg(udp_source_sptr self) -> float"},
	 { (char *)"udp_source_sptr_pc_noutput_items_var", _wrap_udp_source_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"udp_source_sptr_pc_noutput_items_var(udp_source_sptr self) -> float"},
	 { (char *)"udp_source_sptr_pc_nproduced", _wrap_udp_source_sptr_pc_nproduced, METH_VARARGS, (char *)"udp_source_sptr_pc_nproduced(udp_source_sptr self) -> float"},
	 { (char *)"udp_source_sptr_pc_nproduced_avg", _wrap_udp_source_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"udp_source_sptr_pc_nproduced_avg(udp_source_sptr self) -> float"},
	 { (char *)"udp_source_sptr_pc_nproduced_var", _wrap_udp_source_sptr_pc_nproduced_var, METH_VARARGS, (char *)"udp_source_sptr_pc_nproduced_var(udp_source_sptr self) -> float"},
	 { (char *)"udp_source_sptr_pc_input_buffers_full", _wrap_udp_source_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"udp_source_sptr_pc_input_buffers_full(udp_source_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_source_sptr_pc_input_buffers_full_avg", _wrap_udp_source_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"udp_source_sptr_pc_input_buffers_full_avg(udp_source_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_source_sptr_pc_input_buffers_full_var", _wrap_udp_source_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"udp_source_sptr_pc_input_buffers_full_var(udp_source_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_source_sptr_pc_output_buffers_full", _wrap_udp_source_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"udp_source_sptr_pc_output_buffers_full(udp_source_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_source_sptr_pc_output_buffers_full_avg", _wrap_udp_source_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"udp_source_sptr_pc_output_buffers_full_avg(udp_source_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_source_sptr_pc_output_buffers_full_var", _wrap_udp_source_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"udp_source_sptr_pc_output_buffers_full_var(udp_source_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"udp_source_sptr_pc_work_time", _wrap_udp_source_sptr_pc_work_time, METH_VARARGS, (char *)"udp_source_sptr_pc_work_time(udp_source_sptr self) -> float"},
	 { (char *)"udp_source_sptr_pc_work_time_avg", _wrap_udp_source_sptr_pc_work_time_avg, METH_VARARGS, (char *)"udp_source_sptr_pc_work_time_avg(udp_source_sptr self) -> float"},
	 { (char *)"udp_source_sptr_pc_work_time_var", _wrap_udp_source_sptr_pc_work_time_var, METH_VARARGS, (char *)"udp_source_sptr_pc_work_time_var(udp_source_sptr self) -> float"},
	 { (char *)"udp_source_sptr_pc_work_time_total", _wrap_udp_source_sptr_pc_work_time_total, METH_VARARGS, (char *)"udp_source_sptr_pc_work_time_total(udp_source_sptr self) -> float"},
	 { (char *)"udp_source_sptr_pc_throughput_avg", _wrap_udp_source_sptr_pc_throughput_avg, METH_VARARGS, (char *)"udp_source_sptr_pc_throughput_avg(udp_source_sptr self) -> float"},
	 { (char *)"udp_source_sptr_set_processor_affinity", (PyCFunction) _wrap_udp_source_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_set_processor_affinity(udp_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"udp_source_sptr_unset_processor_affinity", _wrap_udp_source_sptr_unset_processor_affinity, METH_VARARGS, (char *)"udp_source_sptr_unset_processor_affinity(udp_source_sptr self)"},
	 { (char *)"udp_source_sptr_processor_affinity", _wrap_udp_source_sptr_processor_affinity, METH_VARARGS, (char *)"udp_source_sptr_processor_affinity(udp_source_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"udp_source_sptr_active_thread_priority", _wrap_udp_source_sptr_active_thread_priority, METH_VARARGS, (char *)"udp_source_sptr_active_thread_priority(udp_source_sptr self) -> int"},
	 { (char *)"udp_source_sptr_thread_priority", _wrap_udp_source_sptr_thread_priority, METH_VARARGS, (char *)"udp_source_sptr_thread_priority(udp_source_sptr self) -> int"},
	 { (char *)"udp_source_sptr_set_thread_priority", (PyCFunction) _wrap_udp_source_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_set_thread_priority(udp_source_sptr self, int priority) -> int"},
	 { (char *)"udp_source_sptr_name", _wrap_udp_source_sptr_name, METH_VARARGS, (char *)"udp_source_sptr_name(udp_source_sptr self) -> std::string"},
	 { (char *)"udp_source_sptr_symbol_name", _wrap_udp_source_sptr_symbol_name, METH_VARARGS, (char *)"udp_source_sptr_symbol_name(udp_source_sptr self) -> std::string"},
	 { (char *)"udp_source_sptr_input_signature", _wrap_udp_source_sptr_input_signature, METH_VARARGS, (char *)"udp_source_sptr_input_signature(udp_source_sptr self) -> io_signature_sptr"},
	 { (char *)"udp_source_sptr_output_signature", _wrap_udp_source_sptr_output_signature, METH_VARARGS, (char *)"udp_source_sptr_output_signature(udp_source_sptr self) -> io_signature_sptr"},
	 { (char *)"udp_source_sptr_unique_id", _wrap_udp_source_sptr_unique_id, METH_VARARGS, (char *)"udp_source_sptr_unique_id(udp_source_sptr self) -> long"},
	 { (char *)"udp_source_sptr_to_basic_block", _wrap_udp_source_sptr_to_basic_block, METH_VARARGS, (char *)"udp_source_sptr_to_basic_block(udp_source_sptr self) -> basic_block_sptr"},
	 { (char *)"udp_source_sptr_check_topology", (PyCFunction) _wrap_udp_source_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_check_topology(udp_source_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"udp_source_sptr_alias", _wrap_udp_source_sptr_alias, METH_VARARGS, (char *)"udp_source_sptr_alias(udp_source_sptr self) -> std::string"},
	 { (char *)"udp_source_sptr_set_block_alias", (PyCFunction) _wrap_udp_source_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_set_block_alias(udp_source_sptr self, std::string name)"},
	 { (char *)"udp_source_sptr__post", (PyCFunction) _wrap_udp_source_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr__post(udp_source_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"udp_source_sptr_message_ports_in", _wrap_udp_source_sptr_message_ports_in, METH_VARARGS, (char *)"udp_source_sptr_message_ports_in(udp_source_sptr self) -> swig_int_ptr"},
	 { (char *)"udp_source_sptr_message_ports_out", _wrap_udp_source_sptr_message_ports_out, METH_VARARGS, (char *)"udp_source_sptr_message_ports_out(udp_source_sptr self) -> swig_int_ptr"},
	 { (char *)"udp_source_sptr_message_subscribers", (PyCFunction) _wrap_udp_source_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"udp_source_sptr_message_subscribers(udp_source_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"udp_source_sptr_swigregister", udp_source_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_unpack_k_bits_bb_sptr", _wrap_new_unpack_k_bits_bb_sptr, METH_VARARGS, (char *)"\n"
		"unpack_k_bits_bb_sptr()\n"
		"new_unpack_k_bits_bb_sptr(unpack_k_bits_bb p) -> unpack_k_bits_bb_sptr\n"
		""},
	 { (char *)"unpack_k_bits_bb_sptr___deref__", _wrap_unpack_k_bits_bb_sptr___deref__, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr___deref__(unpack_k_bits_bb_sptr self) -> unpack_k_bits_bb"},
	 { (char *)"delete_unpack_k_bits_bb_sptr", _wrap_delete_unpack_k_bits_bb_sptr, METH_VARARGS, (char *)"delete_unpack_k_bits_bb_sptr(unpack_k_bits_bb_sptr self)"},
	 { (char *)"unpack_k_bits_bb_sptr_make", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"unpack_k_bits_bb_sptr_make(unpack_k_bits_bb_sptr self, unsigned int k) -> unpack_k_bits_bb_sptr\n"
		"\n"
		"Converts a byte with k relevant bits to k output bytes with 1 bit in the LSB.\n"
		"\n"
		"This block picks the K least significant bits from a byte, and expands them into K bytes of 0 or 1.\n"
		"\n"
		"Example: k = 4 in = [0xf5, 0x08] out = [0,1,0,1, 1,0,0,0]\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make an unpack_k_bits block.\n"
		"\n"
		"Args:\n"
		"    k : number of bits to unpack.\n"
		""},
	 { (char *)"unpack_k_bits_bb_sptr_history", _wrap_unpack_k_bits_bb_sptr_history, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_history(unpack_k_bits_bb_sptr self) -> unsigned int"},
	 { (char *)"unpack_k_bits_bb_sptr_declare_sample_delay", _wrap_unpack_k_bits_bb_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"unpack_k_bits_bb_sptr_declare_sample_delay(unpack_k_bits_bb_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"unpack_k_bits_bb_sptr_sample_delay", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_sample_delay(unpack_k_bits_bb_sptr self, int which) -> unsigned int"},
	 { (char *)"unpack_k_bits_bb_sptr_output_multiple", _wrap_unpack_k_bits_bb_sptr_output_multiple, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_output_multiple(unpack_k_bits_bb_sptr self) -> int"},
	 { (char *)"unpack_k_bits_bb_sptr_relative_rate", _wrap_unpack_k_bits_bb_sptr_relative_rate, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_relative_rate(unpack_k_bits_bb_sptr self) -> double"},
	 { (char *)"unpack_k_bits_bb_sptr_start", _wrap_unpack_k_bits_bb_sptr_start, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_start(unpack_k_bits_bb_sptr self) -> bool"},
	 { (char *)"unpack_k_bits_bb_sptr_stop", _wrap_unpack_k_bits_bb_sptr_stop, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_stop(unpack_k_bits_bb_sptr self) -> bool"},
	 { (char *)"unpack_k_bits_bb_sptr_nitems_read", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_nitems_read(unpack_k_bits_bb_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"unpack_k_bits_bb_sptr_nitems_written", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_nitems_written(unpack_k_bits_bb_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"unpack_k_bits_bb_sptr_max_noutput_items", _wrap_unpack_k_bits_bb_sptr_max_noutput_items, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_max_noutput_items(unpack_k_bits_bb_sptr self) -> int"},
	 { (char *)"unpack_k_bits_bb_sptr_set_max_noutput_items", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_set_max_noutput_items(unpack_k_bits_bb_sptr self, int m)"},
	 { (char *)"unpack_k_bits_bb_sptr_unset_max_noutput_items", _wrap_unpack_k_bits_bb_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_unset_max_noutput_items(unpack_k_bits_bb_sptr self)"},
	 { (char *)"unpack_k_bits_bb_sptr_is_set_max_noutput_items", _wrap_unpack_k_bits_bb_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_is_set_max_noutput_items(unpack_k_bits_bb_sptr self) -> bool"},
	 { (char *)"unpack_k_bits_bb_sptr_set_min_noutput_items", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_set_min_noutput_items(unpack_k_bits_bb_sptr self, int m)"},
	 { (char *)"unpack_k_bits_bb_sptr_min_noutput_items", _wrap_unpack_k_bits_bb_sptr_min_noutput_items, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_min_noutput_items(unpack_k_bits_bb_sptr self) -> int"},
	 { (char *)"unpack_k_bits_bb_sptr_max_output_buffer", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_max_output_buffer(unpack_k_bits_bb_sptr self, int i) -> long"},
	 { (char *)"unpack_k_bits_bb_sptr_set_max_output_buffer", _wrap_unpack_k_bits_bb_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"unpack_k_bits_bb_sptr_set_max_output_buffer(unpack_k_bits_bb_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"unpack_k_bits_bb_sptr_min_output_buffer", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_min_output_buffer(unpack_k_bits_bb_sptr self, int i) -> long"},
	 { (char *)"unpack_k_bits_bb_sptr_set_min_output_buffer", _wrap_unpack_k_bits_bb_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"unpack_k_bits_bb_sptr_set_min_output_buffer(unpack_k_bits_bb_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"unpack_k_bits_bb_sptr_pc_noutput_items", _wrap_unpack_k_bits_bb_sptr_pc_noutput_items, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_pc_noutput_items(unpack_k_bits_bb_sptr self) -> float"},
	 { (char *)"unpack_k_bits_bb_sptr_pc_noutput_items_avg", _wrap_unpack_k_bits_bb_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_pc_noutput_items_avg(unpack_k_bits_bb_sptr self) -> float"},
	 { (char *)"unpack_k_bits_bb_sptr_pc_noutput_items_var", _wrap_unpack_k_bits_bb_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_pc_noutput_items_var(unpack_k_bits_bb_sptr self) -> float"},
	 { (char *)"unpack_k_bits_bb_sptr_pc_nproduced", _wrap_unpack_k_bits_bb_sptr_pc_nproduced, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_pc_nproduced(unpack_k_bits_bb_sptr self) -> float"},
	 { (char *)"unpack_k_bits_bb_sptr_pc_nproduced_avg", _wrap_unpack_k_bits_bb_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_pc_nproduced_avg(unpack_k_bits_bb_sptr self) -> float"},
	 { (char *)"unpack_k_bits_bb_sptr_pc_nproduced_var", _wrap_unpack_k_bits_bb_sptr_pc_nproduced_var, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_pc_nproduced_var(unpack_k_bits_bb_sptr self) -> float"},
	 { (char *)"unpack_k_bits_bb_sptr_pc_input_buffers_full", _wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"unpack_k_bits_bb_sptr_pc_input_buffers_full(unpack_k_bits_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpack_k_bits_bb_sptr_pc_input_buffers_full_avg", _wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"unpack_k_bits_bb_sptr_pc_input_buffers_full_avg(unpack_k_bits_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpack_k_bits_bb_sptr_pc_input_buffers_full_var", _wrap_unpack_k_bits_bb_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"unpack_k_bits_bb_sptr_pc_input_buffers_full_var(unpack_k_bits_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpack_k_bits_bb_sptr_pc_output_buffers_full", _wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"unpack_k_bits_bb_sptr_pc_output_buffers_full(unpack_k_bits_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpack_k_bits_bb_sptr_pc_output_buffers_full_avg", _wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"unpack_k_bits_bb_sptr_pc_output_buffers_full_avg(unpack_k_bits_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpack_k_bits_bb_sptr_pc_output_buffers_full_var", _wrap_unpack_k_bits_bb_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"unpack_k_bits_bb_sptr_pc_output_buffers_full_var(unpack_k_bits_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpack_k_bits_bb_sptr_pc_work_time", _wrap_unpack_k_bits_bb_sptr_pc_work_time, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_pc_work_time(unpack_k_bits_bb_sptr self) -> float"},
	 { (char *)"unpack_k_bits_bb_sptr_pc_work_time_avg", _wrap_unpack_k_bits_bb_sptr_pc_work_time_avg, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_pc_work_time_avg(unpack_k_bits_bb_sptr self) -> float"},
	 { (char *)"unpack_k_bits_bb_sptr_pc_work_time_var", _wrap_unpack_k_bits_bb_sptr_pc_work_time_var, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_pc_work_time_var(unpack_k_bits_bb_sptr self) -> float"},
	 { (char *)"unpack_k_bits_bb_sptr_pc_work_time_total", _wrap_unpack_k_bits_bb_sptr_pc_work_time_total, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_pc_work_time_total(unpack_k_bits_bb_sptr self) -> float"},
	 { (char *)"unpack_k_bits_bb_sptr_pc_throughput_avg", _wrap_unpack_k_bits_bb_sptr_pc_throughput_avg, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_pc_throughput_avg(unpack_k_bits_bb_sptr self) -> float"},
	 { (char *)"unpack_k_bits_bb_sptr_set_processor_affinity", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_set_processor_affinity(unpack_k_bits_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"unpack_k_bits_bb_sptr_unset_processor_affinity", _wrap_unpack_k_bits_bb_sptr_unset_processor_affinity, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_unset_processor_affinity(unpack_k_bits_bb_sptr self)"},
	 { (char *)"unpack_k_bits_bb_sptr_processor_affinity", _wrap_unpack_k_bits_bb_sptr_processor_affinity, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_processor_affinity(unpack_k_bits_bb_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"unpack_k_bits_bb_sptr_active_thread_priority", _wrap_unpack_k_bits_bb_sptr_active_thread_priority, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_active_thread_priority(unpack_k_bits_bb_sptr self) -> int"},
	 { (char *)"unpack_k_bits_bb_sptr_thread_priority", _wrap_unpack_k_bits_bb_sptr_thread_priority, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_thread_priority(unpack_k_bits_bb_sptr self) -> int"},
	 { (char *)"unpack_k_bits_bb_sptr_set_thread_priority", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_set_thread_priority(unpack_k_bits_bb_sptr self, int priority) -> int"},
	 { (char *)"unpack_k_bits_bb_sptr_name", _wrap_unpack_k_bits_bb_sptr_name, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_name(unpack_k_bits_bb_sptr self) -> std::string"},
	 { (char *)"unpack_k_bits_bb_sptr_symbol_name", _wrap_unpack_k_bits_bb_sptr_symbol_name, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_symbol_name(unpack_k_bits_bb_sptr self) -> std::string"},
	 { (char *)"unpack_k_bits_bb_sptr_input_signature", _wrap_unpack_k_bits_bb_sptr_input_signature, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_input_signature(unpack_k_bits_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"unpack_k_bits_bb_sptr_output_signature", _wrap_unpack_k_bits_bb_sptr_output_signature, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_output_signature(unpack_k_bits_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"unpack_k_bits_bb_sptr_unique_id", _wrap_unpack_k_bits_bb_sptr_unique_id, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_unique_id(unpack_k_bits_bb_sptr self) -> long"},
	 { (char *)"unpack_k_bits_bb_sptr_to_basic_block", _wrap_unpack_k_bits_bb_sptr_to_basic_block, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_to_basic_block(unpack_k_bits_bb_sptr self) -> basic_block_sptr"},
	 { (char *)"unpack_k_bits_bb_sptr_check_topology", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_check_topology(unpack_k_bits_bb_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"unpack_k_bits_bb_sptr_alias", _wrap_unpack_k_bits_bb_sptr_alias, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_alias(unpack_k_bits_bb_sptr self) -> std::string"},
	 { (char *)"unpack_k_bits_bb_sptr_set_block_alias", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_set_block_alias(unpack_k_bits_bb_sptr self, std::string name)"},
	 { (char *)"unpack_k_bits_bb_sptr__post", (PyCFunction) _wrap_unpack_k_bits_bb_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr__post(unpack_k_bits_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"unpack_k_bits_bb_sptr_message_ports_in", _wrap_unpack_k_bits_bb_sptr_message_ports_in, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_message_ports_in(unpack_k_bits_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"unpack_k_bits_bb_sptr_message_ports_out", _wrap_unpack_k_bits_bb_sptr_message_ports_out, METH_VARARGS, (char *)"unpack_k_bits_bb_sptr_message_ports_out(unpack_k_bits_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"unpack_k_bits_bb_sptr_message_subscribers", (PyCFunction) _wrap_unpack_k_bits_bb_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"unpack_k_bits_bb_sptr_message_subscribers(unpack_k_bits_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"unpack_k_bits_bb_sptr_swigregister", unpack_k_bits_bb_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_unpacked_to_packed_bb_sptr", _wrap_new_unpacked_to_packed_bb_sptr, METH_VARARGS, (char *)"\n"
		"unpacked_to_packed_bb_sptr()\n"
		"new_unpacked_to_packed_bb_sptr(unpacked_to_packed_bb p) -> unpacked_to_packed_bb_sptr\n"
		""},
	 { (char *)"unpacked_to_packed_bb_sptr___deref__", _wrap_unpacked_to_packed_bb_sptr___deref__, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr___deref__(unpacked_to_packed_bb_sptr self) -> unpacked_to_packed_bb"},
	 { (char *)"delete_unpacked_to_packed_bb_sptr", _wrap_delete_unpacked_to_packed_bb_sptr, METH_VARARGS, (char *)"delete_unpacked_to_packed_bb_sptr(unpacked_to_packed_bb_sptr self)"},
	 { (char *)"unpacked_to_packed_bb_sptr_make", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"unpacked_to_packed_bb_sptr_make(unpacked_to_packed_bb_sptr self, unsigned int bits_per_chunk, gr::endianness_t endianness) -> unpacked_to_packed_bb_sptr\n"
		"\n"
		"Convert a stream of unpacked bytes or shorts into a stream of packed bytes or shorts.\n"
		"\n"
		"input: stream of unsigned char; output: stream of unsigned char\n"
		"\n"
		"This is the inverse of gr::blocks::packed_to_unpacked_XX.\n"
		"\n"
		"The low  bits are extracted from each input byte or short. These bits are then packed densely into the output bytes or shorts, such that all 8 or 16 bits of the output bytes or shorts are filled with valid input bits. The right thing is done if bits_per_chunk is not a power of two.\n"
		"\n"
		"The combination of gr::blocks::packed_to_unpacked_XX followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    bits_per_chunk : \n"
		"    endianness : \n"
		""},
	 { (char *)"unpacked_to_packed_bb_sptr_history", _wrap_unpacked_to_packed_bb_sptr_history, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_history(unpacked_to_packed_bb_sptr self) -> unsigned int"},
	 { (char *)"unpacked_to_packed_bb_sptr_declare_sample_delay", _wrap_unpacked_to_packed_bb_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"unpacked_to_packed_bb_sptr_declare_sample_delay(unpacked_to_packed_bb_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"unpacked_to_packed_bb_sptr_sample_delay", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_sample_delay(unpacked_to_packed_bb_sptr self, int which) -> unsigned int"},
	 { (char *)"unpacked_to_packed_bb_sptr_output_multiple", _wrap_unpacked_to_packed_bb_sptr_output_multiple, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_output_multiple(unpacked_to_packed_bb_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_bb_sptr_relative_rate", _wrap_unpacked_to_packed_bb_sptr_relative_rate, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_relative_rate(unpacked_to_packed_bb_sptr self) -> double"},
	 { (char *)"unpacked_to_packed_bb_sptr_start", _wrap_unpacked_to_packed_bb_sptr_start, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_start(unpacked_to_packed_bb_sptr self) -> bool"},
	 { (char *)"unpacked_to_packed_bb_sptr_stop", _wrap_unpacked_to_packed_bb_sptr_stop, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_stop(unpacked_to_packed_bb_sptr self) -> bool"},
	 { (char *)"unpacked_to_packed_bb_sptr_nitems_read", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_nitems_read(unpacked_to_packed_bb_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"unpacked_to_packed_bb_sptr_nitems_written", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_nitems_written(unpacked_to_packed_bb_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"unpacked_to_packed_bb_sptr_max_noutput_items", _wrap_unpacked_to_packed_bb_sptr_max_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_max_noutput_items(unpacked_to_packed_bb_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_bb_sptr_set_max_noutput_items", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_set_max_noutput_items(unpacked_to_packed_bb_sptr self, int m)"},
	 { (char *)"unpacked_to_packed_bb_sptr_unset_max_noutput_items", _wrap_unpacked_to_packed_bb_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_unset_max_noutput_items(unpacked_to_packed_bb_sptr self)"},
	 { (char *)"unpacked_to_packed_bb_sptr_is_set_max_noutput_items", _wrap_unpacked_to_packed_bb_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_is_set_max_noutput_items(unpacked_to_packed_bb_sptr self) -> bool"},
	 { (char *)"unpacked_to_packed_bb_sptr_set_min_noutput_items", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_set_min_noutput_items(unpacked_to_packed_bb_sptr self, int m)"},
	 { (char *)"unpacked_to_packed_bb_sptr_min_noutput_items", _wrap_unpacked_to_packed_bb_sptr_min_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_min_noutput_items(unpacked_to_packed_bb_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_bb_sptr_max_output_buffer", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_max_output_buffer(unpacked_to_packed_bb_sptr self, int i) -> long"},
	 { (char *)"unpacked_to_packed_bb_sptr_set_max_output_buffer", _wrap_unpacked_to_packed_bb_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"unpacked_to_packed_bb_sptr_set_max_output_buffer(unpacked_to_packed_bb_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"unpacked_to_packed_bb_sptr_min_output_buffer", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_min_output_buffer(unpacked_to_packed_bb_sptr self, int i) -> long"},
	 { (char *)"unpacked_to_packed_bb_sptr_set_min_output_buffer", _wrap_unpacked_to_packed_bb_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"unpacked_to_packed_bb_sptr_set_min_output_buffer(unpacked_to_packed_bb_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_noutput_items", _wrap_unpacked_to_packed_bb_sptr_pc_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_pc_noutput_items(unpacked_to_packed_bb_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_noutput_items_avg", _wrap_unpacked_to_packed_bb_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_pc_noutput_items_avg(unpacked_to_packed_bb_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_noutput_items_var", _wrap_unpacked_to_packed_bb_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_pc_noutput_items_var(unpacked_to_packed_bb_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_nproduced", _wrap_unpacked_to_packed_bb_sptr_pc_nproduced, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_pc_nproduced(unpacked_to_packed_bb_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_nproduced_avg", _wrap_unpacked_to_packed_bb_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_pc_nproduced_avg(unpacked_to_packed_bb_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_nproduced_var", _wrap_unpacked_to_packed_bb_sptr_pc_nproduced_var, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_pc_nproduced_var(unpacked_to_packed_bb_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_input_buffers_full", _wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"unpacked_to_packed_bb_sptr_pc_input_buffers_full(unpacked_to_packed_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg", _wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"unpacked_to_packed_bb_sptr_pc_input_buffers_full_avg(unpacked_to_packed_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_input_buffers_full_var", _wrap_unpacked_to_packed_bb_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"unpacked_to_packed_bb_sptr_pc_input_buffers_full_var(unpacked_to_packed_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_output_buffers_full", _wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"unpacked_to_packed_bb_sptr_pc_output_buffers_full(unpacked_to_packed_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg", _wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"unpacked_to_packed_bb_sptr_pc_output_buffers_full_avg(unpacked_to_packed_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_output_buffers_full_var", _wrap_unpacked_to_packed_bb_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"unpacked_to_packed_bb_sptr_pc_output_buffers_full_var(unpacked_to_packed_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_work_time", _wrap_unpacked_to_packed_bb_sptr_pc_work_time, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_pc_work_time(unpacked_to_packed_bb_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_work_time_avg", _wrap_unpacked_to_packed_bb_sptr_pc_work_time_avg, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_pc_work_time_avg(unpacked_to_packed_bb_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_work_time_var", _wrap_unpacked_to_packed_bb_sptr_pc_work_time_var, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_pc_work_time_var(unpacked_to_packed_bb_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_work_time_total", _wrap_unpacked_to_packed_bb_sptr_pc_work_time_total, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_pc_work_time_total(unpacked_to_packed_bb_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_bb_sptr_pc_throughput_avg", _wrap_unpacked_to_packed_bb_sptr_pc_throughput_avg, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_pc_throughput_avg(unpacked_to_packed_bb_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_bb_sptr_set_processor_affinity", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_set_processor_affinity(unpacked_to_packed_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"unpacked_to_packed_bb_sptr_unset_processor_affinity", _wrap_unpacked_to_packed_bb_sptr_unset_processor_affinity, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_unset_processor_affinity(unpacked_to_packed_bb_sptr self)"},
	 { (char *)"unpacked_to_packed_bb_sptr_processor_affinity", _wrap_unpacked_to_packed_bb_sptr_processor_affinity, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_processor_affinity(unpacked_to_packed_bb_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"unpacked_to_packed_bb_sptr_active_thread_priority", _wrap_unpacked_to_packed_bb_sptr_active_thread_priority, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_active_thread_priority(unpacked_to_packed_bb_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_bb_sptr_thread_priority", _wrap_unpacked_to_packed_bb_sptr_thread_priority, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_thread_priority(unpacked_to_packed_bb_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_bb_sptr_set_thread_priority", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_set_thread_priority(unpacked_to_packed_bb_sptr self, int priority) -> int"},
	 { (char *)"unpacked_to_packed_bb_sptr_name", _wrap_unpacked_to_packed_bb_sptr_name, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_name(unpacked_to_packed_bb_sptr self) -> std::string"},
	 { (char *)"unpacked_to_packed_bb_sptr_symbol_name", _wrap_unpacked_to_packed_bb_sptr_symbol_name, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_symbol_name(unpacked_to_packed_bb_sptr self) -> std::string"},
	 { (char *)"unpacked_to_packed_bb_sptr_input_signature", _wrap_unpacked_to_packed_bb_sptr_input_signature, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_input_signature(unpacked_to_packed_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"unpacked_to_packed_bb_sptr_output_signature", _wrap_unpacked_to_packed_bb_sptr_output_signature, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_output_signature(unpacked_to_packed_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"unpacked_to_packed_bb_sptr_unique_id", _wrap_unpacked_to_packed_bb_sptr_unique_id, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_unique_id(unpacked_to_packed_bb_sptr self) -> long"},
	 { (char *)"unpacked_to_packed_bb_sptr_to_basic_block", _wrap_unpacked_to_packed_bb_sptr_to_basic_block, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_to_basic_block(unpacked_to_packed_bb_sptr self) -> basic_block_sptr"},
	 { (char *)"unpacked_to_packed_bb_sptr_check_topology", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_check_topology(unpacked_to_packed_bb_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"unpacked_to_packed_bb_sptr_alias", _wrap_unpacked_to_packed_bb_sptr_alias, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_alias(unpacked_to_packed_bb_sptr self) -> std::string"},
	 { (char *)"unpacked_to_packed_bb_sptr_set_block_alias", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_set_block_alias(unpacked_to_packed_bb_sptr self, std::string name)"},
	 { (char *)"unpacked_to_packed_bb_sptr__post", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr__post(unpacked_to_packed_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"unpacked_to_packed_bb_sptr_message_ports_in", _wrap_unpacked_to_packed_bb_sptr_message_ports_in, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_message_ports_in(unpacked_to_packed_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"unpacked_to_packed_bb_sptr_message_ports_out", _wrap_unpacked_to_packed_bb_sptr_message_ports_out, METH_VARARGS, (char *)"unpacked_to_packed_bb_sptr_message_ports_out(unpacked_to_packed_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"unpacked_to_packed_bb_sptr_message_subscribers", (PyCFunction) _wrap_unpacked_to_packed_bb_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_bb_sptr_message_subscribers(unpacked_to_packed_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"unpacked_to_packed_bb_sptr_swigregister", unpacked_to_packed_bb_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_unpacked_to_packed_ss_sptr", _wrap_new_unpacked_to_packed_ss_sptr, METH_VARARGS, (char *)"\n"
		"unpacked_to_packed_ss_sptr()\n"
		"new_unpacked_to_packed_ss_sptr(unpacked_to_packed_ss p) -> unpacked_to_packed_ss_sptr\n"
		""},
	 { (char *)"unpacked_to_packed_ss_sptr___deref__", _wrap_unpacked_to_packed_ss_sptr___deref__, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr___deref__(unpacked_to_packed_ss_sptr self) -> unpacked_to_packed_ss"},
	 { (char *)"delete_unpacked_to_packed_ss_sptr", _wrap_delete_unpacked_to_packed_ss_sptr, METH_VARARGS, (char *)"delete_unpacked_to_packed_ss_sptr(unpacked_to_packed_ss_sptr self)"},
	 { (char *)"unpacked_to_packed_ss_sptr_make", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"unpacked_to_packed_ss_sptr_make(unpacked_to_packed_ss_sptr self, unsigned int bits_per_chunk, gr::endianness_t endianness) -> unpacked_to_packed_ss_sptr\n"
		"\n"
		"Convert a stream of unpacked bytes or shorts into a stream of packed bytes or shorts.\n"
		"\n"
		"input: stream of short; output: stream of short\n"
		"\n"
		"This is the inverse of gr::blocks::packed_to_unpacked_XX.\n"
		"\n"
		"The low  bits are extracted from each input byte or short. These bits are then packed densely into the output bytes or shorts, such that all 8 or 16 bits of the output bytes or shorts are filled with valid input bits. The right thing is done if bits_per_chunk is not a power of two.\n"
		"\n"
		"The combination of gr::blocks::packed_to_unpacked_XX followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    bits_per_chunk : \n"
		"    endianness : \n"
		""},
	 { (char *)"unpacked_to_packed_ss_sptr_history", _wrap_unpacked_to_packed_ss_sptr_history, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_history(unpacked_to_packed_ss_sptr self) -> unsigned int"},
	 { (char *)"unpacked_to_packed_ss_sptr_declare_sample_delay", _wrap_unpacked_to_packed_ss_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"unpacked_to_packed_ss_sptr_declare_sample_delay(unpacked_to_packed_ss_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"unpacked_to_packed_ss_sptr_sample_delay", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_sample_delay(unpacked_to_packed_ss_sptr self, int which) -> unsigned int"},
	 { (char *)"unpacked_to_packed_ss_sptr_output_multiple", _wrap_unpacked_to_packed_ss_sptr_output_multiple, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_output_multiple(unpacked_to_packed_ss_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_ss_sptr_relative_rate", _wrap_unpacked_to_packed_ss_sptr_relative_rate, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_relative_rate(unpacked_to_packed_ss_sptr self) -> double"},
	 { (char *)"unpacked_to_packed_ss_sptr_start", _wrap_unpacked_to_packed_ss_sptr_start, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_start(unpacked_to_packed_ss_sptr self) -> bool"},
	 { (char *)"unpacked_to_packed_ss_sptr_stop", _wrap_unpacked_to_packed_ss_sptr_stop, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_stop(unpacked_to_packed_ss_sptr self) -> bool"},
	 { (char *)"unpacked_to_packed_ss_sptr_nitems_read", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_nitems_read(unpacked_to_packed_ss_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"unpacked_to_packed_ss_sptr_nitems_written", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_nitems_written(unpacked_to_packed_ss_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"unpacked_to_packed_ss_sptr_max_noutput_items", _wrap_unpacked_to_packed_ss_sptr_max_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_max_noutput_items(unpacked_to_packed_ss_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_ss_sptr_set_max_noutput_items", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_set_max_noutput_items(unpacked_to_packed_ss_sptr self, int m)"},
	 { (char *)"unpacked_to_packed_ss_sptr_unset_max_noutput_items", _wrap_unpacked_to_packed_ss_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_unset_max_noutput_items(unpacked_to_packed_ss_sptr self)"},
	 { (char *)"unpacked_to_packed_ss_sptr_is_set_max_noutput_items", _wrap_unpacked_to_packed_ss_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_is_set_max_noutput_items(unpacked_to_packed_ss_sptr self) -> bool"},
	 { (char *)"unpacked_to_packed_ss_sptr_set_min_noutput_items", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_set_min_noutput_items(unpacked_to_packed_ss_sptr self, int m)"},
	 { (char *)"unpacked_to_packed_ss_sptr_min_noutput_items", _wrap_unpacked_to_packed_ss_sptr_min_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_min_noutput_items(unpacked_to_packed_ss_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_ss_sptr_max_output_buffer", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_max_output_buffer(unpacked_to_packed_ss_sptr self, int i) -> long"},
	 { (char *)"unpacked_to_packed_ss_sptr_set_max_output_buffer", _wrap_unpacked_to_packed_ss_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"unpacked_to_packed_ss_sptr_set_max_output_buffer(unpacked_to_packed_ss_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"unpacked_to_packed_ss_sptr_min_output_buffer", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_min_output_buffer(unpacked_to_packed_ss_sptr self, int i) -> long"},
	 { (char *)"unpacked_to_packed_ss_sptr_set_min_output_buffer", _wrap_unpacked_to_packed_ss_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"unpacked_to_packed_ss_sptr_set_min_output_buffer(unpacked_to_packed_ss_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_noutput_items", _wrap_unpacked_to_packed_ss_sptr_pc_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_pc_noutput_items(unpacked_to_packed_ss_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_noutput_items_avg", _wrap_unpacked_to_packed_ss_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_pc_noutput_items_avg(unpacked_to_packed_ss_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_noutput_items_var", _wrap_unpacked_to_packed_ss_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_pc_noutput_items_var(unpacked_to_packed_ss_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_nproduced", _wrap_unpacked_to_packed_ss_sptr_pc_nproduced, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_pc_nproduced(unpacked_to_packed_ss_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_nproduced_avg", _wrap_unpacked_to_packed_ss_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_pc_nproduced_avg(unpacked_to_packed_ss_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_nproduced_var", _wrap_unpacked_to_packed_ss_sptr_pc_nproduced_var, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_pc_nproduced_var(unpacked_to_packed_ss_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_input_buffers_full", _wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"unpacked_to_packed_ss_sptr_pc_input_buffers_full(unpacked_to_packed_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg", _wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"unpacked_to_packed_ss_sptr_pc_input_buffers_full_avg(unpacked_to_packed_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_input_buffers_full_var", _wrap_unpacked_to_packed_ss_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"unpacked_to_packed_ss_sptr_pc_input_buffers_full_var(unpacked_to_packed_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_output_buffers_full", _wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"unpacked_to_packed_ss_sptr_pc_output_buffers_full(unpacked_to_packed_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg", _wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"unpacked_to_packed_ss_sptr_pc_output_buffers_full_avg(unpacked_to_packed_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_output_buffers_full_var", _wrap_unpacked_to_packed_ss_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"unpacked_to_packed_ss_sptr_pc_output_buffers_full_var(unpacked_to_packed_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_work_time", _wrap_unpacked_to_packed_ss_sptr_pc_work_time, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_pc_work_time(unpacked_to_packed_ss_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_work_time_avg", _wrap_unpacked_to_packed_ss_sptr_pc_work_time_avg, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_pc_work_time_avg(unpacked_to_packed_ss_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_work_time_var", _wrap_unpacked_to_packed_ss_sptr_pc_work_time_var, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_pc_work_time_var(unpacked_to_packed_ss_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_work_time_total", _wrap_unpacked_to_packed_ss_sptr_pc_work_time_total, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_pc_work_time_total(unpacked_to_packed_ss_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ss_sptr_pc_throughput_avg", _wrap_unpacked_to_packed_ss_sptr_pc_throughput_avg, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_pc_throughput_avg(unpacked_to_packed_ss_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ss_sptr_set_processor_affinity", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_set_processor_affinity(unpacked_to_packed_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"unpacked_to_packed_ss_sptr_unset_processor_affinity", _wrap_unpacked_to_packed_ss_sptr_unset_processor_affinity, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_unset_processor_affinity(unpacked_to_packed_ss_sptr self)"},
	 { (char *)"unpacked_to_packed_ss_sptr_processor_affinity", _wrap_unpacked_to_packed_ss_sptr_processor_affinity, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_processor_affinity(unpacked_to_packed_ss_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"unpacked_to_packed_ss_sptr_active_thread_priority", _wrap_unpacked_to_packed_ss_sptr_active_thread_priority, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_active_thread_priority(unpacked_to_packed_ss_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_ss_sptr_thread_priority", _wrap_unpacked_to_packed_ss_sptr_thread_priority, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_thread_priority(unpacked_to_packed_ss_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_ss_sptr_set_thread_priority", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_set_thread_priority(unpacked_to_packed_ss_sptr self, int priority) -> int"},
	 { (char *)"unpacked_to_packed_ss_sptr_name", _wrap_unpacked_to_packed_ss_sptr_name, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_name(unpacked_to_packed_ss_sptr self) -> std::string"},
	 { (char *)"unpacked_to_packed_ss_sptr_symbol_name", _wrap_unpacked_to_packed_ss_sptr_symbol_name, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_symbol_name(unpacked_to_packed_ss_sptr self) -> std::string"},
	 { (char *)"unpacked_to_packed_ss_sptr_input_signature", _wrap_unpacked_to_packed_ss_sptr_input_signature, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_input_signature(unpacked_to_packed_ss_sptr self) -> io_signature_sptr"},
	 { (char *)"unpacked_to_packed_ss_sptr_output_signature", _wrap_unpacked_to_packed_ss_sptr_output_signature, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_output_signature(unpacked_to_packed_ss_sptr self) -> io_signature_sptr"},
	 { (char *)"unpacked_to_packed_ss_sptr_unique_id", _wrap_unpacked_to_packed_ss_sptr_unique_id, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_unique_id(unpacked_to_packed_ss_sptr self) -> long"},
	 { (char *)"unpacked_to_packed_ss_sptr_to_basic_block", _wrap_unpacked_to_packed_ss_sptr_to_basic_block, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_to_basic_block(unpacked_to_packed_ss_sptr self) -> basic_block_sptr"},
	 { (char *)"unpacked_to_packed_ss_sptr_check_topology", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_check_topology(unpacked_to_packed_ss_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"unpacked_to_packed_ss_sptr_alias", _wrap_unpacked_to_packed_ss_sptr_alias, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_alias(unpacked_to_packed_ss_sptr self) -> std::string"},
	 { (char *)"unpacked_to_packed_ss_sptr_set_block_alias", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_set_block_alias(unpacked_to_packed_ss_sptr self, std::string name)"},
	 { (char *)"unpacked_to_packed_ss_sptr__post", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr__post(unpacked_to_packed_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"unpacked_to_packed_ss_sptr_message_ports_in", _wrap_unpacked_to_packed_ss_sptr_message_ports_in, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_message_ports_in(unpacked_to_packed_ss_sptr self) -> swig_int_ptr"},
	 { (char *)"unpacked_to_packed_ss_sptr_message_ports_out", _wrap_unpacked_to_packed_ss_sptr_message_ports_out, METH_VARARGS, (char *)"unpacked_to_packed_ss_sptr_message_ports_out(unpacked_to_packed_ss_sptr self) -> swig_int_ptr"},
	 { (char *)"unpacked_to_packed_ss_sptr_message_subscribers", (PyCFunction) _wrap_unpacked_to_packed_ss_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ss_sptr_message_subscribers(unpacked_to_packed_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"unpacked_to_packed_ss_sptr_swigregister", unpacked_to_packed_ss_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_unpacked_to_packed_ii_sptr", _wrap_new_unpacked_to_packed_ii_sptr, METH_VARARGS, (char *)"\n"
		"unpacked_to_packed_ii_sptr()\n"
		"new_unpacked_to_packed_ii_sptr(unpacked_to_packed_ii p) -> unpacked_to_packed_ii_sptr\n"
		""},
	 { (char *)"unpacked_to_packed_ii_sptr___deref__", _wrap_unpacked_to_packed_ii_sptr___deref__, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr___deref__(unpacked_to_packed_ii_sptr self) -> unpacked_to_packed_ii"},
	 { (char *)"delete_unpacked_to_packed_ii_sptr", _wrap_delete_unpacked_to_packed_ii_sptr, METH_VARARGS, (char *)"delete_unpacked_to_packed_ii_sptr(unpacked_to_packed_ii_sptr self)"},
	 { (char *)"unpacked_to_packed_ii_sptr_make", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"unpacked_to_packed_ii_sptr_make(unpacked_to_packed_ii_sptr self, unsigned int bits_per_chunk, gr::endianness_t endianness) -> unpacked_to_packed_ii_sptr\n"
		"\n"
		"Convert a stream of unpacked bytes or shorts into a stream of packed bytes or shorts.\n"
		"\n"
		"input: stream of int; output: stream of int\n"
		"\n"
		"This is the inverse of gr::blocks::packed_to_unpacked_XX.\n"
		"\n"
		"The low  bits are extracted from each input byte or short. These bits are then packed densely into the output bytes or shorts, such that all 8 or 16 bits of the output bytes or shorts are filled with valid input bits. The right thing is done if bits_per_chunk is not a power of two.\n"
		"\n"
		"The combination of gr::blocks::packed_to_unpacked_XX followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    bits_per_chunk : \n"
		"    endianness : \n"
		""},
	 { (char *)"unpacked_to_packed_ii_sptr_history", _wrap_unpacked_to_packed_ii_sptr_history, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_history(unpacked_to_packed_ii_sptr self) -> unsigned int"},
	 { (char *)"unpacked_to_packed_ii_sptr_declare_sample_delay", _wrap_unpacked_to_packed_ii_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"unpacked_to_packed_ii_sptr_declare_sample_delay(unpacked_to_packed_ii_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"unpacked_to_packed_ii_sptr_sample_delay", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_sample_delay(unpacked_to_packed_ii_sptr self, int which) -> unsigned int"},
	 { (char *)"unpacked_to_packed_ii_sptr_output_multiple", _wrap_unpacked_to_packed_ii_sptr_output_multiple, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_output_multiple(unpacked_to_packed_ii_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_ii_sptr_relative_rate", _wrap_unpacked_to_packed_ii_sptr_relative_rate, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_relative_rate(unpacked_to_packed_ii_sptr self) -> double"},
	 { (char *)"unpacked_to_packed_ii_sptr_start", _wrap_unpacked_to_packed_ii_sptr_start, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_start(unpacked_to_packed_ii_sptr self) -> bool"},
	 { (char *)"unpacked_to_packed_ii_sptr_stop", _wrap_unpacked_to_packed_ii_sptr_stop, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_stop(unpacked_to_packed_ii_sptr self) -> bool"},
	 { (char *)"unpacked_to_packed_ii_sptr_nitems_read", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_nitems_read(unpacked_to_packed_ii_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"unpacked_to_packed_ii_sptr_nitems_written", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_nitems_written(unpacked_to_packed_ii_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"unpacked_to_packed_ii_sptr_max_noutput_items", _wrap_unpacked_to_packed_ii_sptr_max_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_max_noutput_items(unpacked_to_packed_ii_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_ii_sptr_set_max_noutput_items", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_set_max_noutput_items(unpacked_to_packed_ii_sptr self, int m)"},
	 { (char *)"unpacked_to_packed_ii_sptr_unset_max_noutput_items", _wrap_unpacked_to_packed_ii_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_unset_max_noutput_items(unpacked_to_packed_ii_sptr self)"},
	 { (char *)"unpacked_to_packed_ii_sptr_is_set_max_noutput_items", _wrap_unpacked_to_packed_ii_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_is_set_max_noutput_items(unpacked_to_packed_ii_sptr self) -> bool"},
	 { (char *)"unpacked_to_packed_ii_sptr_set_min_noutput_items", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_set_min_noutput_items(unpacked_to_packed_ii_sptr self, int m)"},
	 { (char *)"unpacked_to_packed_ii_sptr_min_noutput_items", _wrap_unpacked_to_packed_ii_sptr_min_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_min_noutput_items(unpacked_to_packed_ii_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_ii_sptr_max_output_buffer", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_max_output_buffer(unpacked_to_packed_ii_sptr self, int i) -> long"},
	 { (char *)"unpacked_to_packed_ii_sptr_set_max_output_buffer", _wrap_unpacked_to_packed_ii_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"unpacked_to_packed_ii_sptr_set_max_output_buffer(unpacked_to_packed_ii_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"unpacked_to_packed_ii_sptr_min_output_buffer", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_min_output_buffer(unpacked_to_packed_ii_sptr self, int i) -> long"},
	 { (char *)"unpacked_to_packed_ii_sptr_set_min_output_buffer", _wrap_unpacked_to_packed_ii_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"unpacked_to_packed_ii_sptr_set_min_output_buffer(unpacked_to_packed_ii_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_noutput_items", _wrap_unpacked_to_packed_ii_sptr_pc_noutput_items, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_pc_noutput_items(unpacked_to_packed_ii_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_noutput_items_avg", _wrap_unpacked_to_packed_ii_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_pc_noutput_items_avg(unpacked_to_packed_ii_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_noutput_items_var", _wrap_unpacked_to_packed_ii_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_pc_noutput_items_var(unpacked_to_packed_ii_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_nproduced", _wrap_unpacked_to_packed_ii_sptr_pc_nproduced, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_pc_nproduced(unpacked_to_packed_ii_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_nproduced_avg", _wrap_unpacked_to_packed_ii_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_pc_nproduced_avg(unpacked_to_packed_ii_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_nproduced_var", _wrap_unpacked_to_packed_ii_sptr_pc_nproduced_var, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_pc_nproduced_var(unpacked_to_packed_ii_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_input_buffers_full", _wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"unpacked_to_packed_ii_sptr_pc_input_buffers_full(unpacked_to_packed_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg", _wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"unpacked_to_packed_ii_sptr_pc_input_buffers_full_avg(unpacked_to_packed_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_input_buffers_full_var", _wrap_unpacked_to_packed_ii_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"unpacked_to_packed_ii_sptr_pc_input_buffers_full_var(unpacked_to_packed_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_output_buffers_full", _wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"unpacked_to_packed_ii_sptr_pc_output_buffers_full(unpacked_to_packed_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg", _wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"unpacked_to_packed_ii_sptr_pc_output_buffers_full_avg(unpacked_to_packed_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_output_buffers_full_var", _wrap_unpacked_to_packed_ii_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"unpacked_to_packed_ii_sptr_pc_output_buffers_full_var(unpacked_to_packed_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_work_time", _wrap_unpacked_to_packed_ii_sptr_pc_work_time, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_pc_work_time(unpacked_to_packed_ii_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_work_time_avg", _wrap_unpacked_to_packed_ii_sptr_pc_work_time_avg, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_pc_work_time_avg(unpacked_to_packed_ii_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_work_time_var", _wrap_unpacked_to_packed_ii_sptr_pc_work_time_var, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_pc_work_time_var(unpacked_to_packed_ii_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_work_time_total", _wrap_unpacked_to_packed_ii_sptr_pc_work_time_total, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_pc_work_time_total(unpacked_to_packed_ii_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ii_sptr_pc_throughput_avg", _wrap_unpacked_to_packed_ii_sptr_pc_throughput_avg, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_pc_throughput_avg(unpacked_to_packed_ii_sptr self) -> float"},
	 { (char *)"unpacked_to_packed_ii_sptr_set_processor_affinity", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_set_processor_affinity(unpacked_to_packed_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"unpacked_to_packed_ii_sptr_unset_processor_affinity", _wrap_unpacked_to_packed_ii_sptr_unset_processor_affinity, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_unset_processor_affinity(unpacked_to_packed_ii_sptr self)"},
	 { (char *)"unpacked_to_packed_ii_sptr_processor_affinity", _wrap_unpacked_to_packed_ii_sptr_processor_affinity, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_processor_affinity(unpacked_to_packed_ii_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"unpacked_to_packed_ii_sptr_active_thread_priority", _wrap_unpacked_to_packed_ii_sptr_active_thread_priority, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_active_thread_priority(unpacked_to_packed_ii_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_ii_sptr_thread_priority", _wrap_unpacked_to_packed_ii_sptr_thread_priority, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_thread_priority(unpacked_to_packed_ii_sptr self) -> int"},
	 { (char *)"unpacked_to_packed_ii_sptr_set_thread_priority", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_set_thread_priority(unpacked_to_packed_ii_sptr self, int priority) -> int"},
	 { (char *)"unpacked_to_packed_ii_sptr_name", _wrap_unpacked_to_packed_ii_sptr_name, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_name(unpacked_to_packed_ii_sptr self) -> std::string"},
	 { (char *)"unpacked_to_packed_ii_sptr_symbol_name", _wrap_unpacked_to_packed_ii_sptr_symbol_name, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_symbol_name(unpacked_to_packed_ii_sptr self) -> std::string"},
	 { (char *)"unpacked_to_packed_ii_sptr_input_signature", _wrap_unpacked_to_packed_ii_sptr_input_signature, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_input_signature(unpacked_to_packed_ii_sptr self) -> io_signature_sptr"},
	 { (char *)"unpacked_to_packed_ii_sptr_output_signature", _wrap_unpacked_to_packed_ii_sptr_output_signature, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_output_signature(unpacked_to_packed_ii_sptr self) -> io_signature_sptr"},
	 { (char *)"unpacked_to_packed_ii_sptr_unique_id", _wrap_unpacked_to_packed_ii_sptr_unique_id, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_unique_id(unpacked_to_packed_ii_sptr self) -> long"},
	 { (char *)"unpacked_to_packed_ii_sptr_to_basic_block", _wrap_unpacked_to_packed_ii_sptr_to_basic_block, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_to_basic_block(unpacked_to_packed_ii_sptr self) -> basic_block_sptr"},
	 { (char *)"unpacked_to_packed_ii_sptr_check_topology", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_check_topology(unpacked_to_packed_ii_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"unpacked_to_packed_ii_sptr_alias", _wrap_unpacked_to_packed_ii_sptr_alias, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_alias(unpacked_to_packed_ii_sptr self) -> std::string"},
	 { (char *)"unpacked_to_packed_ii_sptr_set_block_alias", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_set_block_alias(unpacked_to_packed_ii_sptr self, std::string name)"},
	 { (char *)"unpacked_to_packed_ii_sptr__post", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr__post(unpacked_to_packed_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"unpacked_to_packed_ii_sptr_message_ports_in", _wrap_unpacked_to_packed_ii_sptr_message_ports_in, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_message_ports_in(unpacked_to_packed_ii_sptr self) -> swig_int_ptr"},
	 { (char *)"unpacked_to_packed_ii_sptr_message_ports_out", _wrap_unpacked_to_packed_ii_sptr_message_ports_out, METH_VARARGS, (char *)"unpacked_to_packed_ii_sptr_message_ports_out(unpacked_to_packed_ii_sptr self) -> swig_int_ptr"},
	 { (char *)"unpacked_to_packed_ii_sptr_message_subscribers", (PyCFunction) _wrap_unpacked_to_packed_ii_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"unpacked_to_packed_ii_sptr_message_subscribers(unpacked_to_packed_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"unpacked_to_packed_ii_sptr_swigregister", unpacked_to_packed_ii_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_vco_f_sptr", _wrap_new_vco_f_sptr, METH_VARARGS, (char *)"\n"
		"vco_f_sptr()\n"
		"new_vco_f_sptr(vco_f p) -> vco_f_sptr\n"
		""},
	 { (char *)"vco_f_sptr___deref__", _wrap_vco_f_sptr___deref__, METH_VARARGS, (char *)"vco_f_sptr___deref__(vco_f_sptr self) -> vco_f"},
	 { (char *)"delete_vco_f_sptr", _wrap_delete_vco_f_sptr, METH_VARARGS, (char *)"delete_vco_f_sptr(vco_f_sptr self)"},
	 { (char *)"vco_f_sptr_make", (PyCFunction) _wrap_vco_f_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"vco_f_sptr_make(vco_f_sptr self, double sampling_rate, double sensitivity, double amplitude) -> vco_f_sptr\n"
		"\n"
		"VCO - Voltage controlled oscillator.\n"
		"\n"
		"input: float stream of control voltages; output: float oscillator output\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"VCO - Voltage controlled oscillator.\n"
		"\n"
		"Args:\n"
		"    sampling_rate : sampling rate (Hz)\n"
		"    sensitivity : units are radians/sec/volt\n"
		"    amplitude : output amplitude\n"
		""},
	 { (char *)"vco_f_sptr_history", _wrap_vco_f_sptr_history, METH_VARARGS, (char *)"vco_f_sptr_history(vco_f_sptr self) -> unsigned int"},
	 { (char *)"vco_f_sptr_declare_sample_delay", _wrap_vco_f_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"vco_f_sptr_declare_sample_delay(vco_f_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"vco_f_sptr_sample_delay", (PyCFunction) _wrap_vco_f_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_sample_delay(vco_f_sptr self, int which) -> unsigned int"},
	 { (char *)"vco_f_sptr_output_multiple", _wrap_vco_f_sptr_output_multiple, METH_VARARGS, (char *)"vco_f_sptr_output_multiple(vco_f_sptr self) -> int"},
	 { (char *)"vco_f_sptr_relative_rate", _wrap_vco_f_sptr_relative_rate, METH_VARARGS, (char *)"vco_f_sptr_relative_rate(vco_f_sptr self) -> double"},
	 { (char *)"vco_f_sptr_start", _wrap_vco_f_sptr_start, METH_VARARGS, (char *)"vco_f_sptr_start(vco_f_sptr self) -> bool"},
	 { (char *)"vco_f_sptr_stop", _wrap_vco_f_sptr_stop, METH_VARARGS, (char *)"vco_f_sptr_stop(vco_f_sptr self) -> bool"},
	 { (char *)"vco_f_sptr_nitems_read", (PyCFunction) _wrap_vco_f_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_nitems_read(vco_f_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"vco_f_sptr_nitems_written", (PyCFunction) _wrap_vco_f_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_nitems_written(vco_f_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"vco_f_sptr_max_noutput_items", _wrap_vco_f_sptr_max_noutput_items, METH_VARARGS, (char *)"vco_f_sptr_max_noutput_items(vco_f_sptr self) -> int"},
	 { (char *)"vco_f_sptr_set_max_noutput_items", (PyCFunction) _wrap_vco_f_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_set_max_noutput_items(vco_f_sptr self, int m)"},
	 { (char *)"vco_f_sptr_unset_max_noutput_items", _wrap_vco_f_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"vco_f_sptr_unset_max_noutput_items(vco_f_sptr self)"},
	 { (char *)"vco_f_sptr_is_set_max_noutput_items", _wrap_vco_f_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"vco_f_sptr_is_set_max_noutput_items(vco_f_sptr self) -> bool"},
	 { (char *)"vco_f_sptr_set_min_noutput_items", (PyCFunction) _wrap_vco_f_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_set_min_noutput_items(vco_f_sptr self, int m)"},
	 { (char *)"vco_f_sptr_min_noutput_items", _wrap_vco_f_sptr_min_noutput_items, METH_VARARGS, (char *)"vco_f_sptr_min_noutput_items(vco_f_sptr self) -> int"},
	 { (char *)"vco_f_sptr_max_output_buffer", (PyCFunction) _wrap_vco_f_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_max_output_buffer(vco_f_sptr self, int i) -> long"},
	 { (char *)"vco_f_sptr_set_max_output_buffer", _wrap_vco_f_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"vco_f_sptr_set_max_output_buffer(vco_f_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"vco_f_sptr_min_output_buffer", (PyCFunction) _wrap_vco_f_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_min_output_buffer(vco_f_sptr self, int i) -> long"},
	 { (char *)"vco_f_sptr_set_min_output_buffer", _wrap_vco_f_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"vco_f_sptr_set_min_output_buffer(vco_f_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"vco_f_sptr_pc_noutput_items", _wrap_vco_f_sptr_pc_noutput_items, METH_VARARGS, (char *)"vco_f_sptr_pc_noutput_items(vco_f_sptr self) -> float"},
	 { (char *)"vco_f_sptr_pc_noutput_items_avg", _wrap_vco_f_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"vco_f_sptr_pc_noutput_items_avg(vco_f_sptr self) -> float"},
	 { (char *)"vco_f_sptr_pc_noutput_items_var", _wrap_vco_f_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"vco_f_sptr_pc_noutput_items_var(vco_f_sptr self) -> float"},
	 { (char *)"vco_f_sptr_pc_nproduced", _wrap_vco_f_sptr_pc_nproduced, METH_VARARGS, (char *)"vco_f_sptr_pc_nproduced(vco_f_sptr self) -> float"},
	 { (char *)"vco_f_sptr_pc_nproduced_avg", _wrap_vco_f_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"vco_f_sptr_pc_nproduced_avg(vco_f_sptr self) -> float"},
	 { (char *)"vco_f_sptr_pc_nproduced_var", _wrap_vco_f_sptr_pc_nproduced_var, METH_VARARGS, (char *)"vco_f_sptr_pc_nproduced_var(vco_f_sptr self) -> float"},
	 { (char *)"vco_f_sptr_pc_input_buffers_full", _wrap_vco_f_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"vco_f_sptr_pc_input_buffers_full(vco_f_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_f_sptr_pc_input_buffers_full_avg", _wrap_vco_f_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"vco_f_sptr_pc_input_buffers_full_avg(vco_f_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_f_sptr_pc_input_buffers_full_var", _wrap_vco_f_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"vco_f_sptr_pc_input_buffers_full_var(vco_f_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_f_sptr_pc_output_buffers_full", _wrap_vco_f_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"vco_f_sptr_pc_output_buffers_full(vco_f_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_f_sptr_pc_output_buffers_full_avg", _wrap_vco_f_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"vco_f_sptr_pc_output_buffers_full_avg(vco_f_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_f_sptr_pc_output_buffers_full_var", _wrap_vco_f_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"vco_f_sptr_pc_output_buffers_full_var(vco_f_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_f_sptr_pc_work_time", _wrap_vco_f_sptr_pc_work_time, METH_VARARGS, (char *)"vco_f_sptr_pc_work_time(vco_f_sptr self) -> float"},
	 { (char *)"vco_f_sptr_pc_work_time_avg", _wrap_vco_f_sptr_pc_work_time_avg, METH_VARARGS, (char *)"vco_f_sptr_pc_work_time_avg(vco_f_sptr self) -> float"},
	 { (char *)"vco_f_sptr_pc_work_time_var", _wrap_vco_f_sptr_pc_work_time_var, METH_VARARGS, (char *)"vco_f_sptr_pc_work_time_var(vco_f_sptr self) -> float"},
	 { (char *)"vco_f_sptr_pc_work_time_total", _wrap_vco_f_sptr_pc_work_time_total, METH_VARARGS, (char *)"vco_f_sptr_pc_work_time_total(vco_f_sptr self) -> float"},
	 { (char *)"vco_f_sptr_pc_throughput_avg", _wrap_vco_f_sptr_pc_throughput_avg, METH_VARARGS, (char *)"vco_f_sptr_pc_throughput_avg(vco_f_sptr self) -> float"},
	 { (char *)"vco_f_sptr_set_processor_affinity", (PyCFunction) _wrap_vco_f_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_set_processor_affinity(vco_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"vco_f_sptr_unset_processor_affinity", _wrap_vco_f_sptr_unset_processor_affinity, METH_VARARGS, (char *)"vco_f_sptr_unset_processor_affinity(vco_f_sptr self)"},
	 { (char *)"vco_f_sptr_processor_affinity", _wrap_vco_f_sptr_processor_affinity, METH_VARARGS, (char *)"vco_f_sptr_processor_affinity(vco_f_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"vco_f_sptr_active_thread_priority", _wrap_vco_f_sptr_active_thread_priority, METH_VARARGS, (char *)"vco_f_sptr_active_thread_priority(vco_f_sptr self) -> int"},
	 { (char *)"vco_f_sptr_thread_priority", _wrap_vco_f_sptr_thread_priority, METH_VARARGS, (char *)"vco_f_sptr_thread_priority(vco_f_sptr self) -> int"},
	 { (char *)"vco_f_sptr_set_thread_priority", (PyCFunction) _wrap_vco_f_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_set_thread_priority(vco_f_sptr self, int priority) -> int"},
	 { (char *)"vco_f_sptr_name", _wrap_vco_f_sptr_name, METH_VARARGS, (char *)"vco_f_sptr_name(vco_f_sptr self) -> std::string"},
	 { (char *)"vco_f_sptr_symbol_name", _wrap_vco_f_sptr_symbol_name, METH_VARARGS, (char *)"vco_f_sptr_symbol_name(vco_f_sptr self) -> std::string"},
	 { (char *)"vco_f_sptr_input_signature", _wrap_vco_f_sptr_input_signature, METH_VARARGS, (char *)"vco_f_sptr_input_signature(vco_f_sptr self) -> io_signature_sptr"},
	 { (char *)"vco_f_sptr_output_signature", _wrap_vco_f_sptr_output_signature, METH_VARARGS, (char *)"vco_f_sptr_output_signature(vco_f_sptr self) -> io_signature_sptr"},
	 { (char *)"vco_f_sptr_unique_id", _wrap_vco_f_sptr_unique_id, METH_VARARGS, (char *)"vco_f_sptr_unique_id(vco_f_sptr self) -> long"},
	 { (char *)"vco_f_sptr_to_basic_block", _wrap_vco_f_sptr_to_basic_block, METH_VARARGS, (char *)"vco_f_sptr_to_basic_block(vco_f_sptr self) -> basic_block_sptr"},
	 { (char *)"vco_f_sptr_check_topology", (PyCFunction) _wrap_vco_f_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_check_topology(vco_f_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"vco_f_sptr_alias", _wrap_vco_f_sptr_alias, METH_VARARGS, (char *)"vco_f_sptr_alias(vco_f_sptr self) -> std::string"},
	 { (char *)"vco_f_sptr_set_block_alias", (PyCFunction) _wrap_vco_f_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_set_block_alias(vco_f_sptr self, std::string name)"},
	 { (char *)"vco_f_sptr__post", (PyCFunction) _wrap_vco_f_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr__post(vco_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"vco_f_sptr_message_ports_in", _wrap_vco_f_sptr_message_ports_in, METH_VARARGS, (char *)"vco_f_sptr_message_ports_in(vco_f_sptr self) -> swig_int_ptr"},
	 { (char *)"vco_f_sptr_message_ports_out", _wrap_vco_f_sptr_message_ports_out, METH_VARARGS, (char *)"vco_f_sptr_message_ports_out(vco_f_sptr self) -> swig_int_ptr"},
	 { (char *)"vco_f_sptr_message_subscribers", (PyCFunction) _wrap_vco_f_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"vco_f_sptr_message_subscribers(vco_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"vco_f_sptr_swigregister", vco_f_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_vco_c_sptr", _wrap_new_vco_c_sptr, METH_VARARGS, (char *)"\n"
		"vco_c_sptr()\n"
		"new_vco_c_sptr(vco_c p) -> vco_c_sptr\n"
		""},
	 { (char *)"vco_c_sptr___deref__", _wrap_vco_c_sptr___deref__, METH_VARARGS, (char *)"vco_c_sptr___deref__(vco_c_sptr self) -> vco_c"},
	 { (char *)"delete_vco_c_sptr", _wrap_delete_vco_c_sptr, METH_VARARGS, (char *)"delete_vco_c_sptr(vco_c_sptr self)"},
	 { (char *)"vco_c_sptr_make", (PyCFunction) _wrap_vco_c_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"vco_c_sptr_make(vco_c_sptr self, double sampling_rate, double sensitivity, double amplitude) -> vco_c_sptr\n"
		"\n"
		"VCO - Voltage controlled oscillator.\n"
		"\n"
		"input: float stream of control voltages; output: complex oscillator output\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"VCO - Voltage controlled oscillator.\n"
		"\n"
		"Args:\n"
		"    sampling_rate : sampling rate (Hz)\n"
		"    sensitivity : units are radians/sec/volt\n"
		"    amplitude : output amplitude\n"
		""},
	 { (char *)"vco_c_sptr_history", _wrap_vco_c_sptr_history, METH_VARARGS, (char *)"vco_c_sptr_history(vco_c_sptr self) -> unsigned int"},
	 { (char *)"vco_c_sptr_declare_sample_delay", _wrap_vco_c_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"vco_c_sptr_declare_sample_delay(vco_c_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"vco_c_sptr_sample_delay", (PyCFunction) _wrap_vco_c_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_sample_delay(vco_c_sptr self, int which) -> unsigned int"},
	 { (char *)"vco_c_sptr_output_multiple", _wrap_vco_c_sptr_output_multiple, METH_VARARGS, (char *)"vco_c_sptr_output_multiple(vco_c_sptr self) -> int"},
	 { (char *)"vco_c_sptr_relative_rate", _wrap_vco_c_sptr_relative_rate, METH_VARARGS, (char *)"vco_c_sptr_relative_rate(vco_c_sptr self) -> double"},
	 { (char *)"vco_c_sptr_start", _wrap_vco_c_sptr_start, METH_VARARGS, (char *)"vco_c_sptr_start(vco_c_sptr self) -> bool"},
	 { (char *)"vco_c_sptr_stop", _wrap_vco_c_sptr_stop, METH_VARARGS, (char *)"vco_c_sptr_stop(vco_c_sptr self) -> bool"},
	 { (char *)"vco_c_sptr_nitems_read", (PyCFunction) _wrap_vco_c_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_nitems_read(vco_c_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"vco_c_sptr_nitems_written", (PyCFunction) _wrap_vco_c_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_nitems_written(vco_c_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"vco_c_sptr_max_noutput_items", _wrap_vco_c_sptr_max_noutput_items, METH_VARARGS, (char *)"vco_c_sptr_max_noutput_items(vco_c_sptr self) -> int"},
	 { (char *)"vco_c_sptr_set_max_noutput_items", (PyCFunction) _wrap_vco_c_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_set_max_noutput_items(vco_c_sptr self, int m)"},
	 { (char *)"vco_c_sptr_unset_max_noutput_items", _wrap_vco_c_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"vco_c_sptr_unset_max_noutput_items(vco_c_sptr self)"},
	 { (char *)"vco_c_sptr_is_set_max_noutput_items", _wrap_vco_c_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"vco_c_sptr_is_set_max_noutput_items(vco_c_sptr self) -> bool"},
	 { (char *)"vco_c_sptr_set_min_noutput_items", (PyCFunction) _wrap_vco_c_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_set_min_noutput_items(vco_c_sptr self, int m)"},
	 { (char *)"vco_c_sptr_min_noutput_items", _wrap_vco_c_sptr_min_noutput_items, METH_VARARGS, (char *)"vco_c_sptr_min_noutput_items(vco_c_sptr self) -> int"},
	 { (char *)"vco_c_sptr_max_output_buffer", (PyCFunction) _wrap_vco_c_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_max_output_buffer(vco_c_sptr self, int i) -> long"},
	 { (char *)"vco_c_sptr_set_max_output_buffer", _wrap_vco_c_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"vco_c_sptr_set_max_output_buffer(vco_c_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"vco_c_sptr_min_output_buffer", (PyCFunction) _wrap_vco_c_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_min_output_buffer(vco_c_sptr self, int i) -> long"},
	 { (char *)"vco_c_sptr_set_min_output_buffer", _wrap_vco_c_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"vco_c_sptr_set_min_output_buffer(vco_c_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"vco_c_sptr_pc_noutput_items", _wrap_vco_c_sptr_pc_noutput_items, METH_VARARGS, (char *)"vco_c_sptr_pc_noutput_items(vco_c_sptr self) -> float"},
	 { (char *)"vco_c_sptr_pc_noutput_items_avg", _wrap_vco_c_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"vco_c_sptr_pc_noutput_items_avg(vco_c_sptr self) -> float"},
	 { (char *)"vco_c_sptr_pc_noutput_items_var", _wrap_vco_c_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"vco_c_sptr_pc_noutput_items_var(vco_c_sptr self) -> float"},
	 { (char *)"vco_c_sptr_pc_nproduced", _wrap_vco_c_sptr_pc_nproduced, METH_VARARGS, (char *)"vco_c_sptr_pc_nproduced(vco_c_sptr self) -> float"},
	 { (char *)"vco_c_sptr_pc_nproduced_avg", _wrap_vco_c_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"vco_c_sptr_pc_nproduced_avg(vco_c_sptr self) -> float"},
	 { (char *)"vco_c_sptr_pc_nproduced_var", _wrap_vco_c_sptr_pc_nproduced_var, METH_VARARGS, (char *)"vco_c_sptr_pc_nproduced_var(vco_c_sptr self) -> float"},
	 { (char *)"vco_c_sptr_pc_input_buffers_full", _wrap_vco_c_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"vco_c_sptr_pc_input_buffers_full(vco_c_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_c_sptr_pc_input_buffers_full_avg", _wrap_vco_c_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"vco_c_sptr_pc_input_buffers_full_avg(vco_c_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_c_sptr_pc_input_buffers_full_var", _wrap_vco_c_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"vco_c_sptr_pc_input_buffers_full_var(vco_c_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_c_sptr_pc_output_buffers_full", _wrap_vco_c_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"vco_c_sptr_pc_output_buffers_full(vco_c_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_c_sptr_pc_output_buffers_full_avg", _wrap_vco_c_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"vco_c_sptr_pc_output_buffers_full_avg(vco_c_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_c_sptr_pc_output_buffers_full_var", _wrap_vco_c_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"vco_c_sptr_pc_output_buffers_full_var(vco_c_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"vco_c_sptr_pc_work_time", _wrap_vco_c_sptr_pc_work_time, METH_VARARGS, (char *)"vco_c_sptr_pc_work_time(vco_c_sptr self) -> float"},
	 { (char *)"vco_c_sptr_pc_work_time_avg", _wrap_vco_c_sptr_pc_work_time_avg, METH_VARARGS, (char *)"vco_c_sptr_pc_work_time_avg(vco_c_sptr self) -> float"},
	 { (char *)"vco_c_sptr_pc_work_time_var", _wrap_vco_c_sptr_pc_work_time_var, METH_VARARGS, (char *)"vco_c_sptr_pc_work_time_var(vco_c_sptr self) -> float"},
	 { (char *)"vco_c_sptr_pc_work_time_total", _wrap_vco_c_sptr_pc_work_time_total, METH_VARARGS, (char *)"vco_c_sptr_pc_work_time_total(vco_c_sptr self) -> float"},
	 { (char *)"vco_c_sptr_pc_throughput_avg", _wrap_vco_c_sptr_pc_throughput_avg, METH_VARARGS, (char *)"vco_c_sptr_pc_throughput_avg(vco_c_sptr self) -> float"},
	 { (char *)"vco_c_sptr_set_processor_affinity", (PyCFunction) _wrap_vco_c_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_set_processor_affinity(vco_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"vco_c_sptr_unset_processor_affinity", _wrap_vco_c_sptr_unset_processor_affinity, METH_VARARGS, (char *)"vco_c_sptr_unset_processor_affinity(vco_c_sptr self)"},
	 { (char *)"vco_c_sptr_processor_affinity", _wrap_vco_c_sptr_processor_affinity, METH_VARARGS, (char *)"vco_c_sptr_processor_affinity(vco_c_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"vco_c_sptr_active_thread_priority", _wrap_vco_c_sptr_active_thread_priority, METH_VARARGS, (char *)"vco_c_sptr_active_thread_priority(vco_c_sptr self) -> int"},
	 { (char *)"vco_c_sptr_thread_priority", _wrap_vco_c_sptr_thread_priority, METH_VARARGS, (char *)"vco_c_sptr_thread_priority(vco_c_sptr self) -> int"},
	 { (char *)"vco_c_sptr_set_thread_priority", (PyCFunction) _wrap_vco_c_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_set_thread_priority(vco_c_sptr self, int priority) -> int"},
	 { (char *)"vco_c_sptr_name", _wrap_vco_c_sptr_name, METH_VARARGS, (char *)"vco_c_sptr_name(vco_c_sptr self) -> std::string"},
	 { (char *)"vco_c_sptr_symbol_name", _wrap_vco_c_sptr_symbol_name, METH_VARARGS, (char *)"vco_c_sptr_symbol_name(vco_c_sptr self) -> std::string"},
	 { (char *)"vco_c_sptr_input_signature", _wrap_vco_c_sptr_input_signature, METH_VARARGS, (char *)"vco_c_sptr_input_signature(vco_c_sptr self) -> io_signature_sptr"},
	 { (char *)"vco_c_sptr_output_signature", _wrap_vco_c_sptr_output_signature, METH_VARARGS, (char *)"vco_c_sptr_output_signature(vco_c_sptr self) -> io_signature_sptr"},
	 { (char *)"vco_c_sptr_unique_id", _wrap_vco_c_sptr_unique_id, METH_VARARGS, (char *)"vco_c_sptr_unique_id(vco_c_sptr self) -> long"},
	 { (char *)"vco_c_sptr_to_basic_block", _wrap_vco_c_sptr_to_basic_block, METH_VARARGS, (char *)"vco_c_sptr_to_basic_block(vco_c_sptr self) -> basic_block_sptr"},
	 { (char *)"vco_c_sptr_check_topology", (PyCFunction) _wrap_vco_c_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_check_topology(vco_c_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"vco_c_sptr_alias", _wrap_vco_c_sptr_alias, METH_VARARGS, (char *)"vco_c_sptr_alias(vco_c_sptr self) -> std::string"},
	 { (char *)"vco_c_sptr_set_block_alias", (PyCFunction) _wrap_vco_c_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_set_block_alias(vco_c_sptr self, std::string name)"},
	 { (char *)"vco_c_sptr__post", (PyCFunction) _wrap_vco_c_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr__post(vco_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"vco_c_sptr_message_ports_in", _wrap_vco_c_sptr_message_ports_in, METH_VARARGS, (char *)"vco_c_sptr_message_ports_in(vco_c_sptr self) -> swig_int_ptr"},
	 { (char *)"vco_c_sptr_message_ports_out", _wrap_vco_c_sptr_message_ports_out, METH_VARARGS, (char *)"vco_c_sptr_message_ports_out(vco_c_sptr self) -> swig_int_ptr"},
	 { (char *)"vco_c_sptr_message_subscribers", (PyCFunction) _wrap_vco_c_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"vco_c_sptr_message_subscribers(vco_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"vco_c_sptr_swigregister", vco_c_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_xor_bb_sptr", _wrap_new_xor_bb_sptr, METH_VARARGS, (char *)"\n"
		"xor_bb_sptr()\n"
		"new_xor_bb_sptr(xor_bb p) -> xor_bb_sptr\n"
		""},
	 { (char *)"xor_bb_sptr___deref__", _wrap_xor_bb_sptr___deref__, METH_VARARGS, (char *)"xor_bb_sptr___deref__(xor_bb_sptr self) -> xor_bb"},
	 { (char *)"delete_xor_bb_sptr", _wrap_delete_xor_bb_sptr, METH_VARARGS, (char *)"delete_xor_bb_sptr(xor_bb_sptr self)"},
	 { (char *)"xor_bb_sptr_make", (PyCFunction) _wrap_xor_bb_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"xor_bb_sptr_make(xor_bb_sptr self, size_t vlen=1) -> xor_bb_sptr\n"
		"\n"
		"output = input_0 ^ input_1 ^ , ... ^ input_N)\n"
		"\n"
		"Bitwise boolean xor across all input streams.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    vlen : \n"
		""},
	 { (char *)"xor_bb_sptr_history", _wrap_xor_bb_sptr_history, METH_VARARGS, (char *)"xor_bb_sptr_history(xor_bb_sptr self) -> unsigned int"},
	 { (char *)"xor_bb_sptr_declare_sample_delay", _wrap_xor_bb_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"xor_bb_sptr_declare_sample_delay(xor_bb_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"xor_bb_sptr_sample_delay", (PyCFunction) _wrap_xor_bb_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_sample_delay(xor_bb_sptr self, int which) -> unsigned int"},
	 { (char *)"xor_bb_sptr_output_multiple", _wrap_xor_bb_sptr_output_multiple, METH_VARARGS, (char *)"xor_bb_sptr_output_multiple(xor_bb_sptr self) -> int"},
	 { (char *)"xor_bb_sptr_relative_rate", _wrap_xor_bb_sptr_relative_rate, METH_VARARGS, (char *)"xor_bb_sptr_relative_rate(xor_bb_sptr self) -> double"},
	 { (char *)"xor_bb_sptr_start", _wrap_xor_bb_sptr_start, METH_VARARGS, (char *)"xor_bb_sptr_start(xor_bb_sptr self) -> bool"},
	 { (char *)"xor_bb_sptr_stop", _wrap_xor_bb_sptr_stop, METH_VARARGS, (char *)"xor_bb_sptr_stop(xor_bb_sptr self) -> bool"},
	 { (char *)"xor_bb_sptr_nitems_read", (PyCFunction) _wrap_xor_bb_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_nitems_read(xor_bb_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"xor_bb_sptr_nitems_written", (PyCFunction) _wrap_xor_bb_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_nitems_written(xor_bb_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"xor_bb_sptr_max_noutput_items", _wrap_xor_bb_sptr_max_noutput_items, METH_VARARGS, (char *)"xor_bb_sptr_max_noutput_items(xor_bb_sptr self) -> int"},
	 { (char *)"xor_bb_sptr_set_max_noutput_items", (PyCFunction) _wrap_xor_bb_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_set_max_noutput_items(xor_bb_sptr self, int m)"},
	 { (char *)"xor_bb_sptr_unset_max_noutput_items", _wrap_xor_bb_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"xor_bb_sptr_unset_max_noutput_items(xor_bb_sptr self)"},
	 { (char *)"xor_bb_sptr_is_set_max_noutput_items", _wrap_xor_bb_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"xor_bb_sptr_is_set_max_noutput_items(xor_bb_sptr self) -> bool"},
	 { (char *)"xor_bb_sptr_set_min_noutput_items", (PyCFunction) _wrap_xor_bb_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_set_min_noutput_items(xor_bb_sptr self, int m)"},
	 { (char *)"xor_bb_sptr_min_noutput_items", _wrap_xor_bb_sptr_min_noutput_items, METH_VARARGS, (char *)"xor_bb_sptr_min_noutput_items(xor_bb_sptr self) -> int"},
	 { (char *)"xor_bb_sptr_max_output_buffer", (PyCFunction) _wrap_xor_bb_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_max_output_buffer(xor_bb_sptr self, int i) -> long"},
	 { (char *)"xor_bb_sptr_set_max_output_buffer", _wrap_xor_bb_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"xor_bb_sptr_set_max_output_buffer(xor_bb_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"xor_bb_sptr_min_output_buffer", (PyCFunction) _wrap_xor_bb_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_min_output_buffer(xor_bb_sptr self, int i) -> long"},
	 { (char *)"xor_bb_sptr_set_min_output_buffer", _wrap_xor_bb_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"xor_bb_sptr_set_min_output_buffer(xor_bb_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"xor_bb_sptr_pc_noutput_items", _wrap_xor_bb_sptr_pc_noutput_items, METH_VARARGS, (char *)"xor_bb_sptr_pc_noutput_items(xor_bb_sptr self) -> float"},
	 { (char *)"xor_bb_sptr_pc_noutput_items_avg", _wrap_xor_bb_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"xor_bb_sptr_pc_noutput_items_avg(xor_bb_sptr self) -> float"},
	 { (char *)"xor_bb_sptr_pc_noutput_items_var", _wrap_xor_bb_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"xor_bb_sptr_pc_noutput_items_var(xor_bb_sptr self) -> float"},
	 { (char *)"xor_bb_sptr_pc_nproduced", _wrap_xor_bb_sptr_pc_nproduced, METH_VARARGS, (char *)"xor_bb_sptr_pc_nproduced(xor_bb_sptr self) -> float"},
	 { (char *)"xor_bb_sptr_pc_nproduced_avg", _wrap_xor_bb_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"xor_bb_sptr_pc_nproduced_avg(xor_bb_sptr self) -> float"},
	 { (char *)"xor_bb_sptr_pc_nproduced_var", _wrap_xor_bb_sptr_pc_nproduced_var, METH_VARARGS, (char *)"xor_bb_sptr_pc_nproduced_var(xor_bb_sptr self) -> float"},
	 { (char *)"xor_bb_sptr_pc_input_buffers_full", _wrap_xor_bb_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"xor_bb_sptr_pc_input_buffers_full(xor_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_bb_sptr_pc_input_buffers_full_avg", _wrap_xor_bb_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"xor_bb_sptr_pc_input_buffers_full_avg(xor_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_bb_sptr_pc_input_buffers_full_var", _wrap_xor_bb_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"xor_bb_sptr_pc_input_buffers_full_var(xor_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_bb_sptr_pc_output_buffers_full", _wrap_xor_bb_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"xor_bb_sptr_pc_output_buffers_full(xor_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_bb_sptr_pc_output_buffers_full_avg", _wrap_xor_bb_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"xor_bb_sptr_pc_output_buffers_full_avg(xor_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_bb_sptr_pc_output_buffers_full_var", _wrap_xor_bb_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"xor_bb_sptr_pc_output_buffers_full_var(xor_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_bb_sptr_pc_work_time", _wrap_xor_bb_sptr_pc_work_time, METH_VARARGS, (char *)"xor_bb_sptr_pc_work_time(xor_bb_sptr self) -> float"},
	 { (char *)"xor_bb_sptr_pc_work_time_avg", _wrap_xor_bb_sptr_pc_work_time_avg, METH_VARARGS, (char *)"xor_bb_sptr_pc_work_time_avg(xor_bb_sptr self) -> float"},
	 { (char *)"xor_bb_sptr_pc_work_time_var", _wrap_xor_bb_sptr_pc_work_time_var, METH_VARARGS, (char *)"xor_bb_sptr_pc_work_time_var(xor_bb_sptr self) -> float"},
	 { (char *)"xor_bb_sptr_pc_work_time_total", _wrap_xor_bb_sptr_pc_work_time_total, METH_VARARGS, (char *)"xor_bb_sptr_pc_work_time_total(xor_bb_sptr self) -> float"},
	 { (char *)"xor_bb_sptr_pc_throughput_avg", _wrap_xor_bb_sptr_pc_throughput_avg, METH_VARARGS, (char *)"xor_bb_sptr_pc_throughput_avg(xor_bb_sptr self) -> float"},
	 { (char *)"xor_bb_sptr_set_processor_affinity", (PyCFunction) _wrap_xor_bb_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_set_processor_affinity(xor_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"xor_bb_sptr_unset_processor_affinity", _wrap_xor_bb_sptr_unset_processor_affinity, METH_VARARGS, (char *)"xor_bb_sptr_unset_processor_affinity(xor_bb_sptr self)"},
	 { (char *)"xor_bb_sptr_processor_affinity", _wrap_xor_bb_sptr_processor_affinity, METH_VARARGS, (char *)"xor_bb_sptr_processor_affinity(xor_bb_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"xor_bb_sptr_active_thread_priority", _wrap_xor_bb_sptr_active_thread_priority, METH_VARARGS, (char *)"xor_bb_sptr_active_thread_priority(xor_bb_sptr self) -> int"},
	 { (char *)"xor_bb_sptr_thread_priority", _wrap_xor_bb_sptr_thread_priority, METH_VARARGS, (char *)"xor_bb_sptr_thread_priority(xor_bb_sptr self) -> int"},
	 { (char *)"xor_bb_sptr_set_thread_priority", (PyCFunction) _wrap_xor_bb_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_set_thread_priority(xor_bb_sptr self, int priority) -> int"},
	 { (char *)"xor_bb_sptr_name", _wrap_xor_bb_sptr_name, METH_VARARGS, (char *)"xor_bb_sptr_name(xor_bb_sptr self) -> std::string"},
	 { (char *)"xor_bb_sptr_symbol_name", _wrap_xor_bb_sptr_symbol_name, METH_VARARGS, (char *)"xor_bb_sptr_symbol_name(xor_bb_sptr self) -> std::string"},
	 { (char *)"xor_bb_sptr_input_signature", _wrap_xor_bb_sptr_input_signature, METH_VARARGS, (char *)"xor_bb_sptr_input_signature(xor_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"xor_bb_sptr_output_signature", _wrap_xor_bb_sptr_output_signature, METH_VARARGS, (char *)"xor_bb_sptr_output_signature(xor_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"xor_bb_sptr_unique_id", _wrap_xor_bb_sptr_unique_id, METH_VARARGS, (char *)"xor_bb_sptr_unique_id(xor_bb_sptr self) -> long"},
	 { (char *)"xor_bb_sptr_to_basic_block", _wrap_xor_bb_sptr_to_basic_block, METH_VARARGS, (char *)"xor_bb_sptr_to_basic_block(xor_bb_sptr self) -> basic_block_sptr"},
	 { (char *)"xor_bb_sptr_check_topology", (PyCFunction) _wrap_xor_bb_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_check_topology(xor_bb_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"xor_bb_sptr_alias", _wrap_xor_bb_sptr_alias, METH_VARARGS, (char *)"xor_bb_sptr_alias(xor_bb_sptr self) -> std::string"},
	 { (char *)"xor_bb_sptr_set_block_alias", (PyCFunction) _wrap_xor_bb_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_set_block_alias(xor_bb_sptr self, std::string name)"},
	 { (char *)"xor_bb_sptr__post", (PyCFunction) _wrap_xor_bb_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr__post(xor_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"xor_bb_sptr_message_ports_in", _wrap_xor_bb_sptr_message_ports_in, METH_VARARGS, (char *)"xor_bb_sptr_message_ports_in(xor_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"xor_bb_sptr_message_ports_out", _wrap_xor_bb_sptr_message_ports_out, METH_VARARGS, (char *)"xor_bb_sptr_message_ports_out(xor_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"xor_bb_sptr_message_subscribers", (PyCFunction) _wrap_xor_bb_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"xor_bb_sptr_message_subscribers(xor_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"xor_bb_sptr_swigregister", xor_bb_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_xor_ss_sptr", _wrap_new_xor_ss_sptr, METH_VARARGS, (char *)"\n"
		"xor_ss_sptr()\n"
		"new_xor_ss_sptr(xor_ss p) -> xor_ss_sptr\n"
		""},
	 { (char *)"xor_ss_sptr___deref__", _wrap_xor_ss_sptr___deref__, METH_VARARGS, (char *)"xor_ss_sptr___deref__(xor_ss_sptr self) -> xor_ss"},
	 { (char *)"delete_xor_ss_sptr", _wrap_delete_xor_ss_sptr, METH_VARARGS, (char *)"delete_xor_ss_sptr(xor_ss_sptr self)"},
	 { (char *)"xor_ss_sptr_make", (PyCFunction) _wrap_xor_ss_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"xor_ss_sptr_make(xor_ss_sptr self, size_t vlen=1) -> xor_ss_sptr\n"
		"\n"
		"output = input_0 ^ input_1 ^ , ... ^ input_N)\n"
		"\n"
		"Bitwise boolean xor across all input streams.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    vlen : \n"
		""},
	 { (char *)"xor_ss_sptr_history", _wrap_xor_ss_sptr_history, METH_VARARGS, (char *)"xor_ss_sptr_history(xor_ss_sptr self) -> unsigned int"},
	 { (char *)"xor_ss_sptr_declare_sample_delay", _wrap_xor_ss_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"xor_ss_sptr_declare_sample_delay(xor_ss_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"xor_ss_sptr_sample_delay", (PyCFunction) _wrap_xor_ss_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_sample_delay(xor_ss_sptr self, int which) -> unsigned int"},
	 { (char *)"xor_ss_sptr_output_multiple", _wrap_xor_ss_sptr_output_multiple, METH_VARARGS, (char *)"xor_ss_sptr_output_multiple(xor_ss_sptr self) -> int"},
	 { (char *)"xor_ss_sptr_relative_rate", _wrap_xor_ss_sptr_relative_rate, METH_VARARGS, (char *)"xor_ss_sptr_relative_rate(xor_ss_sptr self) -> double"},
	 { (char *)"xor_ss_sptr_start", _wrap_xor_ss_sptr_start, METH_VARARGS, (char *)"xor_ss_sptr_start(xor_ss_sptr self) -> bool"},
	 { (char *)"xor_ss_sptr_stop", _wrap_xor_ss_sptr_stop, METH_VARARGS, (char *)"xor_ss_sptr_stop(xor_ss_sptr self) -> bool"},
	 { (char *)"xor_ss_sptr_nitems_read", (PyCFunction) _wrap_xor_ss_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_nitems_read(xor_ss_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"xor_ss_sptr_nitems_written", (PyCFunction) _wrap_xor_ss_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_nitems_written(xor_ss_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"xor_ss_sptr_max_noutput_items", _wrap_xor_ss_sptr_max_noutput_items, METH_VARARGS, (char *)"xor_ss_sptr_max_noutput_items(xor_ss_sptr self) -> int"},
	 { (char *)"xor_ss_sptr_set_max_noutput_items", (PyCFunction) _wrap_xor_ss_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_set_max_noutput_items(xor_ss_sptr self, int m)"},
	 { (char *)"xor_ss_sptr_unset_max_noutput_items", _wrap_xor_ss_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"xor_ss_sptr_unset_max_noutput_items(xor_ss_sptr self)"},
	 { (char *)"xor_ss_sptr_is_set_max_noutput_items", _wrap_xor_ss_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"xor_ss_sptr_is_set_max_noutput_items(xor_ss_sptr self) -> bool"},
	 { (char *)"xor_ss_sptr_set_min_noutput_items", (PyCFunction) _wrap_xor_ss_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_set_min_noutput_items(xor_ss_sptr self, int m)"},
	 { (char *)"xor_ss_sptr_min_noutput_items", _wrap_xor_ss_sptr_min_noutput_items, METH_VARARGS, (char *)"xor_ss_sptr_min_noutput_items(xor_ss_sptr self) -> int"},
	 { (char *)"xor_ss_sptr_max_output_buffer", (PyCFunction) _wrap_xor_ss_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_max_output_buffer(xor_ss_sptr self, int i) -> long"},
	 { (char *)"xor_ss_sptr_set_max_output_buffer", _wrap_xor_ss_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"xor_ss_sptr_set_max_output_buffer(xor_ss_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"xor_ss_sptr_min_output_buffer", (PyCFunction) _wrap_xor_ss_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_min_output_buffer(xor_ss_sptr self, int i) -> long"},
	 { (char *)"xor_ss_sptr_set_min_output_buffer", _wrap_xor_ss_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"xor_ss_sptr_set_min_output_buffer(xor_ss_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"xor_ss_sptr_pc_noutput_items", _wrap_xor_ss_sptr_pc_noutput_items, METH_VARARGS, (char *)"xor_ss_sptr_pc_noutput_items(xor_ss_sptr self) -> float"},
	 { (char *)"xor_ss_sptr_pc_noutput_items_avg", _wrap_xor_ss_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"xor_ss_sptr_pc_noutput_items_avg(xor_ss_sptr self) -> float"},
	 { (char *)"xor_ss_sptr_pc_noutput_items_var", _wrap_xor_ss_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"xor_ss_sptr_pc_noutput_items_var(xor_ss_sptr self) -> float"},
	 { (char *)"xor_ss_sptr_pc_nproduced", _wrap_xor_ss_sptr_pc_nproduced, METH_VARARGS, (char *)"xor_ss_sptr_pc_nproduced(xor_ss_sptr self) -> float"},
	 { (char *)"xor_ss_sptr_pc_nproduced_avg", _wrap_xor_ss_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"xor_ss_sptr_pc_nproduced_avg(xor_ss_sptr self) -> float"},
	 { (char *)"xor_ss_sptr_pc_nproduced_var", _wrap_xor_ss_sptr_pc_nproduced_var, METH_VARARGS, (char *)"xor_ss_sptr_pc_nproduced_var(xor_ss_sptr self) -> float"},
	 { (char *)"xor_ss_sptr_pc_input_buffers_full", _wrap_xor_ss_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"xor_ss_sptr_pc_input_buffers_full(xor_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ss_sptr_pc_input_buffers_full_avg", _wrap_xor_ss_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"xor_ss_sptr_pc_input_buffers_full_avg(xor_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ss_sptr_pc_input_buffers_full_var", _wrap_xor_ss_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"xor_ss_sptr_pc_input_buffers_full_var(xor_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ss_sptr_pc_output_buffers_full", _wrap_xor_ss_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"xor_ss_sptr_pc_output_buffers_full(xor_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ss_sptr_pc_output_buffers_full_avg", _wrap_xor_ss_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"xor_ss_sptr_pc_output_buffers_full_avg(xor_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ss_sptr_pc_output_buffers_full_var", _wrap_xor_ss_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"xor_ss_sptr_pc_output_buffers_full_var(xor_ss_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ss_sptr_pc_work_time", _wrap_xor_ss_sptr_pc_work_time, METH_VARARGS, (char *)"xor_ss_sptr_pc_work_time(xor_ss_sptr self) -> float"},
	 { (char *)"xor_ss_sptr_pc_work_time_avg", _wrap_xor_ss_sptr_pc_work_time_avg, METH_VARARGS, (char *)"xor_ss_sptr_pc_work_time_avg(xor_ss_sptr self) -> float"},
	 { (char *)"xor_ss_sptr_pc_work_time_var", _wrap_xor_ss_sptr_pc_work_time_var, METH_VARARGS, (char *)"xor_ss_sptr_pc_work_time_var(xor_ss_sptr self) -> float"},
	 { (char *)"xor_ss_sptr_pc_work_time_total", _wrap_xor_ss_sptr_pc_work_time_total, METH_VARARGS, (char *)"xor_ss_sptr_pc_work_time_total(xor_ss_sptr self) -> float"},
	 { (char *)"xor_ss_sptr_pc_throughput_avg", _wrap_xor_ss_sptr_pc_throughput_avg, METH_VARARGS, (char *)"xor_ss_sptr_pc_throughput_avg(xor_ss_sptr self) -> float"},
	 { (char *)"xor_ss_sptr_set_processor_affinity", (PyCFunction) _wrap_xor_ss_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_set_processor_affinity(xor_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"xor_ss_sptr_unset_processor_affinity", _wrap_xor_ss_sptr_unset_processor_affinity, METH_VARARGS, (char *)"xor_ss_sptr_unset_processor_affinity(xor_ss_sptr self)"},
	 { (char *)"xor_ss_sptr_processor_affinity", _wrap_xor_ss_sptr_processor_affinity, METH_VARARGS, (char *)"xor_ss_sptr_processor_affinity(xor_ss_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"xor_ss_sptr_active_thread_priority", _wrap_xor_ss_sptr_active_thread_priority, METH_VARARGS, (char *)"xor_ss_sptr_active_thread_priority(xor_ss_sptr self) -> int"},
	 { (char *)"xor_ss_sptr_thread_priority", _wrap_xor_ss_sptr_thread_priority, METH_VARARGS, (char *)"xor_ss_sptr_thread_priority(xor_ss_sptr self) -> int"},
	 { (char *)"xor_ss_sptr_set_thread_priority", (PyCFunction) _wrap_xor_ss_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_set_thread_priority(xor_ss_sptr self, int priority) -> int"},
	 { (char *)"xor_ss_sptr_name", _wrap_xor_ss_sptr_name, METH_VARARGS, (char *)"xor_ss_sptr_name(xor_ss_sptr self) -> std::string"},
	 { (char *)"xor_ss_sptr_symbol_name", _wrap_xor_ss_sptr_symbol_name, METH_VARARGS, (char *)"xor_ss_sptr_symbol_name(xor_ss_sptr self) -> std::string"},
	 { (char *)"xor_ss_sptr_input_signature", _wrap_xor_ss_sptr_input_signature, METH_VARARGS, (char *)"xor_ss_sptr_input_signature(xor_ss_sptr self) -> io_signature_sptr"},
	 { (char *)"xor_ss_sptr_output_signature", _wrap_xor_ss_sptr_output_signature, METH_VARARGS, (char *)"xor_ss_sptr_output_signature(xor_ss_sptr self) -> io_signature_sptr"},
	 { (char *)"xor_ss_sptr_unique_id", _wrap_xor_ss_sptr_unique_id, METH_VARARGS, (char *)"xor_ss_sptr_unique_id(xor_ss_sptr self) -> long"},
	 { (char *)"xor_ss_sptr_to_basic_block", _wrap_xor_ss_sptr_to_basic_block, METH_VARARGS, (char *)"xor_ss_sptr_to_basic_block(xor_ss_sptr self) -> basic_block_sptr"},
	 { (char *)"xor_ss_sptr_check_topology", (PyCFunction) _wrap_xor_ss_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_check_topology(xor_ss_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"xor_ss_sptr_alias", _wrap_xor_ss_sptr_alias, METH_VARARGS, (char *)"xor_ss_sptr_alias(xor_ss_sptr self) -> std::string"},
	 { (char *)"xor_ss_sptr_set_block_alias", (PyCFunction) _wrap_xor_ss_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_set_block_alias(xor_ss_sptr self, std::string name)"},
	 { (char *)"xor_ss_sptr__post", (PyCFunction) _wrap_xor_ss_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr__post(xor_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"xor_ss_sptr_message_ports_in", _wrap_xor_ss_sptr_message_ports_in, METH_VARARGS, (char *)"xor_ss_sptr_message_ports_in(xor_ss_sptr self) -> swig_int_ptr"},
	 { (char *)"xor_ss_sptr_message_ports_out", _wrap_xor_ss_sptr_message_ports_out, METH_VARARGS, (char *)"xor_ss_sptr_message_ports_out(xor_ss_sptr self) -> swig_int_ptr"},
	 { (char *)"xor_ss_sptr_message_subscribers", (PyCFunction) _wrap_xor_ss_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ss_sptr_message_subscribers(xor_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"xor_ss_sptr_swigregister", xor_ss_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_xor_ii_sptr", _wrap_new_xor_ii_sptr, METH_VARARGS, (char *)"\n"
		"xor_ii_sptr()\n"
		"new_xor_ii_sptr(xor_ii p) -> xor_ii_sptr\n"
		""},
	 { (char *)"xor_ii_sptr___deref__", _wrap_xor_ii_sptr___deref__, METH_VARARGS, (char *)"xor_ii_sptr___deref__(xor_ii_sptr self) -> xor_ii"},
	 { (char *)"delete_xor_ii_sptr", _wrap_delete_xor_ii_sptr, METH_VARARGS, (char *)"delete_xor_ii_sptr(xor_ii_sptr self)"},
	 { (char *)"xor_ii_sptr_make", (PyCFunction) _wrap_xor_ii_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"xor_ii_sptr_make(xor_ii_sptr self, size_t vlen=1) -> xor_ii_sptr\n"
		"\n"
		"output = input_0 ^ input_1 ^ , ... ^ input_N)\n"
		"\n"
		"Bitwise boolean xor across all input streams.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    vlen : \n"
		""},
	 { (char *)"xor_ii_sptr_history", _wrap_xor_ii_sptr_history, METH_VARARGS, (char *)"xor_ii_sptr_history(xor_ii_sptr self) -> unsigned int"},
	 { (char *)"xor_ii_sptr_declare_sample_delay", _wrap_xor_ii_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"xor_ii_sptr_declare_sample_delay(xor_ii_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"xor_ii_sptr_sample_delay", (PyCFunction) _wrap_xor_ii_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_sample_delay(xor_ii_sptr self, int which) -> unsigned int"},
	 { (char *)"xor_ii_sptr_output_multiple", _wrap_xor_ii_sptr_output_multiple, METH_VARARGS, (char *)"xor_ii_sptr_output_multiple(xor_ii_sptr self) -> int"},
	 { (char *)"xor_ii_sptr_relative_rate", _wrap_xor_ii_sptr_relative_rate, METH_VARARGS, (char *)"xor_ii_sptr_relative_rate(xor_ii_sptr self) -> double"},
	 { (char *)"xor_ii_sptr_start", _wrap_xor_ii_sptr_start, METH_VARARGS, (char *)"xor_ii_sptr_start(xor_ii_sptr self) -> bool"},
	 { (char *)"xor_ii_sptr_stop", _wrap_xor_ii_sptr_stop, METH_VARARGS, (char *)"xor_ii_sptr_stop(xor_ii_sptr self) -> bool"},
	 { (char *)"xor_ii_sptr_nitems_read", (PyCFunction) _wrap_xor_ii_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_nitems_read(xor_ii_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"xor_ii_sptr_nitems_written", (PyCFunction) _wrap_xor_ii_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_nitems_written(xor_ii_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"xor_ii_sptr_max_noutput_items", _wrap_xor_ii_sptr_max_noutput_items, METH_VARARGS, (char *)"xor_ii_sptr_max_noutput_items(xor_ii_sptr self) -> int"},
	 { (char *)"xor_ii_sptr_set_max_noutput_items", (PyCFunction) _wrap_xor_ii_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_set_max_noutput_items(xor_ii_sptr self, int m)"},
	 { (char *)"xor_ii_sptr_unset_max_noutput_items", _wrap_xor_ii_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"xor_ii_sptr_unset_max_noutput_items(xor_ii_sptr self)"},
	 { (char *)"xor_ii_sptr_is_set_max_noutput_items", _wrap_xor_ii_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"xor_ii_sptr_is_set_max_noutput_items(xor_ii_sptr self) -> bool"},
	 { (char *)"xor_ii_sptr_set_min_noutput_items", (PyCFunction) _wrap_xor_ii_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_set_min_noutput_items(xor_ii_sptr self, int m)"},
	 { (char *)"xor_ii_sptr_min_noutput_items", _wrap_xor_ii_sptr_min_noutput_items, METH_VARARGS, (char *)"xor_ii_sptr_min_noutput_items(xor_ii_sptr self) -> int"},
	 { (char *)"xor_ii_sptr_max_output_buffer", (PyCFunction) _wrap_xor_ii_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_max_output_buffer(xor_ii_sptr self, int i) -> long"},
	 { (char *)"xor_ii_sptr_set_max_output_buffer", _wrap_xor_ii_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"xor_ii_sptr_set_max_output_buffer(xor_ii_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"xor_ii_sptr_min_output_buffer", (PyCFunction) _wrap_xor_ii_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_min_output_buffer(xor_ii_sptr self, int i) -> long"},
	 { (char *)"xor_ii_sptr_set_min_output_buffer", _wrap_xor_ii_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"xor_ii_sptr_set_min_output_buffer(xor_ii_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"xor_ii_sptr_pc_noutput_items", _wrap_xor_ii_sptr_pc_noutput_items, METH_VARARGS, (char *)"xor_ii_sptr_pc_noutput_items(xor_ii_sptr self) -> float"},
	 { (char *)"xor_ii_sptr_pc_noutput_items_avg", _wrap_xor_ii_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"xor_ii_sptr_pc_noutput_items_avg(xor_ii_sptr self) -> float"},
	 { (char *)"xor_ii_sptr_pc_noutput_items_var", _wrap_xor_ii_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"xor_ii_sptr_pc_noutput_items_var(xor_ii_sptr self) -> float"},
	 { (char *)"xor_ii_sptr_pc_nproduced", _wrap_xor_ii_sptr_pc_nproduced, METH_VARARGS, (char *)"xor_ii_sptr_pc_nproduced(xor_ii_sptr self) -> float"},
	 { (char *)"xor_ii_sptr_pc_nproduced_avg", _wrap_xor_ii_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"xor_ii_sptr_pc_nproduced_avg(xor_ii_sptr self) -> float"},
	 { (char *)"xor_ii_sptr_pc_nproduced_var", _wrap_xor_ii_sptr_pc_nproduced_var, METH_VARARGS, (char *)"xor_ii_sptr_pc_nproduced_var(xor_ii_sptr self) -> float"},
	 { (char *)"xor_ii_sptr_pc_input_buffers_full", _wrap_xor_ii_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"xor_ii_sptr_pc_input_buffers_full(xor_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ii_sptr_pc_input_buffers_full_avg", _wrap_xor_ii_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"xor_ii_sptr_pc_input_buffers_full_avg(xor_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ii_sptr_pc_input_buffers_full_var", _wrap_xor_ii_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"xor_ii_sptr_pc_input_buffers_full_var(xor_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ii_sptr_pc_output_buffers_full", _wrap_xor_ii_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"xor_ii_sptr_pc_output_buffers_full(xor_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ii_sptr_pc_output_buffers_full_avg", _wrap_xor_ii_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"xor_ii_sptr_pc_output_buffers_full_avg(xor_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ii_sptr_pc_output_buffers_full_var", _wrap_xor_ii_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"xor_ii_sptr_pc_output_buffers_full_var(xor_ii_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"xor_ii_sptr_pc_work_time", _wrap_xor_ii_sptr_pc_work_time, METH_VARARGS, (char *)"xor_ii_sptr_pc_work_time(xor_ii_sptr self) -> float"},
	 { (char *)"xor_ii_sptr_pc_work_time_avg", _wrap_xor_ii_sptr_pc_work_time_avg, METH_VARARGS, (char *)"xor_ii_sptr_pc_work_time_avg(xor_ii_sptr self) -> float"},
	 { (char *)"xor_ii_sptr_pc_work_time_var", _wrap_xor_ii_sptr_pc_work_time_var, METH_VARARGS, (char *)"xor_ii_sptr_pc_work_time_var(xor_ii_sptr self) -> float"},
	 { (char *)"xor_ii_sptr_pc_work_time_total", _wrap_xor_ii_sptr_pc_work_time_total, METH_VARARGS, (char *)"xor_ii_sptr_pc_work_time_total(xor_ii_sptr self) -> float"},
	 { (char *)"xor_ii_sptr_pc_throughput_avg", _wrap_xor_ii_sptr_pc_throughput_avg, METH_VARARGS, (char *)"xor_ii_sptr_pc_throughput_avg(xor_ii_sptr self) -> float"},
	 { (char *)"xor_ii_sptr_set_processor_affinity", (PyCFunction) _wrap_xor_ii_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_set_processor_affinity(xor_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"xor_ii_sptr_unset_processor_affinity", _wrap_xor_ii_sptr_unset_processor_affinity, METH_VARARGS, (char *)"xor_ii_sptr_unset_processor_affinity(xor_ii_sptr self)"},
	 { (char *)"xor_ii_sptr_processor_affinity", _wrap_xor_ii_sptr_processor_affinity, METH_VARARGS, (char *)"xor_ii_sptr_processor_affinity(xor_ii_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"xor_ii_sptr_active_thread_priority", _wrap_xor_ii_sptr_active_thread_priority, METH_VARARGS, (char *)"xor_ii_sptr_active_thread_priority(xor_ii_sptr self) -> int"},
	 { (char *)"xor_ii_sptr_thread_priority", _wrap_xor_ii_sptr_thread_priority, METH_VARARGS, (char *)"xor_ii_sptr_thread_priority(xor_ii_sptr self) -> int"},
	 { (char *)"xor_ii_sptr_set_thread_priority", (PyCFunction) _wrap_xor_ii_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_set_thread_priority(xor_ii_sptr self, int priority) -> int"},
	 { (char *)"xor_ii_sptr_name", _wrap_xor_ii_sptr_name, METH_VARARGS, (char *)"xor_ii_sptr_name(xor_ii_sptr self) -> std::string"},
	 { (char *)"xor_ii_sptr_symbol_name", _wrap_xor_ii_sptr_symbol_name, METH_VARARGS, (char *)"xor_ii_sptr_symbol_name(xor_ii_sptr self) -> std::string"},
	 { (char *)"xor_ii_sptr_input_signature", _wrap_xor_ii_sptr_input_signature, METH_VARARGS, (char *)"xor_ii_sptr_input_signature(xor_ii_sptr self) -> io_signature_sptr"},
	 { (char *)"xor_ii_sptr_output_signature", _wrap_xor_ii_sptr_output_signature, METH_VARARGS, (char *)"xor_ii_sptr_output_signature(xor_ii_sptr self) -> io_signature_sptr"},
	 { (char *)"xor_ii_sptr_unique_id", _wrap_xor_ii_sptr_unique_id, METH_VARARGS, (char *)"xor_ii_sptr_unique_id(xor_ii_sptr self) -> long"},
	 { (char *)"xor_ii_sptr_to_basic_block", _wrap_xor_ii_sptr_to_basic_block, METH_VARARGS, (char *)"xor_ii_sptr_to_basic_block(xor_ii_sptr self) -> basic_block_sptr"},
	 { (char *)"xor_ii_sptr_check_topology", (PyCFunction) _wrap_xor_ii_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_check_topology(xor_ii_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"xor_ii_sptr_alias", _wrap_xor_ii_sptr_alias, METH_VARARGS, (char *)"xor_ii_sptr_alias(xor_ii_sptr self) -> std::string"},
	 { (char *)"xor_ii_sptr_set_block_alias", (PyCFunction) _wrap_xor_ii_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_set_block_alias(xor_ii_sptr self, std::string name)"},
	 { (char *)"xor_ii_sptr__post", (PyCFunction) _wrap_xor_ii_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr__post(xor_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"xor_ii_sptr_message_ports_in", _wrap_xor_ii_sptr_message_ports_in, METH_VARARGS, (char *)"xor_ii_sptr_message_ports_in(xor_ii_sptr self) -> swig_int_ptr"},
	 { (char *)"xor_ii_sptr_message_ports_out", _wrap_xor_ii_sptr_message_ports_out, METH_VARARGS, (char *)"xor_ii_sptr_message_ports_out(xor_ii_sptr self) -> swig_int_ptr"},
	 { (char *)"xor_ii_sptr_message_subscribers", (PyCFunction) _wrap_xor_ii_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"xor_ii_sptr_message_subscribers(xor_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"xor_ii_sptr_swigregister", xor_ii_sptr_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_gr__blocks__tagged_stream_muxTo_p_gr__tagged_stream_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::tagged_stream_block *)  ((gr::blocks::tagged_stream_mux *) x));
}
static void *_p_gr__blocks__tagged_stream_to_pduTo_p_gr__tagged_stream_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::tagged_stream_block *)  ((gr::blocks::tagged_stream_to_pdu *) x));
}
static void *_p_gr__blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *)  ((gr::block *) x));
}
static void *_p_gr__blocks__udp_sinkTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::udp_sink *) x));
}
static void *_p_gr__blocks__xor_bbTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::xor_bb *) x));
}
static void *_p_gr__blocks__xor_ssTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::xor_ss *) x));
}
static void *_p_gr__tagged_stream_blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::tagged_stream_block *) x));
}
static void *_p_gr__sync_blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::sync_block *) x));
}
static void *_p_gr__blocks__tuntap_pduTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::blocks::tuntap_pdu *) x));
}
static void *_p_gr__blocks__vco_cTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::vco_c *) x));
}
static void *_p_gr__blocks__vco_fTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::vco_f *) x));
}
static void *_p_gr__hier_block2To_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *)  ((gr::hier_block2 *) x));
}
static void *_p_gr__blocks__tags_strobeTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::tags_strobe *) x));
}
static void *_p_gr__blocks__tagged_stream_multiply_lengthTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::blocks::tagged_stream_multiply_length *) x));
}
static void *_p_gr__blocks__tagged_stream_alignTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::blocks::tagged_stream_align *) x));
}
static void *_p_gr__sync_interpolatorTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::sync_interpolator *) x));
}
static void *_p_gr__block_gatewayTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::block_gateway *) x));
}
static void *_p_gr__blocks__tcp_server_sinkTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::tcp_server_sink *) x));
}
static void *_p_gr__blocks__threshold_ffTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::threshold_ff *) x));
}
static void *_p_gr__blocks__unpack_k_bits_bbTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *)(gr::sync_interpolator *) ((gr::blocks::unpack_k_bits_bb *) x));
}
static void *_p_gr__blocks__unpacked_to_packed_iiTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::blocks::unpacked_to_packed_ii *) x));
}
static void *_p_gr__blocks__tag_shareTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::tag_share *) x));
}
static void *_p_gr__blocks__tagged_stream_to_pduTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::tagged_stream_block *) ((gr::blocks::tagged_stream_to_pdu *) x));
}
static void *_p_gr__blocks__uchar_to_floatTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::uchar_to_float *) x));
}
static void *_p_gr__blocks__xor_iiTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::xor_ii *) x));
}
static void *_p_gr__blocks__transcendentalTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::transcendental *) x));
}
static void *_p_gr__blocks__udp_sourceTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::udp_source *) x));
}
static void *_p_gr__top_blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::hier_block2 *) ((gr::top_block *) x));
}
static void *_p_gr__blocks__tag_gateTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::blocks::tag_gate *) x));
}
static void *_p_gr__blocks__test_tag_variable_rate_ffTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::blocks::test_tag_variable_rate_ff *) x));
}
static void *_p_gr__blocks__unpacked_to_packed_bbTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::blocks::unpacked_to_packed_bb *) x));
}
static void *_p_gr__blocks__unpacked_to_packed_ssTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::blocks::unpacked_to_packed_ss *) x));
}
static void *_p_gr__sync_decimatorTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::sync_decimator *) x));
}
static void *_p_gr__blocks__tagged_stream_muxTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::tagged_stream_block *) ((gr::blocks::tagged_stream_mux *) x));
}
static void *_p_gr__blocks__udp_sinkTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::udp_sink *) x));
}
static void *_p_gr__blocks__xor_bbTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::xor_bb *) x));
}
static void *_p_gr__blocks__xor_ssTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::xor_ss *) x));
}
static void *_p_gr__blocks__vco_cTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::vco_c *) x));
}
static void *_p_gr__blocks__vco_fTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::vco_f *) x));
}
static void *_p_gr__blocks__tags_strobeTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::tags_strobe *) x));
}
static void *_p_gr__sync_interpolatorTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::sync_interpolator *) x));
}
static void *_p_gr__blocks__unpack_k_bits_bbTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *) (gr::sync_interpolator *) ((gr::blocks::unpack_k_bits_bb *) x));
}
static void *_p_gr__blocks__threshold_ffTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::threshold_ff *) x));
}
static void *_p_gr__blocks__tcp_server_sinkTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::tcp_server_sink *) x));
}
static void *_p_gr__blocks__tag_shareTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::tag_share *) x));
}
static void *_p_gr__blocks__uchar_to_floatTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::uchar_to_float *) x));
}
static void *_p_gr__blocks__xor_iiTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::xor_ii *) x));
}
static void *_p_gr__blocks__transcendentalTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::transcendental *) x));
}
static void *_p_gr__blocks__udp_sourceTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::udp_source *) x));
}
static void *_p_gr__blocks__tag_gateTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::blocks::tag_gate *) x));
}
static void *_p_gr__sync_decimatorTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::sync_decimator *) x));
}
static void *_p_gr__blocks__udp_sinkTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::udp_sink *) x));
}
static void *_p_gr__blocks__xor_bbTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::xor_bb *) x));
}
static void *_p_gr__blocks__xor_ssTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::xor_ss *) x));
}
static void *_p_gr__tagged_stream_blockTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::tagged_stream_block *) x));
}
static void *_p_gr__sync_blockTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::sync_block *) x));
}
static void *_p_gr__blocks__tuntap_pduTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::blocks::tuntap_pdu *) x));
}
static void *_p_gr__blocks__vco_cTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::vco_c *) x));
}
static void *_p_gr__blocks__vco_fTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::vco_f *) x));
}
static void *_p_gr__blocks__tags_strobeTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::tags_strobe *) x));
}
static void *_p_gr__blocks__tagged_stream_multiply_lengthTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::blocks::tagged_stream_multiply_length *) x));
}
static void *_p_gr__blocks__tagged_stream_alignTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::blocks::tagged_stream_align *) x));
}
static void *_p_gr__sync_interpolatorTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::sync_interpolator *) x));
}
static void *_p_gr__block_gatewayTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::block_gateway *) x));
}
static void *_p_gr__blocks__tcp_server_sinkTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::tcp_server_sink *) x));
}
static void *_p_gr__blocks__threshold_ffTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::threshold_ff *) x));
}
static void *_p_gr__blocks__unpack_k_bits_bbTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *)(gr::sync_interpolator *) ((gr::blocks::unpack_k_bits_bb *) x));
}
static void *_p_gr__blocks__unpacked_to_packed_iiTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::blocks::unpacked_to_packed_ii *) x));
}
static void *_p_gr__blocks__tag_shareTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::tag_share *) x));
}
static void *_p_gr__blocks__tagged_stream_to_pduTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::tagged_stream_block *) ((gr::blocks::tagged_stream_to_pdu *) x));
}
static void *_p_gr__blocks__uchar_to_floatTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::uchar_to_float *) x));
}
static void *_p_gr__blocks__xor_iiTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::xor_ii *) x));
}
static void *_p_gr__blocks__transcendentalTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::transcendental *) x));
}
static void *_p_gr__blocks__udp_sourceTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::udp_source *) x));
}
static void *_p_gr__blocks__tag_gateTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::blocks::tag_gate *) x));
}
static void *_p_gr__blocks__test_tag_variable_rate_ffTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::blocks::test_tag_variable_rate_ff *) x));
}
static void *_p_gr__blocks__unpacked_to_packed_bbTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::blocks::unpacked_to_packed_bb *) x));
}
static void *_p_gr__blocks__unpacked_to_packed_ssTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::blocks::unpacked_to_packed_ss *) x));
}
static void *_p_gr__sync_decimatorTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::sync_decimator *) x));
}
static void *_p_gr__blocks__tagged_stream_muxTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::tagged_stream_block *) ((gr::blocks::tagged_stream_mux *) x));
}
static void *_p_gr__blocks__unpack_k_bits_bbTo_p_gr__sync_interpolator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_interpolator *)  ((gr::blocks::unpack_k_bits_bb *) x));
}
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t = {"_p_boost__intrusive_ptrT_pmt__pmt_base_t", "pmt::pmt_t *|boost::intrusive_ptr< pmt::pmt_base > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__basic_block_t = {"_p_boost__shared_ptrT_gr__basic_block_t", "boost::shared_ptr< gr::basic_block > *|gr::basic_block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__block_detail_t = {"_p_boost__shared_ptrT_gr__block_detail_t", "boost::shared_ptr< gr::block_detail > *|gr::block_detail_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__block_t = {"_p_boost__shared_ptrT_gr__block_t", "boost::shared_ptr< gr::block > *|gr::block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__tag_gate_t = {"_p_boost__shared_ptrT_gr__blocks__tag_gate_t", "boost::shared_ptr< gr::blocks::tag_gate > *|gr::blocks::tag_gate::sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__tag_share_t = {"_p_boost__shared_ptrT_gr__blocks__tag_share_t", "gr::blocks::tag_share::sptr *|boost::shared_ptr< gr::blocks::tag_share > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t = {"_p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t", "gr::blocks::tagged_stream_align::sptr *|boost::shared_ptr< gr::blocks::tagged_stream_align > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t = {"_p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t", "gr::blocks::tagged_stream_multiply_length::sptr *|boost::shared_ptr< gr::blocks::tagged_stream_multiply_length > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t = {"_p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t", "gr::blocks::tagged_stream_mux::sptr *|boost::shared_ptr< gr::blocks::tagged_stream_mux > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t = {"_p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t", "gr::blocks::tagged_stream_to_pdu::sptr *|boost::shared_ptr< gr::blocks::tagged_stream_to_pdu > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__tags_strobe_t = {"_p_boost__shared_ptrT_gr__blocks__tags_strobe_t", "gr::blocks::tags_strobe::sptr *|boost::shared_ptr< gr::blocks::tags_strobe > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t = {"_p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t", "gr::blocks::tcp_server_sink::sptr *|boost::shared_ptr< gr::blocks::tcp_server_sink > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t = {"_p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t", "gr::blocks::test_tag_variable_rate_ff::sptr *|boost::shared_ptr< gr::blocks::test_tag_variable_rate_ff > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__threshold_ff_t = {"_p_boost__shared_ptrT_gr__blocks__threshold_ff_t", "gr::blocks::threshold_ff::sptr *|boost::shared_ptr< gr::blocks::threshold_ff > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__transcendental_t = {"_p_boost__shared_ptrT_gr__blocks__transcendental_t", "gr::blocks::transcendental::sptr *|boost::shared_ptr< gr::blocks::transcendental > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t = {"_p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t", "gr::blocks::tuntap_pdu::sptr *|boost::shared_ptr< gr::blocks::tuntap_pdu > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__uchar_to_float_t = {"_p_boost__shared_ptrT_gr__blocks__uchar_to_float_t", "gr::blocks::uchar_to_float::sptr *|boost::shared_ptr< gr::blocks::uchar_to_float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__udp_sink_t = {"_p_boost__shared_ptrT_gr__blocks__udp_sink_t", "gr::blocks::udp_sink::sptr *|boost::shared_ptr< gr::blocks::udp_sink > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__udp_source_t = {"_p_boost__shared_ptrT_gr__blocks__udp_source_t", "gr::blocks::udp_source::sptr *|boost::shared_ptr< gr::blocks::udp_source > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t = {"_p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t", "gr::blocks::unpack_k_bits_bb::sptr *|boost::shared_ptr< gr::blocks::unpack_k_bits_bb > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t = {"_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t", "gr::blocks::unpacked_to_packed_bb::sptr *|boost::shared_ptr< gr::blocks::unpacked_to_packed_bb > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t = {"_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t", "gr::blocks::unpacked_to_packed_ii::sptr *|boost::shared_ptr< gr::blocks::unpacked_to_packed_ii > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t = {"_p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t", "gr::blocks::unpacked_to_packed_ss::sptr *|boost::shared_ptr< gr::blocks::unpacked_to_packed_ss > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__vco_c_t = {"_p_boost__shared_ptrT_gr__blocks__vco_c_t", "gr::blocks::vco_c::sptr *|boost::shared_ptr< gr::blocks::vco_c > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__vco_f_t = {"_p_boost__shared_ptrT_gr__blocks__vco_f_t", "gr::blocks::vco_f::sptr *|boost::shared_ptr< gr::blocks::vco_f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__xor_bb_t = {"_p_boost__shared_ptrT_gr__blocks__xor_bb_t", "gr::blocks::xor_bb::sptr *|boost::shared_ptr< gr::blocks::xor_bb > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__xor_ii_t = {"_p_boost__shared_ptrT_gr__blocks__xor_ii_t", "gr::blocks::xor_ii::sptr *|boost::shared_ptr< gr::blocks::xor_ii > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__blocks__xor_ss_t = {"_p_boost__shared_ptrT_gr__blocks__xor_ss_t", "gr::blocks::xor_ss::sptr *|boost::shared_ptr< gr::blocks::xor_ss > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__buffer_reader_t = {"_p_boost__shared_ptrT_gr__buffer_reader_t", "boost::shared_ptr< gr::buffer_reader > *|gr::buffer_reader_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__buffer_t = {"_p_boost__shared_ptrT_gr__buffer_t", "boost::shared_ptr< gr::buffer > *|gr::buffer_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__flat_flowgraph_t = {"_p_boost__shared_ptrT_gr__flat_flowgraph_t", "boost::shared_ptr< gr::flat_flowgraph > *|gr::flat_flowgraph_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__flowgraph_t = {"_p_boost__shared_ptrT_gr__flowgraph_t", "boost::shared_ptr< gr::flowgraph > *|gr::flowgraph_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__hier_block2_t = {"_p_boost__shared_ptrT_gr__hier_block2_t", "boost::shared_ptr< gr::hier_block2 > *|gr::hier_block2_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__io_signature_t = {"_p_boost__shared_ptrT_gr__io_signature_t", "gr::io_signature::sptr *|boost::shared_ptr< gr::io_signature > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__top_block_t = {"_p_boost__shared_ptrT_gr__top_block_t", "boost::shared_ptr< gr::top_block > *|gr::top_block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__basic_block = {"_p_gr__basic_block", "gr::basic_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__hier_block2 = {"_p_gr__hier_block2", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gr__block_gateway = {"_p_gr__block_gateway", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gr__top_block = {"_p_gr__top_block", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gr__sync_decimator = {"_p_gr__sync_decimator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gr__block = {"_p_gr__block", "gr::block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__kernel__unpack_k_bits = {"_p_gr__blocks__kernel__unpack_k_bits", "gr::blocks::kernel::unpack_k_bits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__tag_gate = {"_p_gr__blocks__tag_gate", "gr::blocks::tag_gate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__tag_share = {"_p_gr__blocks__tag_share", "gr::blocks::tag_share *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__tagged_stream_align = {"_p_gr__blocks__tagged_stream_align", "gr::blocks::tagged_stream_align *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__tagged_stream_multiply_length = {"_p_gr__blocks__tagged_stream_multiply_length", "gr::blocks::tagged_stream_multiply_length *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__tagged_stream_mux = {"_p_gr__blocks__tagged_stream_mux", "gr::blocks::tagged_stream_mux *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__tagged_stream_to_pdu = {"_p_gr__blocks__tagged_stream_to_pdu", "gr::blocks::tagged_stream_to_pdu *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__tags_strobe = {"_p_gr__blocks__tags_strobe", "gr::blocks::tags_strobe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__tcp_server_sink = {"_p_gr__blocks__tcp_server_sink", "gr::blocks::tcp_server_sink *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__test_tag_variable_rate_ff = {"_p_gr__blocks__test_tag_variable_rate_ff", "gr::blocks::test_tag_variable_rate_ff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__threshold_ff = {"_p_gr__blocks__threshold_ff", "gr::blocks::threshold_ff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__transcendental = {"_p_gr__blocks__transcendental", "gr::blocks::transcendental *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__tuntap_pdu = {"_p_gr__blocks__tuntap_pdu", "gr::blocks::tuntap_pdu *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__uchar_to_float = {"_p_gr__blocks__uchar_to_float", "gr::blocks::uchar_to_float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__udp_sink = {"_p_gr__blocks__udp_sink", "gr::blocks::udp_sink *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__udp_source = {"_p_gr__blocks__udp_source", "gr::blocks::udp_source *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__unpack_k_bits_bb = {"_p_gr__blocks__unpack_k_bits_bb", "gr::blocks::unpack_k_bits_bb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__unpacked_to_packed_bb = {"_p_gr__blocks__unpacked_to_packed_bb", "gr::blocks::unpacked_to_packed_bb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__unpacked_to_packed_ii = {"_p_gr__blocks__unpacked_to_packed_ii", "gr::blocks::unpacked_to_packed_ii *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__unpacked_to_packed_ss = {"_p_gr__blocks__unpacked_to_packed_ss", "gr::blocks::unpacked_to_packed_ss *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__vco_c = {"_p_gr__blocks__vco_c", "gr::blocks::vco_c *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__vco_f = {"_p_gr__blocks__vco_f", "gr::blocks::vco_f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__xor_bb = {"_p_gr__blocks__xor_bb", "gr::blocks::xor_bb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__xor_ii = {"_p_gr__blocks__xor_ii", "gr::blocks::xor_ii *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__blocks__xor_ss = {"_p_gr__blocks__xor_ss", "gr::blocks::xor_ss *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__endianness_t = {"_p_gr__endianness_t", "enum gr::endianness_t *|gr::endianness_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__rt_status_t = {"_p_gr__rt_status_t", "enum gr::rt_status_t *|gr::rt_status_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__sync_block = {"_p_gr__sync_block", "gr::sync_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__sync_interpolator = {"_p_gr__sync_interpolator", "gr::sync_interpolator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__tagged_stream_block = {"_p_gr__tagged_stream_block", "gr::tagged_stream_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "gr::high_res_timer_type *|int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sptr = {"_p_sptr", "sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "gr_complexd *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *|gr_complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|DisplayType *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_allocator_type,
  &_swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t,
  &_swigt__p_boost__shared_ptrT_gr__basic_block_t,
  &_swigt__p_boost__shared_ptrT_gr__block_detail_t,
  &_swigt__p_boost__shared_ptrT_gr__block_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__tag_gate_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__tag_share_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__tags_strobe_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__threshold_ff_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__transcendental_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__uchar_to_float_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__udp_sink_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__udp_source_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__vco_c_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__vco_f_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__xor_bb_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__xor_ii_t,
  &_swigt__p_boost__shared_ptrT_gr__blocks__xor_ss_t,
  &_swigt__p_boost__shared_ptrT_gr__buffer_reader_t,
  &_swigt__p_boost__shared_ptrT_gr__buffer_t,
  &_swigt__p_boost__shared_ptrT_gr__flat_flowgraph_t,
  &_swigt__p_boost__shared_ptrT_gr__flowgraph_t,
  &_swigt__p_boost__shared_ptrT_gr__hier_block2_t,
  &_swigt__p_boost__shared_ptrT_gr__io_signature_t,
  &_swigt__p_boost__shared_ptrT_gr__top_block_t,
  &_swigt__p_char,
  &_swigt__p_const_reference,
  &_swigt__p_difference_type,
  &_swigt__p_gr__basic_block,
  &_swigt__p_gr__block,
  &_swigt__p_gr__block_gateway,
  &_swigt__p_gr__blocks__kernel__unpack_k_bits,
  &_swigt__p_gr__blocks__tag_gate,
  &_swigt__p_gr__blocks__tag_share,
  &_swigt__p_gr__blocks__tagged_stream_align,
  &_swigt__p_gr__blocks__tagged_stream_multiply_length,
  &_swigt__p_gr__blocks__tagged_stream_mux,
  &_swigt__p_gr__blocks__tagged_stream_to_pdu,
  &_swigt__p_gr__blocks__tags_strobe,
  &_swigt__p_gr__blocks__tcp_server_sink,
  &_swigt__p_gr__blocks__test_tag_variable_rate_ff,
  &_swigt__p_gr__blocks__threshold_ff,
  &_swigt__p_gr__blocks__transcendental,
  &_swigt__p_gr__blocks__tuntap_pdu,
  &_swigt__p_gr__blocks__uchar_to_float,
  &_swigt__p_gr__blocks__udp_sink,
  &_swigt__p_gr__blocks__udp_source,
  &_swigt__p_gr__blocks__unpack_k_bits_bb,
  &_swigt__p_gr__blocks__unpacked_to_packed_bb,
  &_swigt__p_gr__blocks__unpacked_to_packed_ii,
  &_swigt__p_gr__blocks__unpacked_to_packed_ss,
  &_swigt__p_gr__blocks__vco_c,
  &_swigt__p_gr__blocks__vco_f,
  &_swigt__p_gr__blocks__xor_bb,
  &_swigt__p_gr__blocks__xor_ii,
  &_swigt__p_gr__blocks__xor_ss,
  &_swigt__p_gr__endianness_t,
  &_swigt__p_gr__hier_block2,
  &_swigt__p_gr__rt_status_t,
  &_swigt__p_gr__sync_block,
  &_swigt__p_gr__sync_decimator,
  &_swigt__p_gr__sync_interpolator,
  &_swigt__p_gr__tagged_stream_block,
  &_swigt__p_gr__top_block,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_reference,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_sptr,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__intrusive_ptrT_pmt__pmt_base_t[] = {  {&_swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__basic_block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__basic_block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__block_detail_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__block_detail_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__tag_gate_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__tag_gate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__tag_share_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__tag_share_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__tags_strobe_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__tags_strobe_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__threshold_ff_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__threshold_ff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__transcendental_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__transcendental_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__uchar_to_float_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__uchar_to_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__udp_sink_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__udp_sink_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__udp_source_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__udp_source_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__vco_c_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__vco_c_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__vco_f_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__vco_f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__xor_bb_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__xor_bb_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__xor_ii_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__xor_ii_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__blocks__xor_ss_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__blocks__xor_ss_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__buffer_reader_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__buffer_reader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__buffer_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__buffer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__flat_flowgraph_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__flat_flowgraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__flowgraph_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__flowgraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__hier_block2_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__hier_block2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__io_signature_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__io_signature_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__top_block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__top_block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__hier_block2[] = {{&_swigt__p_gr__hier_block2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__block_gateway[] = {{&_swigt__p_gr__block_gateway, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__top_block[] = {{&_swigt__p_gr__top_block, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__sync_decimator[] = {{&_swigt__p_gr__sync_decimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__basic_block[] = {  {&_swigt__p_gr__blocks__udp_sink, _p_gr__blocks__udp_sinkTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__tuntap_pdu, _p_gr__blocks__tuntap_pduTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__sync_block, _p_gr__sync_blockTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__basic_block, 0, 0, 0},  {&_swigt__p_gr__tagged_stream_block, _p_gr__tagged_stream_blockTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__block, _p_gr__blockTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__vco_c, _p_gr__blocks__vco_cTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__xor_ss, _p_gr__blocks__xor_ssTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__xor_bb, _p_gr__blocks__xor_bbTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__vco_f, _p_gr__blocks__vco_fTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__tags_strobe, _p_gr__blocks__tags_strobeTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__hier_block2, _p_gr__hier_block2To_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__tagged_stream_multiply_length, _p_gr__blocks__tagged_stream_multiply_lengthTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__tagged_stream_align, _p_gr__blocks__tagged_stream_alignTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__sync_interpolator, _p_gr__sync_interpolatorTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__unpack_k_bits_bb, _p_gr__blocks__unpack_k_bits_bbTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__threshold_ff, _p_gr__blocks__threshold_ffTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__tcp_server_sink, _p_gr__blocks__tcp_server_sinkTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__block_gateway, _p_gr__block_gatewayTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__unpacked_to_packed_ii, _p_gr__blocks__unpacked_to_packed_iiTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__tag_share, _p_gr__blocks__tag_shareTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__uchar_to_float, _p_gr__blocks__uchar_to_floatTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__tagged_stream_to_pdu, _p_gr__blocks__tagged_stream_to_pduTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__transcendental, _p_gr__blocks__transcendentalTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__udp_source, _p_gr__blocks__udp_sourceTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__xor_ii, _p_gr__blocks__xor_iiTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__top_block, _p_gr__top_blockTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__tag_gate, _p_gr__blocks__tag_gateTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__test_tag_variable_rate_ff, _p_gr__blocks__test_tag_variable_rate_ffTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__unpacked_to_packed_bb, _p_gr__blocks__unpacked_to_packed_bbTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__unpacked_to_packed_ss, _p_gr__blocks__unpacked_to_packed_ssTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__sync_decimator, _p_gr__sync_decimatorTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__blocks__tagged_stream_mux, _p_gr__blocks__tagged_stream_muxTo_p_gr__basic_block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__block[] = {  {&_swigt__p_gr__blocks__udp_sink, _p_gr__blocks__udp_sinkTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__tuntap_pdu, _p_gr__blocks__tuntap_pduTo_p_gr__block, 0, 0},  {&_swigt__p_gr__sync_block, _p_gr__sync_blockTo_p_gr__block, 0, 0},  {&_swigt__p_gr__block, 0, 0, 0},  {&_swigt__p_gr__tagged_stream_block, _p_gr__tagged_stream_blockTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__vco_c, _p_gr__blocks__vco_cTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__xor_ss, _p_gr__blocks__xor_ssTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__xor_bb, _p_gr__blocks__xor_bbTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__vco_f, _p_gr__blocks__vco_fTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__tags_strobe, _p_gr__blocks__tags_strobeTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__tagged_stream_multiply_length, _p_gr__blocks__tagged_stream_multiply_lengthTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__tagged_stream_align, _p_gr__blocks__tagged_stream_alignTo_p_gr__block, 0, 0},  {&_swigt__p_gr__sync_interpolator, _p_gr__sync_interpolatorTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__unpack_k_bits_bb, _p_gr__blocks__unpack_k_bits_bbTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__threshold_ff, _p_gr__blocks__threshold_ffTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__tcp_server_sink, _p_gr__blocks__tcp_server_sinkTo_p_gr__block, 0, 0},  {&_swigt__p_gr__block_gateway, _p_gr__block_gatewayTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__unpacked_to_packed_ii, _p_gr__blocks__unpacked_to_packed_iiTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__tag_share, _p_gr__blocks__tag_shareTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__uchar_to_float, _p_gr__blocks__uchar_to_floatTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__tagged_stream_to_pdu, _p_gr__blocks__tagged_stream_to_pduTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__transcendental, _p_gr__blocks__transcendentalTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__udp_source, _p_gr__blocks__udp_sourceTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__xor_ii, _p_gr__blocks__xor_iiTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__tag_gate, _p_gr__blocks__tag_gateTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__test_tag_variable_rate_ff, _p_gr__blocks__test_tag_variable_rate_ffTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__unpacked_to_packed_bb, _p_gr__blocks__unpacked_to_packed_bbTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__unpacked_to_packed_ss, _p_gr__blocks__unpacked_to_packed_ssTo_p_gr__block, 0, 0},  {&_swigt__p_gr__sync_decimator, _p_gr__sync_decimatorTo_p_gr__block, 0, 0},  {&_swigt__p_gr__blocks__tagged_stream_mux, _p_gr__blocks__tagged_stream_muxTo_p_gr__block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__kernel__unpack_k_bits[] = {  {&_swigt__p_gr__blocks__kernel__unpack_k_bits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__tag_gate[] = {  {&_swigt__p_gr__blocks__tag_gate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__tag_share[] = {  {&_swigt__p_gr__blocks__tag_share, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__tagged_stream_align[] = {  {&_swigt__p_gr__blocks__tagged_stream_align, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__tagged_stream_multiply_length[] = {  {&_swigt__p_gr__blocks__tagged_stream_multiply_length, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__tagged_stream_mux[] = {  {&_swigt__p_gr__blocks__tagged_stream_mux, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__tagged_stream_to_pdu[] = {  {&_swigt__p_gr__blocks__tagged_stream_to_pdu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__tags_strobe[] = {  {&_swigt__p_gr__blocks__tags_strobe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__tcp_server_sink[] = {  {&_swigt__p_gr__blocks__tcp_server_sink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__test_tag_variable_rate_ff[] = {  {&_swigt__p_gr__blocks__test_tag_variable_rate_ff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__threshold_ff[] = {  {&_swigt__p_gr__blocks__threshold_ff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__transcendental[] = {  {&_swigt__p_gr__blocks__transcendental, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__tuntap_pdu[] = {  {&_swigt__p_gr__blocks__tuntap_pdu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__uchar_to_float[] = {  {&_swigt__p_gr__blocks__uchar_to_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__udp_sink[] = {  {&_swigt__p_gr__blocks__udp_sink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__udp_source[] = {  {&_swigt__p_gr__blocks__udp_source, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__unpack_k_bits_bb[] = {  {&_swigt__p_gr__blocks__unpack_k_bits_bb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__unpacked_to_packed_bb[] = {  {&_swigt__p_gr__blocks__unpacked_to_packed_bb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__unpacked_to_packed_ii[] = {  {&_swigt__p_gr__blocks__unpacked_to_packed_ii, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__unpacked_to_packed_ss[] = {  {&_swigt__p_gr__blocks__unpacked_to_packed_ss, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__vco_c[] = {  {&_swigt__p_gr__blocks__vco_c, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__vco_f[] = {  {&_swigt__p_gr__blocks__vco_f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__xor_bb[] = {  {&_swigt__p_gr__blocks__xor_bb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__xor_ii[] = {  {&_swigt__p_gr__blocks__xor_ii, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__blocks__xor_ss[] = {  {&_swigt__p_gr__blocks__xor_ss, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__endianness_t[] = {  {&_swigt__p_gr__endianness_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__rt_status_t[] = {  {&_swigt__p_gr__rt_status_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__sync_block[] = {  {&_swigt__p_gr__blocks__udp_sink, _p_gr__blocks__udp_sinkTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__sync_block, 0, 0, 0},  {&_swigt__p_gr__blocks__vco_c, _p_gr__blocks__vco_cTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__xor_ss, _p_gr__blocks__xor_ssTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__xor_bb, _p_gr__blocks__xor_bbTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__vco_f, _p_gr__blocks__vco_fTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__tags_strobe, _p_gr__blocks__tags_strobeTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__sync_interpolator, _p_gr__sync_interpolatorTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__unpack_k_bits_bb, _p_gr__blocks__unpack_k_bits_bbTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__threshold_ff, _p_gr__blocks__threshold_ffTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__tcp_server_sink, _p_gr__blocks__tcp_server_sinkTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__tag_share, _p_gr__blocks__tag_shareTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__uchar_to_float, _p_gr__blocks__uchar_to_floatTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__transcendental, _p_gr__blocks__transcendentalTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__udp_source, _p_gr__blocks__udp_sourceTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__xor_ii, _p_gr__blocks__xor_iiTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__blocks__tag_gate, _p_gr__blocks__tag_gateTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__sync_decimator, _p_gr__sync_decimatorTo_p_gr__sync_block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__sync_interpolator[] = {  {&_swigt__p_gr__blocks__unpack_k_bits_bb, _p_gr__blocks__unpack_k_bits_bbTo_p_gr__sync_interpolator, 0, 0},  {&_swigt__p_gr__sync_interpolator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__tagged_stream_block[] = {  {&_swigt__p_gr__blocks__tagged_stream_mux, _p_gr__blocks__tagged_stream_muxTo_p_gr__tagged_stream_block, 0, 0},  {&_swigt__p_gr__blocks__tagged_stream_to_pdu, _p_gr__blocks__tagged_stream_to_pduTo_p_gr__tagged_stream_block, 0, 0},  {&_swigt__p_gr__tagged_stream_block, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sptr[] = {  {&_swigt__p_sptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_allocator_type,
  _swigc__p_boost__intrusive_ptrT_pmt__pmt_base_t,
  _swigc__p_boost__shared_ptrT_gr__basic_block_t,
  _swigc__p_boost__shared_ptrT_gr__block_detail_t,
  _swigc__p_boost__shared_ptrT_gr__block_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__tag_gate_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__tag_share_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__tagged_stream_align_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__tagged_stream_multiply_length_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__tagged_stream_mux_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__tagged_stream_to_pdu_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__tags_strobe_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__tcp_server_sink_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__test_tag_variable_rate_ff_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__threshold_ff_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__transcendental_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__tuntap_pdu_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__uchar_to_float_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__udp_sink_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__udp_source_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__unpack_k_bits_bb_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_bb_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ii_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__unpacked_to_packed_ss_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__vco_c_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__vco_f_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__xor_bb_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__xor_ii_t,
  _swigc__p_boost__shared_ptrT_gr__blocks__xor_ss_t,
  _swigc__p_boost__shared_ptrT_gr__buffer_reader_t,
  _swigc__p_boost__shared_ptrT_gr__buffer_t,
  _swigc__p_boost__shared_ptrT_gr__flat_flowgraph_t,
  _swigc__p_boost__shared_ptrT_gr__flowgraph_t,
  _swigc__p_boost__shared_ptrT_gr__hier_block2_t,
  _swigc__p_boost__shared_ptrT_gr__io_signature_t,
  _swigc__p_boost__shared_ptrT_gr__top_block_t,
  _swigc__p_char,
  _swigc__p_const_reference,
  _swigc__p_difference_type,
  _swigc__p_gr__basic_block,
  _swigc__p_gr__block,
  _swigc__p_gr__block_gateway,
  _swigc__p_gr__blocks__kernel__unpack_k_bits,
  _swigc__p_gr__blocks__tag_gate,
  _swigc__p_gr__blocks__tag_share,
  _swigc__p_gr__blocks__tagged_stream_align,
  _swigc__p_gr__blocks__tagged_stream_multiply_length,
  _swigc__p_gr__blocks__tagged_stream_mux,
  _swigc__p_gr__blocks__tagged_stream_to_pdu,
  _swigc__p_gr__blocks__tags_strobe,
  _swigc__p_gr__blocks__tcp_server_sink,
  _swigc__p_gr__blocks__test_tag_variable_rate_ff,
  _swigc__p_gr__blocks__threshold_ff,
  _swigc__p_gr__blocks__transcendental,
  _swigc__p_gr__blocks__tuntap_pdu,
  _swigc__p_gr__blocks__uchar_to_float,
  _swigc__p_gr__blocks__udp_sink,
  _swigc__p_gr__blocks__udp_source,
  _swigc__p_gr__blocks__unpack_k_bits_bb,
  _swigc__p_gr__blocks__unpacked_to_packed_bb,
  _swigc__p_gr__blocks__unpacked_to_packed_ii,
  _swigc__p_gr__blocks__unpacked_to_packed_ss,
  _swigc__p_gr__blocks__vco_c,
  _swigc__p_gr__blocks__vco_f,
  _swigc__p_gr__blocks__xor_bb,
  _swigc__p_gr__blocks__xor_ii,
  _swigc__p_gr__blocks__xor_ss,
  _swigc__p_gr__endianness_t,
  _swigc__p_gr__hier_block2,
  _swigc__p_gr__rt_status_t,
  _swigc__p_gr__sync_block,
  _swigc__p_gr__sync_decimator,
  _swigc__p_gr__sync_interpolator,
  _swigc__p_gr__tagged_stream_block,
  _swigc__p_gr__top_block,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_reference,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_sptr,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "byte_t",SWIG_From_int(static_cast< int >(gr::blocks::pdu::byte_t)));
  SWIG_Python_SetConstant(d, "float_t",SWIG_From_int(static_cast< int >(gr::blocks::pdu::float_t)));
  SWIG_Python_SetConstant(d, "complex_t",SWIG_From_int(static_cast< int >(gr::blocks::pdu::complex_t)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}


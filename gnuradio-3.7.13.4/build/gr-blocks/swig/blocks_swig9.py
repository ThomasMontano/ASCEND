# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blocks_swig9', [dirname(__file__)])
        except ImportError:
            import _blocks_swig9
            return _blocks_swig9
        if fp is not None:
            try:
                _mod = imp.load_module('_blocks_swig9', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blocks_swig9 = swig_import_helper()
    del swig_import_helper
else:
    import _blocks_swig9
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _blocks_swig9.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _blocks_swig9.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _blocks_swig9.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _blocks_swig9.high_res_timer_epoch()
class float_to_char(object):
    """
    Convert stream of floats to a stream of char.

    Constructor Specific Documentation:

    Build a float to char block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen=1, scale=1.0):
        """
        make(size_t vlen=1, float scale=1.0) -> float_to_char_sptr

        Convert stream of floats to a stream of char.

        Constructor Specific Documentation:

        Build a float to char block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_char_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """
        scale(float_to_char self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_char_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_char self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_char_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig9.delete_float_to_char
    __del__ = lambda self : None;
float_to_char_swigregister = _blocks_swig9.float_to_char_swigregister
float_to_char_swigregister(float_to_char)

def float_to_char_make(vlen=1, scale=1.0):
  """
    float_to_char_make(size_t vlen=1, float scale=1.0) -> float_to_char_sptr

    Convert stream of floats to a stream of char.

    Constructor Specific Documentation:

    Build a float to char block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
  return _blocks_swig9.float_to_char_make(vlen, scale)

class float_to_complex(object):
    """
    one or two floats in, complex out

    Constructor Specific Documentation:

    Build a float to complex block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> float_to_complex_sptr

        one or two floats in, complex out

        Constructor Specific Documentation:

        Build a float to complex block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig9.float_to_complex_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_float_to_complex
    __del__ = lambda self : None;
float_to_complex_swigregister = _blocks_swig9.float_to_complex_swigregister
float_to_complex_swigregister(float_to_complex)

def float_to_complex_make(vlen=1):
  """
    float_to_complex_make(size_t vlen=1) -> float_to_complex_sptr

    one or two floats in, complex out

    Constructor Specific Documentation:

    Build a float to complex block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig9.float_to_complex_make(vlen)

class magphase_to_complex(object):
    """
    two floats in (mag and phase), complex out

    Constructor Specific Documentation:

    Build a mag and phase to complex block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> magphase_to_complex_sptr

        two floats in (mag and phase), complex out

        Constructor Specific Documentation:

        Build a mag and phase to complex block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig9.magphase_to_complex_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_magphase_to_complex
    __del__ = lambda self : None;
magphase_to_complex_swigregister = _blocks_swig9.magphase_to_complex_swigregister
magphase_to_complex_swigregister(magphase_to_complex)

def magphase_to_complex_make(vlen=1):
  """
    magphase_to_complex_make(size_t vlen=1) -> magphase_to_complex_sptr

    two floats in (mag and phase), complex out

    Constructor Specific Documentation:

    Build a mag and phase to complex block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig9.magphase_to_complex_make(vlen)

class float_to_int(object):
    """
    Convert stream of floats to a stream of ints.

    Constructor Specific Documentation:

    Build a float to int block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen=1, scale=1.0):
        """
        make(size_t vlen=1, float scale=1.0) -> float_to_int_sptr

        Convert stream of floats to a stream of ints.

        Constructor Specific Documentation:

        Build a float to int block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_int_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """
        scale(float_to_int self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_int_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_int self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_int_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig9.delete_float_to_int
    __del__ = lambda self : None;
float_to_int_swigregister = _blocks_swig9.float_to_int_swigregister
float_to_int_swigregister(float_to_int)

def float_to_int_make(vlen=1, scale=1.0):
  """
    float_to_int_make(size_t vlen=1, float scale=1.0) -> float_to_int_sptr

    Convert stream of floats to a stream of ints.

    Constructor Specific Documentation:

    Build a float to int block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
  return _blocks_swig9.float_to_int_make(vlen, scale)

class float_to_short(object):
    """
    Convert stream of floats to a stream of shorts.

    Constructor Specific Documentation:

    Build a float to short block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen=1, scale=1.0):
        """
        make(size_t vlen=1, float scale=1.0) -> float_to_short_sptr

        Convert stream of floats to a stream of shorts.

        Constructor Specific Documentation:

        Build a float to short block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_short_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """
        scale(float_to_short self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_short_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_short self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_short_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig9.delete_float_to_short
    __del__ = lambda self : None;
float_to_short_swigregister = _blocks_swig9.float_to_short_swigregister
float_to_short_swigregister(float_to_short)

def float_to_short_make(vlen=1, scale=1.0):
  """
    float_to_short_make(size_t vlen=1, float scale=1.0) -> float_to_short_sptr

    Convert stream of floats to a stream of shorts.

    Constructor Specific Documentation:

    Build a float to short block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar multiplier to change the output signal scale.
    """
  return _blocks_swig9.float_to_short_make(vlen, scale)

class float_to_uchar(object):
    """
    Convert stream of floats to a stream of unsigned chars.

    Constructor Specific Documentation:

    Build a float to uchar block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> float_to_uchar_sptr

        Convert stream of floats to a stream of unsigned chars.

        Constructor Specific Documentation:

        Build a float to uchar block.
        """
        return _blocks_swig9.float_to_uchar_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_float_to_uchar
    __del__ = lambda self : None;
float_to_uchar_swigregister = _blocks_swig9.float_to_uchar_swigregister
float_to_uchar_swigregister(float_to_uchar)

def float_to_uchar_make():
  """
    float_to_uchar_make() -> float_to_uchar_sptr

    Convert stream of floats to a stream of unsigned chars.

    Constructor Specific Documentation:

    Build a float to uchar block.
    """
  return _blocks_swig9.float_to_uchar_make()

class int_to_float(object):
    """
    Convert stream of ints to a stream of floats.

    Constructor Specific Documentation:

    Build an int to float block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen=1, scale=1.0):
        """
        make(size_t vlen=1, float scale=1.0) -> int_to_float_sptr

        Convert stream of ints to a stream of floats.

        Constructor Specific Documentation:

        Build an int to float block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig9.int_to_float_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """
        scale(int_to_float self) -> float

        Get the scalar divider value.
        """
        return _blocks_swig9.int_to_float_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(int_to_float self, float scale)

        Set the scalar divider value.
        """
        return _blocks_swig9.int_to_float_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig9.delete_int_to_float
    __del__ = lambda self : None;
int_to_float_swigregister = _blocks_swig9.int_to_float_swigregister
int_to_float_swigregister(int_to_float)

def int_to_float_make(vlen=1, scale=1.0):
  """
    int_to_float_make(size_t vlen=1, float scale=1.0) -> int_to_float_sptr

    Convert stream of ints to a stream of floats.

    Constructor Specific Documentation:

    Build an int to float block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """
  return _blocks_swig9.int_to_float_make(vlen, scale)

class integrate_ss(object):
    """
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decim, int vlen=1) -> integrate_ss_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ss_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_integrate_ss
    __del__ = lambda self : None;
integrate_ss_swigregister = _blocks_swig9.integrate_ss_swigregister
integrate_ss_swigregister(integrate_ss)

def integrate_ss_make(*args, **kwargs):
  """
    integrate_ss_make(int decim, int vlen=1) -> integrate_ss_sptr

    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
  return _blocks_swig9.integrate_ss_make(*args, **kwargs)

class integrate_ii(object):
    """
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decim, int vlen=1) -> integrate_ii_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ii_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_integrate_ii
    __del__ = lambda self : None;
integrate_ii_swigregister = _blocks_swig9.integrate_ii_swigregister
integrate_ii_swigregister(integrate_ii)

def integrate_ii_make(*args, **kwargs):
  """
    integrate_ii_make(int decim, int vlen=1) -> integrate_ii_sptr

    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
  return _blocks_swig9.integrate_ii_make(*args, **kwargs)

class integrate_ff(object):
    """
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decim, int vlen=1) -> integrate_ff_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ff_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_integrate_ff
    __del__ = lambda self : None;
integrate_ff_swigregister = _blocks_swig9.integrate_ff_swigregister
integrate_ff_swigregister(integrate_ff)

def integrate_ff_make(*args, **kwargs):
  """
    integrate_ff_make(int decim, int vlen=1) -> integrate_ff_sptr

    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
  return _blocks_swig9.integrate_ff_make(*args, **kwargs)

class integrate_cc(object):
    """
    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int decim, int vlen=1) -> integrate_cc_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_integrate_cc
    __del__ = lambda self : None;
integrate_cc_swigregister = _blocks_swig9.integrate_cc_swigregister
integrate_cc_swigregister(integrate_cc)

def integrate_cc_make(*args, **kwargs):
  """
    integrate_cc_make(int decim, int vlen=1) -> integrate_cc_sptr

    Integrate successive samples and decimate.

    Constructor Specific Documentation:



    Args:
        decim : 
        vlen : 
    """
  return _blocks_swig9.integrate_cc_make(*args, **kwargs)

class interleave(object):
    """
    interleave N inputs into a single output

    This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from each input to the output unless blocksize is given in the constructor.

    Constructor Specific Documentation:

    Make a stream interleave block.

    Args:
        itemsize : stream itemsize
        blocksize : size of block of samples to interleave
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize, unsigned int blocksize=1) -> interleave_sptr

        interleave N inputs into a single output

        This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from each input to the output unless blocksize is given in the constructor.

        Constructor Specific Documentation:

        Make a stream interleave block.

        Args:
            itemsize : stream itemsize
            blocksize : size of block of samples to interleave
        """
        return _blocks_swig9.interleave_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_interleave
    __del__ = lambda self : None;
interleave_swigregister = _blocks_swig9.interleave_swigregister
interleave_swigregister(interleave)

def interleave_make(*args, **kwargs):
  """
    interleave_make(size_t itemsize, unsigned int blocksize=1) -> interleave_sptr

    interleave N inputs into a single output

    This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from each input to the output unless blocksize is given in the constructor.

    Constructor Specific Documentation:

    Make a stream interleave block.

    Args:
        itemsize : stream itemsize
        blocksize : size of block of samples to interleave
    """
  return _blocks_swig9.interleave_make(*args, **kwargs)

class interleaved_short_to_complex(object):
    """
    Convert stream of interleaved shorts to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved short to complex block.

    Args:
        vector_input : 
        swap : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vector_input=False, swap=False):
        """
        make(bool vector_input=False, bool swap=False) -> interleaved_short_to_complex_sptr

        Convert stream of interleaved shorts to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved short to complex block.

        Args:
            vector_input : 
            swap : 
        """
        return _blocks_swig9.interleaved_short_to_complex_make(vector_input, swap)

    make = staticmethod(make)
    def set_swap(self, *args, **kwargs):
        """set_swap(interleaved_short_to_complex self, bool swap)"""
        return _blocks_swig9.interleaved_short_to_complex_set_swap(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig9.delete_interleaved_short_to_complex
    __del__ = lambda self : None;
interleaved_short_to_complex_swigregister = _blocks_swig9.interleaved_short_to_complex_swigregister
interleaved_short_to_complex_swigregister(interleaved_short_to_complex)

def interleaved_short_to_complex_make(vector_input=False, swap=False):
  """
    interleaved_short_to_complex_make(bool vector_input=False, bool swap=False) -> interleaved_short_to_complex_sptr

    Convert stream of interleaved shorts to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved short to complex block.

    Args:
        vector_input : 
        swap : 
    """
  return _blocks_swig9.interleaved_short_to_complex_make(vector_input, swap)

class interleaved_char_to_complex(object):
    """
    Convert stream of interleaved chars to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved char to complex block.

    Args:
        vector_input : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vector_input=False):
        """
        make(bool vector_input=False) -> interleaved_char_to_complex_sptr

        Convert stream of interleaved chars to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved char to complex block.

        Args:
            vector_input : 
        """
        return _blocks_swig9.interleaved_char_to_complex_make(vector_input)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_interleaved_char_to_complex
    __del__ = lambda self : None;
interleaved_char_to_complex_swigregister = _blocks_swig9.interleaved_char_to_complex_swigregister
interleaved_char_to_complex_swigregister(interleaved_char_to_complex)

def interleaved_char_to_complex_make(vector_input=False):
  """
    interleaved_char_to_complex_make(bool vector_input=False) -> interleaved_char_to_complex_sptr

    Convert stream of interleaved chars to a stream of complex.

    Constructor Specific Documentation:

    Build an interleaved char to complex block.

    Args:
        vector_input : 
    """
  return _blocks_swig9.interleaved_char_to_complex_make(vector_input)

class keep_m_in_n(object):
    """
    decimate a stream, keeping the first  items out of every  starting after  items.

    Constructor Specific Documentation:

    Make a keep m in n block.

    Args:
        itemsize : stream itemsize
        m : number of items to take in block of  items
        n : block size in items
        offset : initial item offset into the stream
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize, int m, int n, int offset) -> keep_m_in_n_sptr

        decimate a stream, keeping the first  items out of every  starting after  items.

        Constructor Specific Documentation:

        Make a keep m in n block.

        Args:
            itemsize : stream itemsize
            m : number of items to take in block of  items
            n : block size in items
            offset : initial item offset into the stream
        """
        return _blocks_swig9.keep_m_in_n_make(*args, **kwargs)

    make = staticmethod(make)
    def set_m(self, *args, **kwargs):
        """set_m(keep_m_in_n self, int m)"""
        return _blocks_swig9.keep_m_in_n_set_m(self, *args, **kwargs)

    def set_n(self, *args, **kwargs):
        """set_n(keep_m_in_n self, int n)"""
        return _blocks_swig9.keep_m_in_n_set_n(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(keep_m_in_n self, int offset)"""
        return _blocks_swig9.keep_m_in_n_set_offset(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig9.delete_keep_m_in_n
    __del__ = lambda self : None;
keep_m_in_n_swigregister = _blocks_swig9.keep_m_in_n_swigregister
keep_m_in_n_swigregister(keep_m_in_n)

def keep_m_in_n_make(*args, **kwargs):
  """
    keep_m_in_n_make(size_t itemsize, int m, int n, int offset) -> keep_m_in_n_sptr

    decimate a stream, keeping the first  items out of every  starting after  items.

    Constructor Specific Documentation:

    Make a keep m in n block.

    Args:
        itemsize : stream itemsize
        m : number of items to take in block of  items
        n : block size in items
        offset : initial item offset into the stream
    """
  return _blocks_swig9.keep_m_in_n_make(*args, **kwargs)

class keep_one_in_n(object):
    """
    decimate a stream, keeping the last item out of every .

    Constructor Specific Documentation:

    Make a keep one in n block.

    Args:
        itemsize : stream itemsize
        n : block size in items
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize, int n) -> keep_one_in_n_sptr

        decimate a stream, keeping the last item out of every .

        Constructor Specific Documentation:

        Make a keep one in n block.

        Args:
            itemsize : stream itemsize
            n : block size in items
        """
        return _blocks_swig9.keep_one_in_n_make(*args, **kwargs)

    make = staticmethod(make)
    def set_n(self, *args, **kwargs):
        """set_n(keep_one_in_n self, int n)"""
        return _blocks_swig9.keep_one_in_n_set_n(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig9.delete_keep_one_in_n
    __del__ = lambda self : None;
keep_one_in_n_swigregister = _blocks_swig9.keep_one_in_n_swigregister
keep_one_in_n_swigregister(keep_one_in_n)

def keep_one_in_n_make(*args, **kwargs):
  """
    keep_one_in_n_make(size_t itemsize, int n) -> keep_one_in_n_sptr

    decimate a stream, keeping the last item out of every .

    Constructor Specific Documentation:

    Make a keep one in n block.

    Args:
        itemsize : stream itemsize
        n : block size in items
    """
  return _blocks_swig9.keep_one_in_n_make(*args, **kwargs)

class lfsr_32k_source_s(object):
    """
    LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

    This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

    Constructor Specific Documentation:

    Make a LFSR 32k source block.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> lfsr_32k_source_s_sptr

        LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

        This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

        Constructor Specific Documentation:

        Make a LFSR 32k source block.
        """
        return _blocks_swig9.lfsr_32k_source_s_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_lfsr_32k_source_s
    __del__ = lambda self : None;
lfsr_32k_source_s_swigregister = _blocks_swig9.lfsr_32k_source_s_swigregister
lfsr_32k_source_s_swigregister(lfsr_32k_source_s)

def lfsr_32k_source_s_make():
  """
    lfsr_32k_source_s_make() -> lfsr_32k_source_s_sptr

    LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

    This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

    Constructor Specific Documentation:

    Make a LFSR 32k source block.
    """
  return _blocks_swig9.lfsr_32k_source_s_make()

class max_ff(object):
    """
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen, size_t vlen_out=1) -> max_ff_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ff_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_max_ff
    __del__ = lambda self : None;
max_ff_swigregister = _blocks_swig9.max_ff_swigregister
max_ff_swigregister(max_ff)

def max_ff_make(*args, **kwargs):
  """
    max_ff_make(size_t vlen, size_t vlen_out=1) -> max_ff_sptr

    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
  return _blocks_swig9.max_ff_make(*args, **kwargs)

class max_ii(object):
    """
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen, size_t vlen_out=1) -> max_ii_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ii_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_max_ii
    __del__ = lambda self : None;
max_ii_swigregister = _blocks_swig9.max_ii_swigregister
max_ii_swigregister(max_ii)

def max_ii_make(*args, **kwargs):
  """
    max_ii_make(size_t vlen, size_t vlen_out=1) -> max_ii_sptr

    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
  return _blocks_swig9.max_ii_make(*args, **kwargs)

class max_ss(object):
    """
    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen, size_t vlen_out=1) -> max_ss_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ss_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig9.delete_max_ss
    __del__ = lambda self : None;
max_ss_swigregister = _blocks_swig9.max_ss_swigregister
max_ss_swigregister(max_ss)

def max_ss_make(*args, **kwargs):
  """
    max_ss_make(size_t vlen, size_t vlen_out=1) -> max_ss_sptr

    Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
  return _blocks_swig9.max_ss_make(*args, **kwargs)

class float_to_char_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::float_to_char)> self) -> float_to_char_sptr
        __init__(boost::shared_ptr<(gr::blocks::float_to_char)> self, float_to_char p) -> float_to_char_sptr
        """
        this = _blocks_swig9.new_float_to_char_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(float_to_char_sptr self) -> float_to_char"""
        return _blocks_swig9.float_to_char_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_float_to_char_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1, scale=1.0):
        """
        make(float_to_char_sptr self, size_t vlen=1, float scale=1.0) -> float_to_char_sptr

        Convert stream of floats to a stream of char.

        Constructor Specific Documentation:

        Build a float to char block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_char_sptr_make(self, vlen, scale)

    def scale(self):
        """
        scale(float_to_char_sptr self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_char_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_char_sptr self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_char_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(float_to_char_sptr self) -> unsigned int"""
        return _blocks_swig9.float_to_char_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(float_to_char_sptr self, int which, int delay)
        declare_sample_delay(float_to_char_sptr self, unsigned int delay)
        """
        return _blocks_swig9.float_to_char_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(float_to_char_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.float_to_char_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(float_to_char_sptr self) -> int"""
        return _blocks_swig9.float_to_char_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(float_to_char_sptr self) -> double"""
        return _blocks_swig9.float_to_char_sptr_relative_rate(self)

    def start(self):
        """start(float_to_char_sptr self) -> bool"""
        return _blocks_swig9.float_to_char_sptr_start(self)

    def stop(self):
        """stop(float_to_char_sptr self) -> bool"""
        return _blocks_swig9.float_to_char_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(float_to_char_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.float_to_char_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(float_to_char_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.float_to_char_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(float_to_char_sptr self) -> int"""
        return _blocks_swig9.float_to_char_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(float_to_char_sptr self, int m)"""
        return _blocks_swig9.float_to_char_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(float_to_char_sptr self)"""
        return _blocks_swig9.float_to_char_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(float_to_char_sptr self) -> bool"""
        return _blocks_swig9.float_to_char_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(float_to_char_sptr self, int m)"""
        return _blocks_swig9.float_to_char_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(float_to_char_sptr self) -> int"""
        return _blocks_swig9.float_to_char_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(float_to_char_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_char_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(float_to_char_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_char_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.float_to_char_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(float_to_char_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_char_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(float_to_char_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_char_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.float_to_char_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(float_to_char_sptr self, int which) -> float
        pc_input_buffers_full(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(float_to_char_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(float_to_char_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(float_to_char_sptr self, int which) -> float
        pc_output_buffers_full(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(float_to_char_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(float_to_char_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_char_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(float_to_char_sptr self) -> float"""
        return _blocks_swig9.float_to_char_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(float_to_char_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.float_to_char_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(float_to_char_sptr self)"""
        return _blocks_swig9.float_to_char_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(float_to_char_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.float_to_char_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(float_to_char_sptr self) -> int"""
        return _blocks_swig9.float_to_char_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(float_to_char_sptr self) -> int"""
        return _blocks_swig9.float_to_char_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(float_to_char_sptr self, int priority) -> int"""
        return _blocks_swig9.float_to_char_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(float_to_char_sptr self) -> std::string"""
        return _blocks_swig9.float_to_char_sptr_name(self)

    def symbol_name(self):
        """symbol_name(float_to_char_sptr self) -> std::string"""
        return _blocks_swig9.float_to_char_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(float_to_char_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_char_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(float_to_char_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_char_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(float_to_char_sptr self) -> long"""
        return _blocks_swig9.float_to_char_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(float_to_char_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.float_to_char_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(float_to_char_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.float_to_char_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(float_to_char_sptr self) -> std::string"""
        return _blocks_swig9.float_to_char_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(float_to_char_sptr self, std::string name)"""
        return _blocks_swig9.float_to_char_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(float_to_char_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.float_to_char_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(float_to_char_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.float_to_char_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(float_to_char_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.float_to_char_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(float_to_char_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.float_to_char_sptr_message_subscribers(self, *args, **kwargs)

float_to_char_sptr_swigregister = _blocks_swig9.float_to_char_sptr_swigregister
float_to_char_sptr_swigregister(float_to_char_sptr)

float_to_char_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_char = float_to_char.make;

class float_to_complex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_complex)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::float_to_complex)> self) -> float_to_complex_sptr
        __init__(boost::shared_ptr<(gr::blocks::float_to_complex)> self, float_to_complex p) -> float_to_complex_sptr
        """
        this = _blocks_swig9.new_float_to_complex_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(float_to_complex_sptr self) -> float_to_complex"""
        return _blocks_swig9.float_to_complex_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_float_to_complex_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(float_to_complex_sptr self, size_t vlen=1) -> float_to_complex_sptr

        one or two floats in, complex out

        Constructor Specific Documentation:

        Build a float to complex block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig9.float_to_complex_sptr_make(self, vlen)

    def history(self):
        """history(float_to_complex_sptr self) -> unsigned int"""
        return _blocks_swig9.float_to_complex_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(float_to_complex_sptr self, int which, int delay)
        declare_sample_delay(float_to_complex_sptr self, unsigned int delay)
        """
        return _blocks_swig9.float_to_complex_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(float_to_complex_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.float_to_complex_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(float_to_complex_sptr self) -> int"""
        return _blocks_swig9.float_to_complex_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(float_to_complex_sptr self) -> double"""
        return _blocks_swig9.float_to_complex_sptr_relative_rate(self)

    def start(self):
        """start(float_to_complex_sptr self) -> bool"""
        return _blocks_swig9.float_to_complex_sptr_start(self)

    def stop(self):
        """stop(float_to_complex_sptr self) -> bool"""
        return _blocks_swig9.float_to_complex_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(float_to_complex_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.float_to_complex_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(float_to_complex_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.float_to_complex_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(float_to_complex_sptr self) -> int"""
        return _blocks_swig9.float_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(float_to_complex_sptr self, int m)"""
        return _blocks_swig9.float_to_complex_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(float_to_complex_sptr self)"""
        return _blocks_swig9.float_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(float_to_complex_sptr self) -> bool"""
        return _blocks_swig9.float_to_complex_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(float_to_complex_sptr self, int m)"""
        return _blocks_swig9.float_to_complex_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(float_to_complex_sptr self) -> int"""
        return _blocks_swig9.float_to_complex_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(float_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_complex_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(float_to_complex_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_complex_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.float_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(float_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_complex_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(float_to_complex_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_complex_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.float_to_complex_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(float_to_complex_sptr self, int which) -> float
        pc_input_buffers_full(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(float_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(float_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(float_to_complex_sptr self, int which) -> float
        pc_output_buffers_full(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(float_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(float_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_complex_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(float_to_complex_sptr self) -> float"""
        return _blocks_swig9.float_to_complex_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(float_to_complex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.float_to_complex_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(float_to_complex_sptr self)"""
        return _blocks_swig9.float_to_complex_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(float_to_complex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.float_to_complex_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(float_to_complex_sptr self) -> int"""
        return _blocks_swig9.float_to_complex_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(float_to_complex_sptr self) -> int"""
        return _blocks_swig9.float_to_complex_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(float_to_complex_sptr self, int priority) -> int"""
        return _blocks_swig9.float_to_complex_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(float_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.float_to_complex_sptr_name(self)

    def symbol_name(self):
        """symbol_name(float_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.float_to_complex_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(float_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_complex_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(float_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_complex_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(float_to_complex_sptr self) -> long"""
        return _blocks_swig9.float_to_complex_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(float_to_complex_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.float_to_complex_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(float_to_complex_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.float_to_complex_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(float_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.float_to_complex_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(float_to_complex_sptr self, std::string name)"""
        return _blocks_swig9.float_to_complex_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(float_to_complex_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.float_to_complex_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(float_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.float_to_complex_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(float_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.float_to_complex_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(float_to_complex_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.float_to_complex_sptr_message_subscribers(self, *args, **kwargs)

float_to_complex_sptr_swigregister = _blocks_swig9.float_to_complex_sptr_swigregister
float_to_complex_sptr_swigregister(float_to_complex_sptr)

float_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_complex = float_to_complex.make;

class magphase_to_complex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::magphase_to_complex)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::magphase_to_complex)> self) -> magphase_to_complex_sptr
        __init__(boost::shared_ptr<(gr::blocks::magphase_to_complex)> self, magphase_to_complex p) -> magphase_to_complex_sptr
        """
        this = _blocks_swig9.new_magphase_to_complex_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(magphase_to_complex_sptr self) -> magphase_to_complex"""
        return _blocks_swig9.magphase_to_complex_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_magphase_to_complex_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(magphase_to_complex_sptr self, size_t vlen=1) -> magphase_to_complex_sptr

        two floats in (mag and phase), complex out

        Constructor Specific Documentation:

        Build a mag and phase to complex block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig9.magphase_to_complex_sptr_make(self, vlen)

    def history(self):
        """history(magphase_to_complex_sptr self) -> unsigned int"""
        return _blocks_swig9.magphase_to_complex_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(magphase_to_complex_sptr self, int which, int delay)
        declare_sample_delay(magphase_to_complex_sptr self, unsigned int delay)
        """
        return _blocks_swig9.magphase_to_complex_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(magphase_to_complex_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.magphase_to_complex_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(magphase_to_complex_sptr self) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(magphase_to_complex_sptr self) -> double"""
        return _blocks_swig9.magphase_to_complex_sptr_relative_rate(self)

    def start(self):
        """start(magphase_to_complex_sptr self) -> bool"""
        return _blocks_swig9.magphase_to_complex_sptr_start(self)

    def stop(self):
        """stop(magphase_to_complex_sptr self) -> bool"""
        return _blocks_swig9.magphase_to_complex_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(magphase_to_complex_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.magphase_to_complex_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(magphase_to_complex_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.magphase_to_complex_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(magphase_to_complex_sptr self) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(magphase_to_complex_sptr self, int m)"""
        return _blocks_swig9.magphase_to_complex_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(magphase_to_complex_sptr self)"""
        return _blocks_swig9.magphase_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(magphase_to_complex_sptr self) -> bool"""
        return _blocks_swig9.magphase_to_complex_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(magphase_to_complex_sptr self, int m)"""
        return _blocks_swig9.magphase_to_complex_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(magphase_to_complex_sptr self) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(magphase_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.magphase_to_complex_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(magphase_to_complex_sptr self, long max_output_buffer)
        set_max_output_buffer(magphase_to_complex_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.magphase_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(magphase_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.magphase_to_complex_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(magphase_to_complex_sptr self, long min_output_buffer)
        set_min_output_buffer(magphase_to_complex_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.magphase_to_complex_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(magphase_to_complex_sptr self, int which) -> float
        pc_input_buffers_full(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(magphase_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_avg(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(magphase_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_var(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(magphase_to_complex_sptr self, int which) -> float
        pc_output_buffers_full(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(magphase_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_avg(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(magphase_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_var(magphase_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.magphase_to_complex_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(magphase_to_complex_sptr self) -> float"""
        return _blocks_swig9.magphase_to_complex_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(magphase_to_complex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.magphase_to_complex_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(magphase_to_complex_sptr self)"""
        return _blocks_swig9.magphase_to_complex_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(magphase_to_complex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.magphase_to_complex_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(magphase_to_complex_sptr self) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(magphase_to_complex_sptr self) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(magphase_to_complex_sptr self, int priority) -> int"""
        return _blocks_swig9.magphase_to_complex_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(magphase_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.magphase_to_complex_sptr_name(self)

    def symbol_name(self):
        """symbol_name(magphase_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.magphase_to_complex_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(magphase_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.magphase_to_complex_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(magphase_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.magphase_to_complex_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(magphase_to_complex_sptr self) -> long"""
        return _blocks_swig9.magphase_to_complex_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(magphase_to_complex_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.magphase_to_complex_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(magphase_to_complex_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.magphase_to_complex_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(magphase_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.magphase_to_complex_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(magphase_to_complex_sptr self, std::string name)"""
        return _blocks_swig9.magphase_to_complex_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(magphase_to_complex_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.magphase_to_complex_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(magphase_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.magphase_to_complex_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(magphase_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.magphase_to_complex_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(magphase_to_complex_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.magphase_to_complex_sptr_message_subscribers(self, *args, **kwargs)

magphase_to_complex_sptr_swigregister = _blocks_swig9.magphase_to_complex_sptr_swigregister
magphase_to_complex_sptr_swigregister(magphase_to_complex_sptr)

magphase_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
magphase_to_complex = magphase_to_complex.make;

class float_to_int_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::float_to_int)> self) -> float_to_int_sptr
        __init__(boost::shared_ptr<(gr::blocks::float_to_int)> self, float_to_int p) -> float_to_int_sptr
        """
        this = _blocks_swig9.new_float_to_int_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(float_to_int_sptr self) -> float_to_int"""
        return _blocks_swig9.float_to_int_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_float_to_int_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1, scale=1.0):
        """
        make(float_to_int_sptr self, size_t vlen=1, float scale=1.0) -> float_to_int_sptr

        Convert stream of floats to a stream of ints.

        Constructor Specific Documentation:

        Build a float to int block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_int_sptr_make(self, vlen, scale)

    def scale(self):
        """
        scale(float_to_int_sptr self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_int_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_int_sptr self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_int_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(float_to_int_sptr self) -> unsigned int"""
        return _blocks_swig9.float_to_int_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(float_to_int_sptr self, int which, int delay)
        declare_sample_delay(float_to_int_sptr self, unsigned int delay)
        """
        return _blocks_swig9.float_to_int_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(float_to_int_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.float_to_int_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(float_to_int_sptr self) -> int"""
        return _blocks_swig9.float_to_int_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(float_to_int_sptr self) -> double"""
        return _blocks_swig9.float_to_int_sptr_relative_rate(self)

    def start(self):
        """start(float_to_int_sptr self) -> bool"""
        return _blocks_swig9.float_to_int_sptr_start(self)

    def stop(self):
        """stop(float_to_int_sptr self) -> bool"""
        return _blocks_swig9.float_to_int_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(float_to_int_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.float_to_int_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(float_to_int_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.float_to_int_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(float_to_int_sptr self) -> int"""
        return _blocks_swig9.float_to_int_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(float_to_int_sptr self, int m)"""
        return _blocks_swig9.float_to_int_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(float_to_int_sptr self)"""
        return _blocks_swig9.float_to_int_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(float_to_int_sptr self) -> bool"""
        return _blocks_swig9.float_to_int_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(float_to_int_sptr self, int m)"""
        return _blocks_swig9.float_to_int_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(float_to_int_sptr self) -> int"""
        return _blocks_swig9.float_to_int_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(float_to_int_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_int_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(float_to_int_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_int_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.float_to_int_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(float_to_int_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_int_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(float_to_int_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_int_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.float_to_int_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(float_to_int_sptr self, int which) -> float
        pc_input_buffers_full(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(float_to_int_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(float_to_int_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(float_to_int_sptr self, int which) -> float
        pc_output_buffers_full(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(float_to_int_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(float_to_int_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_int_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_int_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(float_to_int_sptr self) -> float"""
        return _blocks_swig9.float_to_int_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(float_to_int_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.float_to_int_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(float_to_int_sptr self)"""
        return _blocks_swig9.float_to_int_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(float_to_int_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.float_to_int_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(float_to_int_sptr self) -> int"""
        return _blocks_swig9.float_to_int_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(float_to_int_sptr self) -> int"""
        return _blocks_swig9.float_to_int_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(float_to_int_sptr self, int priority) -> int"""
        return _blocks_swig9.float_to_int_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(float_to_int_sptr self) -> std::string"""
        return _blocks_swig9.float_to_int_sptr_name(self)

    def symbol_name(self):
        """symbol_name(float_to_int_sptr self) -> std::string"""
        return _blocks_swig9.float_to_int_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(float_to_int_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_int_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(float_to_int_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_int_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(float_to_int_sptr self) -> long"""
        return _blocks_swig9.float_to_int_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(float_to_int_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.float_to_int_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(float_to_int_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.float_to_int_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(float_to_int_sptr self) -> std::string"""
        return _blocks_swig9.float_to_int_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(float_to_int_sptr self, std::string name)"""
        return _blocks_swig9.float_to_int_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(float_to_int_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.float_to_int_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(float_to_int_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.float_to_int_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(float_to_int_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.float_to_int_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(float_to_int_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.float_to_int_sptr_message_subscribers(self, *args, **kwargs)

float_to_int_sptr_swigregister = _blocks_swig9.float_to_int_sptr_swigregister
float_to_int_sptr_swigregister(float_to_int_sptr)

float_to_int_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_int = float_to_int.make;

class float_to_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::float_to_short)> self) -> float_to_short_sptr
        __init__(boost::shared_ptr<(gr::blocks::float_to_short)> self, float_to_short p) -> float_to_short_sptr
        """
        this = _blocks_swig9.new_float_to_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(float_to_short_sptr self) -> float_to_short"""
        return _blocks_swig9.float_to_short_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_float_to_short_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1, scale=1.0):
        """
        make(float_to_short_sptr self, size_t vlen=1, float scale=1.0) -> float_to_short_sptr

        Convert stream of floats to a stream of shorts.

        Constructor Specific Documentation:

        Build a float to short block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar multiplier to change the output signal scale.
        """
        return _blocks_swig9.float_to_short_sptr_make(self, vlen, scale)

    def scale(self):
        """
        scale(float_to_short_sptr self) -> float

        Get the scalar multiplier value.
        """
        return _blocks_swig9.float_to_short_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(float_to_short_sptr self, float scale)

        Set the scalar multiplier value.
        """
        return _blocks_swig9.float_to_short_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(float_to_short_sptr self) -> unsigned int"""
        return _blocks_swig9.float_to_short_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(float_to_short_sptr self, int which, int delay)
        declare_sample_delay(float_to_short_sptr self, unsigned int delay)
        """
        return _blocks_swig9.float_to_short_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(float_to_short_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.float_to_short_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(float_to_short_sptr self) -> int"""
        return _blocks_swig9.float_to_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(float_to_short_sptr self) -> double"""
        return _blocks_swig9.float_to_short_sptr_relative_rate(self)

    def start(self):
        """start(float_to_short_sptr self) -> bool"""
        return _blocks_swig9.float_to_short_sptr_start(self)

    def stop(self):
        """stop(float_to_short_sptr self) -> bool"""
        return _blocks_swig9.float_to_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(float_to_short_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.float_to_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(float_to_short_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.float_to_short_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(float_to_short_sptr self) -> int"""
        return _blocks_swig9.float_to_short_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(float_to_short_sptr self, int m)"""
        return _blocks_swig9.float_to_short_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(float_to_short_sptr self)"""
        return _blocks_swig9.float_to_short_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(float_to_short_sptr self) -> bool"""
        return _blocks_swig9.float_to_short_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(float_to_short_sptr self, int m)"""
        return _blocks_swig9.float_to_short_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(float_to_short_sptr self) -> int"""
        return _blocks_swig9.float_to_short_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(float_to_short_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_short_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(float_to_short_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_short_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.float_to_short_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(float_to_short_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_short_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(float_to_short_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_short_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.float_to_short_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(float_to_short_sptr self, int which) -> float
        pc_input_buffers_full(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(float_to_short_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(float_to_short_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(float_to_short_sptr self, int which) -> float
        pc_output_buffers_full(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(float_to_short_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(float_to_short_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_short_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(float_to_short_sptr self) -> float"""
        return _blocks_swig9.float_to_short_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(float_to_short_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.float_to_short_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(float_to_short_sptr self)"""
        return _blocks_swig9.float_to_short_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(float_to_short_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.float_to_short_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(float_to_short_sptr self) -> int"""
        return _blocks_swig9.float_to_short_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(float_to_short_sptr self) -> int"""
        return _blocks_swig9.float_to_short_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(float_to_short_sptr self, int priority) -> int"""
        return _blocks_swig9.float_to_short_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(float_to_short_sptr self) -> std::string"""
        return _blocks_swig9.float_to_short_sptr_name(self)

    def symbol_name(self):
        """symbol_name(float_to_short_sptr self) -> std::string"""
        return _blocks_swig9.float_to_short_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(float_to_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(float_to_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_short_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(float_to_short_sptr self) -> long"""
        return _blocks_swig9.float_to_short_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(float_to_short_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.float_to_short_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(float_to_short_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.float_to_short_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(float_to_short_sptr self) -> std::string"""
        return _blocks_swig9.float_to_short_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(float_to_short_sptr self, std::string name)"""
        return _blocks_swig9.float_to_short_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(float_to_short_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.float_to_short_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(float_to_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.float_to_short_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(float_to_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.float_to_short_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(float_to_short_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.float_to_short_sptr_message_subscribers(self, *args, **kwargs)

float_to_short_sptr_swigregister = _blocks_swig9.float_to_short_sptr_swigregister
float_to_short_sptr_swigregister(float_to_short_sptr)

float_to_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_short = float_to_short.make;

class float_to_uchar_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::float_to_uchar)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::float_to_uchar)> self) -> float_to_uchar_sptr
        __init__(boost::shared_ptr<(gr::blocks::float_to_uchar)> self, float_to_uchar p) -> float_to_uchar_sptr
        """
        this = _blocks_swig9.new_float_to_uchar_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(float_to_uchar_sptr self) -> float_to_uchar"""
        return _blocks_swig9.float_to_uchar_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_float_to_uchar_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(float_to_uchar_sptr self) -> float_to_uchar_sptr

        Convert stream of floats to a stream of unsigned chars.

        Constructor Specific Documentation:

        Build a float to uchar block.
        """
        return _blocks_swig9.float_to_uchar_sptr_make(self)

    def history(self):
        """history(float_to_uchar_sptr self) -> unsigned int"""
        return _blocks_swig9.float_to_uchar_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(float_to_uchar_sptr self, int which, int delay)
        declare_sample_delay(float_to_uchar_sptr self, unsigned int delay)
        """
        return _blocks_swig9.float_to_uchar_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(float_to_uchar_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.float_to_uchar_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(float_to_uchar_sptr self) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(float_to_uchar_sptr self) -> double"""
        return _blocks_swig9.float_to_uchar_sptr_relative_rate(self)

    def start(self):
        """start(float_to_uchar_sptr self) -> bool"""
        return _blocks_swig9.float_to_uchar_sptr_start(self)

    def stop(self):
        """stop(float_to_uchar_sptr self) -> bool"""
        return _blocks_swig9.float_to_uchar_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(float_to_uchar_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.float_to_uchar_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(float_to_uchar_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.float_to_uchar_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(float_to_uchar_sptr self) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(float_to_uchar_sptr self, int m)"""
        return _blocks_swig9.float_to_uchar_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(float_to_uchar_sptr self)"""
        return _blocks_swig9.float_to_uchar_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(float_to_uchar_sptr self) -> bool"""
        return _blocks_swig9.float_to_uchar_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(float_to_uchar_sptr self, int m)"""
        return _blocks_swig9.float_to_uchar_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(float_to_uchar_sptr self) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(float_to_uchar_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_uchar_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(float_to_uchar_sptr self, long max_output_buffer)
        set_max_output_buffer(float_to_uchar_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.float_to_uchar_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(float_to_uchar_sptr self, int i) -> long"""
        return _blocks_swig9.float_to_uchar_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(float_to_uchar_sptr self, long min_output_buffer)
        set_min_output_buffer(float_to_uchar_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.float_to_uchar_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(float_to_uchar_sptr self, int which) -> float
        pc_input_buffers_full(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(float_to_uchar_sptr self, int which) -> float
        pc_input_buffers_full_avg(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(float_to_uchar_sptr self, int which) -> float
        pc_input_buffers_full_var(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(float_to_uchar_sptr self, int which) -> float
        pc_output_buffers_full(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(float_to_uchar_sptr self, int which) -> float
        pc_output_buffers_full_avg(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(float_to_uchar_sptr self, int which) -> float
        pc_output_buffers_full_var(float_to_uchar_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.float_to_uchar_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(float_to_uchar_sptr self) -> float"""
        return _blocks_swig9.float_to_uchar_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(float_to_uchar_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.float_to_uchar_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(float_to_uchar_sptr self)"""
        return _blocks_swig9.float_to_uchar_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(float_to_uchar_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.float_to_uchar_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(float_to_uchar_sptr self) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(float_to_uchar_sptr self) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(float_to_uchar_sptr self, int priority) -> int"""
        return _blocks_swig9.float_to_uchar_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(float_to_uchar_sptr self) -> std::string"""
        return _blocks_swig9.float_to_uchar_sptr_name(self)

    def symbol_name(self):
        """symbol_name(float_to_uchar_sptr self) -> std::string"""
        return _blocks_swig9.float_to_uchar_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(float_to_uchar_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_uchar_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(float_to_uchar_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.float_to_uchar_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(float_to_uchar_sptr self) -> long"""
        return _blocks_swig9.float_to_uchar_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(float_to_uchar_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.float_to_uchar_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(float_to_uchar_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.float_to_uchar_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(float_to_uchar_sptr self) -> std::string"""
        return _blocks_swig9.float_to_uchar_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(float_to_uchar_sptr self, std::string name)"""
        return _blocks_swig9.float_to_uchar_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(float_to_uchar_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.float_to_uchar_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(float_to_uchar_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.float_to_uchar_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(float_to_uchar_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.float_to_uchar_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(float_to_uchar_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.float_to_uchar_sptr_message_subscribers(self, *args, **kwargs)

float_to_uchar_sptr_swigregister = _blocks_swig9.float_to_uchar_sptr_swigregister
float_to_uchar_sptr_swigregister(float_to_uchar_sptr)

float_to_uchar_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
float_to_uchar = float_to_uchar.make;

class int_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::int_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::int_to_float)> self) -> int_to_float_sptr
        __init__(boost::shared_ptr<(gr::blocks::int_to_float)> self, int_to_float p) -> int_to_float_sptr
        """
        this = _blocks_swig9.new_int_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(int_to_float_sptr self) -> int_to_float"""
        return _blocks_swig9.int_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_int_to_float_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1, scale=1.0):
        """
        make(int_to_float_sptr self, size_t vlen=1, float scale=1.0) -> int_to_float_sptr

        Convert stream of ints to a stream of floats.

        Constructor Specific Documentation:

        Build an int to float block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig9.int_to_float_sptr_make(self, vlen, scale)

    def scale(self):
        """
        scale(int_to_float_sptr self) -> float

        Get the scalar divider value.
        """
        return _blocks_swig9.int_to_float_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(int_to_float_sptr self, float scale)

        Set the scalar divider value.
        """
        return _blocks_swig9.int_to_float_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(int_to_float_sptr self) -> unsigned int"""
        return _blocks_swig9.int_to_float_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(int_to_float_sptr self, int which, int delay)
        declare_sample_delay(int_to_float_sptr self, unsigned int delay)
        """
        return _blocks_swig9.int_to_float_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(int_to_float_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.int_to_float_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(int_to_float_sptr self) -> int"""
        return _blocks_swig9.int_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(int_to_float_sptr self) -> double"""
        return _blocks_swig9.int_to_float_sptr_relative_rate(self)

    def start(self):
        """start(int_to_float_sptr self) -> bool"""
        return _blocks_swig9.int_to_float_sptr_start(self)

    def stop(self):
        """stop(int_to_float_sptr self) -> bool"""
        return _blocks_swig9.int_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(int_to_float_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.int_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(int_to_float_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.int_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(int_to_float_sptr self) -> int"""
        return _blocks_swig9.int_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(int_to_float_sptr self, int m)"""
        return _blocks_swig9.int_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(int_to_float_sptr self)"""
        return _blocks_swig9.int_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(int_to_float_sptr self) -> bool"""
        return _blocks_swig9.int_to_float_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(int_to_float_sptr self, int m)"""
        return _blocks_swig9.int_to_float_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(int_to_float_sptr self) -> int"""
        return _blocks_swig9.int_to_float_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(int_to_float_sptr self, int i) -> long"""
        return _blocks_swig9.int_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(int_to_float_sptr self, long max_output_buffer)
        set_max_output_buffer(int_to_float_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.int_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(int_to_float_sptr self, int i) -> long"""
        return _blocks_swig9.int_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(int_to_float_sptr self, long min_output_buffer)
        set_min_output_buffer(int_to_float_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.int_to_float_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(int_to_float_sptr self, int which) -> float
        pc_input_buffers_full(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(int_to_float_sptr self, int which) -> float
        pc_input_buffers_full_avg(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(int_to_float_sptr self, int which) -> float
        pc_input_buffers_full_var(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(int_to_float_sptr self, int which) -> float
        pc_output_buffers_full(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(int_to_float_sptr self, int which) -> float
        pc_output_buffers_full_avg(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(int_to_float_sptr self, int which) -> float
        pc_output_buffers_full_var(int_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.int_to_float_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(int_to_float_sptr self) -> float"""
        return _blocks_swig9.int_to_float_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(int_to_float_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.int_to_float_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(int_to_float_sptr self)"""
        return _blocks_swig9.int_to_float_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(int_to_float_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.int_to_float_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(int_to_float_sptr self) -> int"""
        return _blocks_swig9.int_to_float_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(int_to_float_sptr self) -> int"""
        return _blocks_swig9.int_to_float_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(int_to_float_sptr self, int priority) -> int"""
        return _blocks_swig9.int_to_float_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(int_to_float_sptr self) -> std::string"""
        return _blocks_swig9.int_to_float_sptr_name(self)

    def symbol_name(self):
        """symbol_name(int_to_float_sptr self) -> std::string"""
        return _blocks_swig9.int_to_float_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(int_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.int_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(int_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.int_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(int_to_float_sptr self) -> long"""
        return _blocks_swig9.int_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(int_to_float_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.int_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(int_to_float_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.int_to_float_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(int_to_float_sptr self) -> std::string"""
        return _blocks_swig9.int_to_float_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(int_to_float_sptr self, std::string name)"""
        return _blocks_swig9.int_to_float_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(int_to_float_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.int_to_float_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(int_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.int_to_float_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(int_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.int_to_float_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(int_to_float_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.int_to_float_sptr_message_subscribers(self, *args, **kwargs)

int_to_float_sptr_swigregister = _blocks_swig9.int_to_float_sptr_swigregister
int_to_float_sptr_swigregister(int_to_float_sptr)

int_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
int_to_float = int_to_float.make;

class integrate_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::integrate_ss)> self) -> integrate_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::integrate_ss)> self, integrate_ss p) -> integrate_ss_sptr
        """
        this = _blocks_swig9.new_integrate_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(integrate_ss_sptr self) -> integrate_ss"""
        return _blocks_swig9.integrate_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_integrate_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(integrate_ss_sptr self, int decim, int vlen=1) -> integrate_ss_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ss_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(integrate_ss_sptr self) -> unsigned int"""
        return _blocks_swig9.integrate_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(integrate_ss_sptr self, int which, int delay)
        declare_sample_delay(integrate_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig9.integrate_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(integrate_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.integrate_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(integrate_ss_sptr self) -> int"""
        return _blocks_swig9.integrate_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(integrate_ss_sptr self) -> double"""
        return _blocks_swig9.integrate_ss_sptr_relative_rate(self)

    def start(self):
        """start(integrate_ss_sptr self) -> bool"""
        return _blocks_swig9.integrate_ss_sptr_start(self)

    def stop(self):
        """stop(integrate_ss_sptr self) -> bool"""
        return _blocks_swig9.integrate_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(integrate_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.integrate_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(integrate_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.integrate_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(integrate_ss_sptr self) -> int"""
        return _blocks_swig9.integrate_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(integrate_ss_sptr self, int m)"""
        return _blocks_swig9.integrate_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(integrate_ss_sptr self)"""
        return _blocks_swig9.integrate_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(integrate_ss_sptr self) -> bool"""
        return _blocks_swig9.integrate_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(integrate_ss_sptr self, int m)"""
        return _blocks_swig9.integrate_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(integrate_ss_sptr self) -> int"""
        return _blocks_swig9.integrate_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(integrate_ss_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(integrate_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.integrate_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(integrate_ss_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(integrate_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.integrate_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(integrate_ss_sptr self, int which) -> float
        pc_input_buffers_full(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(integrate_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(integrate_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(integrate_ss_sptr self, int which) -> float
        pc_output_buffers_full(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(integrate_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(integrate_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(integrate_ss_sptr self) -> float"""
        return _blocks_swig9.integrate_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(integrate_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.integrate_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(integrate_ss_sptr self)"""
        return _blocks_swig9.integrate_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(integrate_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.integrate_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(integrate_ss_sptr self) -> int"""
        return _blocks_swig9.integrate_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(integrate_ss_sptr self) -> int"""
        return _blocks_swig9.integrate_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(integrate_ss_sptr self, int priority) -> int"""
        return _blocks_swig9.integrate_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(integrate_ss_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(integrate_ss_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(integrate_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(integrate_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(integrate_ss_sptr self) -> long"""
        return _blocks_swig9.integrate_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(integrate_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.integrate_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(integrate_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.integrate_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(integrate_ss_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(integrate_ss_sptr self, std::string name)"""
        return _blocks_swig9.integrate_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(integrate_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.integrate_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(integrate_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.integrate_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(integrate_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.integrate_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(integrate_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.integrate_ss_sptr_message_subscribers(self, *args, **kwargs)

integrate_ss_sptr_swigregister = _blocks_swig9.integrate_ss_sptr_swigregister
integrate_ss_sptr_swigregister(integrate_ss_sptr)

integrate_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ss = integrate_ss.make;

class integrate_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::integrate_ii)> self) -> integrate_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::integrate_ii)> self, integrate_ii p) -> integrate_ii_sptr
        """
        this = _blocks_swig9.new_integrate_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(integrate_ii_sptr self) -> integrate_ii"""
        return _blocks_swig9.integrate_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_integrate_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(integrate_ii_sptr self, int decim, int vlen=1) -> integrate_ii_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ii_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(integrate_ii_sptr self) -> unsigned int"""
        return _blocks_swig9.integrate_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(integrate_ii_sptr self, int which, int delay)
        declare_sample_delay(integrate_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig9.integrate_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(integrate_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.integrate_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(integrate_ii_sptr self) -> int"""
        return _blocks_swig9.integrate_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(integrate_ii_sptr self) -> double"""
        return _blocks_swig9.integrate_ii_sptr_relative_rate(self)

    def start(self):
        """start(integrate_ii_sptr self) -> bool"""
        return _blocks_swig9.integrate_ii_sptr_start(self)

    def stop(self):
        """stop(integrate_ii_sptr self) -> bool"""
        return _blocks_swig9.integrate_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(integrate_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.integrate_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(integrate_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.integrate_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(integrate_ii_sptr self) -> int"""
        return _blocks_swig9.integrate_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(integrate_ii_sptr self, int m)"""
        return _blocks_swig9.integrate_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(integrate_ii_sptr self)"""
        return _blocks_swig9.integrate_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(integrate_ii_sptr self) -> bool"""
        return _blocks_swig9.integrate_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(integrate_ii_sptr self, int m)"""
        return _blocks_swig9.integrate_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(integrate_ii_sptr self) -> int"""
        return _blocks_swig9.integrate_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(integrate_ii_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(integrate_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.integrate_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(integrate_ii_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(integrate_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.integrate_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(integrate_ii_sptr self, int which) -> float
        pc_input_buffers_full(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(integrate_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(integrate_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(integrate_ii_sptr self, int which) -> float
        pc_output_buffers_full(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(integrate_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(integrate_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(integrate_ii_sptr self) -> float"""
        return _blocks_swig9.integrate_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(integrate_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.integrate_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(integrate_ii_sptr self)"""
        return _blocks_swig9.integrate_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(integrate_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.integrate_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(integrate_ii_sptr self) -> int"""
        return _blocks_swig9.integrate_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(integrate_ii_sptr self) -> int"""
        return _blocks_swig9.integrate_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(integrate_ii_sptr self, int priority) -> int"""
        return _blocks_swig9.integrate_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(integrate_ii_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(integrate_ii_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(integrate_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(integrate_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(integrate_ii_sptr self) -> long"""
        return _blocks_swig9.integrate_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(integrate_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.integrate_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(integrate_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.integrate_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(integrate_ii_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(integrate_ii_sptr self, std::string name)"""
        return _blocks_swig9.integrate_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(integrate_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.integrate_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(integrate_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.integrate_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(integrate_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.integrate_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(integrate_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.integrate_ii_sptr_message_subscribers(self, *args, **kwargs)

integrate_ii_sptr_swigregister = _blocks_swig9.integrate_ii_sptr_swigregister
integrate_ii_sptr_swigregister(integrate_ii_sptr)

integrate_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ii = integrate_ii.make;

class integrate_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::integrate_ff)> self) -> integrate_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::integrate_ff)> self, integrate_ff p) -> integrate_ff_sptr
        """
        this = _blocks_swig9.new_integrate_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(integrate_ff_sptr self) -> integrate_ff"""
        return _blocks_swig9.integrate_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_integrate_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(integrate_ff_sptr self, int decim, int vlen=1) -> integrate_ff_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_ff_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(integrate_ff_sptr self) -> unsigned int"""
        return _blocks_swig9.integrate_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(integrate_ff_sptr self, int which, int delay)
        declare_sample_delay(integrate_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig9.integrate_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(integrate_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.integrate_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(integrate_ff_sptr self) -> int"""
        return _blocks_swig9.integrate_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(integrate_ff_sptr self) -> double"""
        return _blocks_swig9.integrate_ff_sptr_relative_rate(self)

    def start(self):
        """start(integrate_ff_sptr self) -> bool"""
        return _blocks_swig9.integrate_ff_sptr_start(self)

    def stop(self):
        """stop(integrate_ff_sptr self) -> bool"""
        return _blocks_swig9.integrate_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(integrate_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.integrate_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(integrate_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.integrate_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(integrate_ff_sptr self) -> int"""
        return _blocks_swig9.integrate_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(integrate_ff_sptr self, int m)"""
        return _blocks_swig9.integrate_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(integrate_ff_sptr self)"""
        return _blocks_swig9.integrate_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(integrate_ff_sptr self) -> bool"""
        return _blocks_swig9.integrate_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(integrate_ff_sptr self, int m)"""
        return _blocks_swig9.integrate_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(integrate_ff_sptr self) -> int"""
        return _blocks_swig9.integrate_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(integrate_ff_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(integrate_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.integrate_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(integrate_ff_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(integrate_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.integrate_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(integrate_ff_sptr self, int which) -> float
        pc_input_buffers_full(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(integrate_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(integrate_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(integrate_ff_sptr self, int which) -> float
        pc_output_buffers_full(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(integrate_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(integrate_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(integrate_ff_sptr self) -> float"""
        return _blocks_swig9.integrate_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(integrate_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.integrate_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(integrate_ff_sptr self)"""
        return _blocks_swig9.integrate_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(integrate_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.integrate_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(integrate_ff_sptr self) -> int"""
        return _blocks_swig9.integrate_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(integrate_ff_sptr self) -> int"""
        return _blocks_swig9.integrate_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(integrate_ff_sptr self, int priority) -> int"""
        return _blocks_swig9.integrate_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(integrate_ff_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(integrate_ff_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(integrate_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(integrate_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(integrate_ff_sptr self) -> long"""
        return _blocks_swig9.integrate_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(integrate_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.integrate_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(integrate_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.integrate_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(integrate_ff_sptr self) -> std::string"""
        return _blocks_swig9.integrate_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(integrate_ff_sptr self, std::string name)"""
        return _blocks_swig9.integrate_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(integrate_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.integrate_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(integrate_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.integrate_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(integrate_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.integrate_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(integrate_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.integrate_ff_sptr_message_subscribers(self, *args, **kwargs)

integrate_ff_sptr_swigregister = _blocks_swig9.integrate_ff_sptr_swigregister
integrate_ff_sptr_swigregister(integrate_ff_sptr)

integrate_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_ff = integrate_ff.make;

class integrate_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::integrate_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::integrate_cc)> self) -> integrate_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::integrate_cc)> self, integrate_cc p) -> integrate_cc_sptr
        """
        this = _blocks_swig9.new_integrate_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(integrate_cc_sptr self) -> integrate_cc"""
        return _blocks_swig9.integrate_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_integrate_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(integrate_cc_sptr self, int decim, int vlen=1) -> integrate_cc_sptr

        Integrate successive samples and decimate.

        Constructor Specific Documentation:



        Args:
            decim : 
            vlen : 
        """
        return _blocks_swig9.integrate_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(integrate_cc_sptr self) -> unsigned int"""
        return _blocks_swig9.integrate_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(integrate_cc_sptr self, int which, int delay)
        declare_sample_delay(integrate_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig9.integrate_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(integrate_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.integrate_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(integrate_cc_sptr self) -> int"""
        return _blocks_swig9.integrate_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(integrate_cc_sptr self) -> double"""
        return _blocks_swig9.integrate_cc_sptr_relative_rate(self)

    def start(self):
        """start(integrate_cc_sptr self) -> bool"""
        return _blocks_swig9.integrate_cc_sptr_start(self)

    def stop(self):
        """stop(integrate_cc_sptr self) -> bool"""
        return _blocks_swig9.integrate_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(integrate_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.integrate_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(integrate_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.integrate_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(integrate_cc_sptr self) -> int"""
        return _blocks_swig9.integrate_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(integrate_cc_sptr self, int m)"""
        return _blocks_swig9.integrate_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(integrate_cc_sptr self)"""
        return _blocks_swig9.integrate_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(integrate_cc_sptr self) -> bool"""
        return _blocks_swig9.integrate_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(integrate_cc_sptr self, int m)"""
        return _blocks_swig9.integrate_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(integrate_cc_sptr self) -> int"""
        return _blocks_swig9.integrate_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(integrate_cc_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(integrate_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(integrate_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.integrate_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(integrate_cc_sptr self, int i) -> long"""
        return _blocks_swig9.integrate_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(integrate_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(integrate_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.integrate_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(integrate_cc_sptr self, int which) -> float
        pc_input_buffers_full(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(integrate_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(integrate_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(integrate_cc_sptr self, int which) -> float
        pc_output_buffers_full(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(integrate_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(integrate_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(integrate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.integrate_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(integrate_cc_sptr self) -> float"""
        return _blocks_swig9.integrate_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(integrate_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.integrate_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(integrate_cc_sptr self)"""
        return _blocks_swig9.integrate_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(integrate_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.integrate_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(integrate_cc_sptr self) -> int"""
        return _blocks_swig9.integrate_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(integrate_cc_sptr self) -> int"""
        return _blocks_swig9.integrate_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(integrate_cc_sptr self, int priority) -> int"""
        return _blocks_swig9.integrate_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(integrate_cc_sptr self) -> std::string"""
        return _blocks_swig9.integrate_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(integrate_cc_sptr self) -> std::string"""
        return _blocks_swig9.integrate_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(integrate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(integrate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.integrate_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(integrate_cc_sptr self) -> long"""
        return _blocks_swig9.integrate_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(integrate_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.integrate_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(integrate_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.integrate_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(integrate_cc_sptr self) -> std::string"""
        return _blocks_swig9.integrate_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(integrate_cc_sptr self, std::string name)"""
        return _blocks_swig9.integrate_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(integrate_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.integrate_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(integrate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.integrate_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(integrate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.integrate_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(integrate_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.integrate_cc_sptr_message_subscribers(self, *args, **kwargs)

integrate_cc_sptr_swigregister = _blocks_swig9.integrate_cc_sptr_swigregister
integrate_cc_sptr_swigregister(integrate_cc_sptr)

integrate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
integrate_cc = integrate_cc.make;

class interleave_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::interleave)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::interleave)> self) -> interleave_sptr
        __init__(boost::shared_ptr<(gr::blocks::interleave)> self, interleave p) -> interleave_sptr
        """
        this = _blocks_swig9.new_interleave_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(interleave_sptr self) -> interleave"""
        return _blocks_swig9.interleave_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_interleave_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(interleave_sptr self, size_t itemsize, unsigned int blocksize=1) -> interleave_sptr

        interleave N inputs into a single output

        This block interleaves blocks of samples. For each input connection, the samples are interleaved successively to the output connection. By default, the block interleaves a single sample from each input to the output unless blocksize is given in the constructor.

        Constructor Specific Documentation:

        Make a stream interleave block.

        Args:
            itemsize : stream itemsize
            blocksize : size of block of samples to interleave
        """
        return _blocks_swig9.interleave_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(interleave_sptr self) -> unsigned int"""
        return _blocks_swig9.interleave_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(interleave_sptr self, int which, int delay)
        declare_sample_delay(interleave_sptr self, unsigned int delay)
        """
        return _blocks_swig9.interleave_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(interleave_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.interleave_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(interleave_sptr self) -> int"""
        return _blocks_swig9.interleave_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(interleave_sptr self) -> double"""
        return _blocks_swig9.interleave_sptr_relative_rate(self)

    def start(self):
        """start(interleave_sptr self) -> bool"""
        return _blocks_swig9.interleave_sptr_start(self)

    def stop(self):
        """stop(interleave_sptr self) -> bool"""
        return _blocks_swig9.interleave_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(interleave_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.interleave_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(interleave_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.interleave_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(interleave_sptr self) -> int"""
        return _blocks_swig9.interleave_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(interleave_sptr self, int m)"""
        return _blocks_swig9.interleave_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(interleave_sptr self)"""
        return _blocks_swig9.interleave_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(interleave_sptr self) -> bool"""
        return _blocks_swig9.interleave_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(interleave_sptr self, int m)"""
        return _blocks_swig9.interleave_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(interleave_sptr self) -> int"""
        return _blocks_swig9.interleave_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(interleave_sptr self, int i) -> long"""
        return _blocks_swig9.interleave_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(interleave_sptr self, long max_output_buffer)
        set_max_output_buffer(interleave_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.interleave_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(interleave_sptr self, int i) -> long"""
        return _blocks_swig9.interleave_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(interleave_sptr self, long min_output_buffer)
        set_min_output_buffer(interleave_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.interleave_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(interleave_sptr self, int which) -> float
        pc_input_buffers_full(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(interleave_sptr self, int which) -> float
        pc_input_buffers_full_avg(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(interleave_sptr self, int which) -> float
        pc_input_buffers_full_var(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(interleave_sptr self, int which) -> float
        pc_output_buffers_full(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(interleave_sptr self, int which) -> float
        pc_output_buffers_full_avg(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(interleave_sptr self, int which) -> float
        pc_output_buffers_full_var(interleave_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleave_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(interleave_sptr self) -> float"""
        return _blocks_swig9.interleave_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(interleave_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.interleave_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(interleave_sptr self)"""
        return _blocks_swig9.interleave_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(interleave_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.interleave_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(interleave_sptr self) -> int"""
        return _blocks_swig9.interleave_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(interleave_sptr self) -> int"""
        return _blocks_swig9.interleave_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(interleave_sptr self, int priority) -> int"""
        return _blocks_swig9.interleave_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(interleave_sptr self) -> std::string"""
        return _blocks_swig9.interleave_sptr_name(self)

    def symbol_name(self):
        """symbol_name(interleave_sptr self) -> std::string"""
        return _blocks_swig9.interleave_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(interleave_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleave_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(interleave_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleave_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(interleave_sptr self) -> long"""
        return _blocks_swig9.interleave_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(interleave_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.interleave_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(interleave_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.interleave_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(interleave_sptr self) -> std::string"""
        return _blocks_swig9.interleave_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(interleave_sptr self, std::string name)"""
        return _blocks_swig9.interleave_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(interleave_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.interleave_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(interleave_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.interleave_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(interleave_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.interleave_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(interleave_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.interleave_sptr_message_subscribers(self, *args, **kwargs)

interleave_sptr_swigregister = _blocks_swig9.interleave_sptr_swigregister
interleave_sptr_swigregister(interleave_sptr)

interleave_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleave = interleave.make;

class interleaved_short_to_complex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::interleaved_short_to_complex)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::interleaved_short_to_complex)> self) -> interleaved_short_to_complex_sptr
        __init__(boost::shared_ptr<(gr::blocks::interleaved_short_to_complex)> self, interleaved_short_to_complex p) -> interleaved_short_to_complex_sptr
        """
        this = _blocks_swig9.new_interleaved_short_to_complex_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(interleaved_short_to_complex_sptr self) -> interleaved_short_to_complex"""
        return _blocks_swig9.interleaved_short_to_complex_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_interleaved_short_to_complex_sptr
    __del__ = lambda self : None;
    def make(self, vector_input=False, swap=False):
        """
        make(interleaved_short_to_complex_sptr self, bool vector_input=False, bool swap=False) -> interleaved_short_to_complex_sptr

        Convert stream of interleaved shorts to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved short to complex block.

        Args:
            vector_input : 
            swap : 
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_make(self, vector_input, swap)

    def set_swap(self, *args, **kwargs):
        """set_swap(interleaved_short_to_complex_sptr self, bool swap)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_swap(self, *args, **kwargs)

    def history(self):
        """history(interleaved_short_to_complex_sptr self) -> unsigned int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(interleaved_short_to_complex_sptr self, int which, int delay)
        declare_sample_delay(interleaved_short_to_complex_sptr self, unsigned int delay)
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(interleaved_short_to_complex_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(interleaved_short_to_complex_sptr self) -> double"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_relative_rate(self)

    def start(self):
        """start(interleaved_short_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_start(self)

    def stop(self):
        """stop(interleaved_short_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(interleaved_short_to_complex_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(interleaved_short_to_complex_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(interleaved_short_to_complex_sptr self, int m)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(interleaved_short_to_complex_sptr self)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(interleaved_short_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(interleaved_short_to_complex_sptr self, int m)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(interleaved_short_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(interleaved_short_to_complex_sptr self, long max_output_buffer)
        set_max_output_buffer(interleaved_short_to_complex_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(interleaved_short_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(interleaved_short_to_complex_sptr self, long min_output_buffer)
        set_min_output_buffer(interleaved_short_to_complex_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(interleaved_short_to_complex_sptr self, int which) -> float
        pc_input_buffers_full(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(interleaved_short_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_avg(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(interleaved_short_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_var(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(interleaved_short_to_complex_sptr self, int which) -> float
        pc_output_buffers_full(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(interleaved_short_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_avg(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(interleaved_short_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_var(interleaved_short_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(interleaved_short_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(interleaved_short_to_complex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(interleaved_short_to_complex_sptr self)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(interleaved_short_to_complex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(interleaved_short_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(interleaved_short_to_complex_sptr self, int priority) -> int"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(interleaved_short_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_name(self)

    def symbol_name(self):
        """symbol_name(interleaved_short_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(interleaved_short_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(interleaved_short_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(interleaved_short_to_complex_sptr self) -> long"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(interleaved_short_to_complex_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(interleaved_short_to_complex_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(interleaved_short_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(interleaved_short_to_complex_sptr self, std::string name)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(interleaved_short_to_complex_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.interleaved_short_to_complex_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(interleaved_short_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(interleaved_short_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(interleaved_short_to_complex_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.interleaved_short_to_complex_sptr_message_subscribers(self, *args, **kwargs)

interleaved_short_to_complex_sptr_swigregister = _blocks_swig9.interleaved_short_to_complex_sptr_swigregister
interleaved_short_to_complex_sptr_swigregister(interleaved_short_to_complex_sptr)

interleaved_short_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleaved_short_to_complex = interleaved_short_to_complex.make;

class interleaved_char_to_complex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::interleaved_char_to_complex)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::interleaved_char_to_complex)> self) -> interleaved_char_to_complex_sptr
        __init__(boost::shared_ptr<(gr::blocks::interleaved_char_to_complex)> self, interleaved_char_to_complex p) -> interleaved_char_to_complex_sptr
        """
        this = _blocks_swig9.new_interleaved_char_to_complex_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(interleaved_char_to_complex_sptr self) -> interleaved_char_to_complex"""
        return _blocks_swig9.interleaved_char_to_complex_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_interleaved_char_to_complex_sptr
    __del__ = lambda self : None;
    def make(self, vector_input=False):
        """
        make(interleaved_char_to_complex_sptr self, bool vector_input=False) -> interleaved_char_to_complex_sptr

        Convert stream of interleaved chars to a stream of complex.

        Constructor Specific Documentation:

        Build an interleaved char to complex block.

        Args:
            vector_input : 
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_make(self, vector_input)

    def history(self):
        """history(interleaved_char_to_complex_sptr self) -> unsigned int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(interleaved_char_to_complex_sptr self, int which, int delay)
        declare_sample_delay(interleaved_char_to_complex_sptr self, unsigned int delay)
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(interleaved_char_to_complex_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(interleaved_char_to_complex_sptr self) -> double"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_relative_rate(self)

    def start(self):
        """start(interleaved_char_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_start(self)

    def stop(self):
        """stop(interleaved_char_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(interleaved_char_to_complex_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(interleaved_char_to_complex_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(interleaved_char_to_complex_sptr self, int m)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(interleaved_char_to_complex_sptr self)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(interleaved_char_to_complex_sptr self) -> bool"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(interleaved_char_to_complex_sptr self, int m)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(interleaved_char_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(interleaved_char_to_complex_sptr self, long max_output_buffer)
        set_max_output_buffer(interleaved_char_to_complex_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(interleaved_char_to_complex_sptr self, int i) -> long"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(interleaved_char_to_complex_sptr self, long min_output_buffer)
        set_min_output_buffer(interleaved_char_to_complex_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(interleaved_char_to_complex_sptr self, int which) -> float
        pc_input_buffers_full(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(interleaved_char_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_avg(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(interleaved_char_to_complex_sptr self, int which) -> float
        pc_input_buffers_full_var(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(interleaved_char_to_complex_sptr self, int which) -> float
        pc_output_buffers_full(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(interleaved_char_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_avg(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(interleaved_char_to_complex_sptr self, int which) -> float
        pc_output_buffers_full_var(interleaved_char_to_complex_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(interleaved_char_to_complex_sptr self) -> float"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(interleaved_char_to_complex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(interleaved_char_to_complex_sptr self)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(interleaved_char_to_complex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(interleaved_char_to_complex_sptr self) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(interleaved_char_to_complex_sptr self, int priority) -> int"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(interleaved_char_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_name(self)

    def symbol_name(self):
        """symbol_name(interleaved_char_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(interleaved_char_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(interleaved_char_to_complex_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(interleaved_char_to_complex_sptr self) -> long"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(interleaved_char_to_complex_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(interleaved_char_to_complex_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(interleaved_char_to_complex_sptr self) -> std::string"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(interleaved_char_to_complex_sptr self, std::string name)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(interleaved_char_to_complex_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.interleaved_char_to_complex_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(interleaved_char_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(interleaved_char_to_complex_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(interleaved_char_to_complex_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.interleaved_char_to_complex_sptr_message_subscribers(self, *args, **kwargs)

interleaved_char_to_complex_sptr_swigregister = _blocks_swig9.interleaved_char_to_complex_sptr_swigregister
interleaved_char_to_complex_sptr_swigregister(interleaved_char_to_complex_sptr)

interleaved_char_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleaved_char_to_complex = interleaved_char_to_complex.make;

class keep_m_in_n_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::keep_m_in_n)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::keep_m_in_n)> self) -> keep_m_in_n_sptr
        __init__(boost::shared_ptr<(gr::blocks::keep_m_in_n)> self, keep_m_in_n p) -> keep_m_in_n_sptr
        """
        this = _blocks_swig9.new_keep_m_in_n_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(keep_m_in_n_sptr self) -> keep_m_in_n"""
        return _blocks_swig9.keep_m_in_n_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_keep_m_in_n_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(keep_m_in_n_sptr self, size_t itemsize, int m, int n, int offset) -> keep_m_in_n_sptr

        decimate a stream, keeping the first  items out of every  starting after  items.

        Constructor Specific Documentation:

        Make a keep m in n block.

        Args:
            itemsize : stream itemsize
            m : number of items to take in block of  items
            n : block size in items
            offset : initial item offset into the stream
        """
        return _blocks_swig9.keep_m_in_n_sptr_make(self, *args, **kwargs)

    def set_m(self, *args, **kwargs):
        """set_m(keep_m_in_n_sptr self, int m)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_m(self, *args, **kwargs)

    def set_n(self, *args, **kwargs):
        """set_n(keep_m_in_n_sptr self, int n)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_n(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(keep_m_in_n_sptr self, int offset)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_offset(self, *args, **kwargs)

    def history(self):
        """history(keep_m_in_n_sptr self) -> unsigned int"""
        return _blocks_swig9.keep_m_in_n_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(keep_m_in_n_sptr self, int which, int delay)
        declare_sample_delay(keep_m_in_n_sptr self, unsigned int delay)
        """
        return _blocks_swig9.keep_m_in_n_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(keep_m_in_n_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.keep_m_in_n_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(keep_m_in_n_sptr self) -> double"""
        return _blocks_swig9.keep_m_in_n_sptr_relative_rate(self)

    def start(self):
        """start(keep_m_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_m_in_n_sptr_start(self)

    def stop(self):
        """stop(keep_m_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_m_in_n_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(keep_m_in_n_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.keep_m_in_n_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(keep_m_in_n_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.keep_m_in_n_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(keep_m_in_n_sptr self, int m)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(keep_m_in_n_sptr self)"""
        return _blocks_swig9.keep_m_in_n_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(keep_m_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_m_in_n_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(keep_m_in_n_sptr self, int m)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(keep_m_in_n_sptr self, int i) -> long"""
        return _blocks_swig9.keep_m_in_n_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(keep_m_in_n_sptr self, long max_output_buffer)
        set_max_output_buffer(keep_m_in_n_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.keep_m_in_n_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(keep_m_in_n_sptr self, int i) -> long"""
        return _blocks_swig9.keep_m_in_n_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(keep_m_in_n_sptr self, long min_output_buffer)
        set_min_output_buffer(keep_m_in_n_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.keep_m_in_n_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(keep_m_in_n_sptr self, int which) -> float
        pc_input_buffers_full(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(keep_m_in_n_sptr self, int which) -> float
        pc_input_buffers_full_avg(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(keep_m_in_n_sptr self, int which) -> float
        pc_input_buffers_full_var(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(keep_m_in_n_sptr self, int which) -> float
        pc_output_buffers_full(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(keep_m_in_n_sptr self, int which) -> float
        pc_output_buffers_full_avg(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(keep_m_in_n_sptr self, int which) -> float
        pc_output_buffers_full_var(keep_m_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_m_in_n_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(keep_m_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_m_in_n_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(keep_m_in_n_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(keep_m_in_n_sptr self)"""
        return _blocks_swig9.keep_m_in_n_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(keep_m_in_n_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.keep_m_in_n_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(keep_m_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(keep_m_in_n_sptr self, int priority) -> int"""
        return _blocks_swig9.keep_m_in_n_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(keep_m_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_m_in_n_sptr_name(self)

    def symbol_name(self):
        """symbol_name(keep_m_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_m_in_n_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(keep_m_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.keep_m_in_n_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(keep_m_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.keep_m_in_n_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(keep_m_in_n_sptr self) -> long"""
        return _blocks_swig9.keep_m_in_n_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(keep_m_in_n_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.keep_m_in_n_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(keep_m_in_n_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.keep_m_in_n_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(keep_m_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_m_in_n_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(keep_m_in_n_sptr self, std::string name)"""
        return _blocks_swig9.keep_m_in_n_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(keep_m_in_n_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.keep_m_in_n_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(keep_m_in_n_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.keep_m_in_n_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(keep_m_in_n_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.keep_m_in_n_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(keep_m_in_n_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.keep_m_in_n_sptr_message_subscribers(self, *args, **kwargs)

keep_m_in_n_sptr_swigregister = _blocks_swig9.keep_m_in_n_sptr_swigregister
keep_m_in_n_sptr_swigregister(keep_m_in_n_sptr)

keep_m_in_n_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
keep_m_in_n = keep_m_in_n.make;

class keep_one_in_n_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::keep_one_in_n)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::keep_one_in_n)> self) -> keep_one_in_n_sptr
        __init__(boost::shared_ptr<(gr::blocks::keep_one_in_n)> self, keep_one_in_n p) -> keep_one_in_n_sptr
        """
        this = _blocks_swig9.new_keep_one_in_n_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(keep_one_in_n_sptr self) -> keep_one_in_n"""
        return _blocks_swig9.keep_one_in_n_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_keep_one_in_n_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(keep_one_in_n_sptr self, size_t itemsize, int n) -> keep_one_in_n_sptr

        decimate a stream, keeping the last item out of every .

        Constructor Specific Documentation:

        Make a keep one in n block.

        Args:
            itemsize : stream itemsize
            n : block size in items
        """
        return _blocks_swig9.keep_one_in_n_sptr_make(self, *args, **kwargs)

    def set_n(self, *args, **kwargs):
        """set_n(keep_one_in_n_sptr self, int n)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_n(self, *args, **kwargs)

    def history(self):
        """history(keep_one_in_n_sptr self) -> unsigned int"""
        return _blocks_swig9.keep_one_in_n_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(keep_one_in_n_sptr self, int which, int delay)
        declare_sample_delay(keep_one_in_n_sptr self, unsigned int delay)
        """
        return _blocks_swig9.keep_one_in_n_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(keep_one_in_n_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.keep_one_in_n_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(keep_one_in_n_sptr self) -> double"""
        return _blocks_swig9.keep_one_in_n_sptr_relative_rate(self)

    def start(self):
        """start(keep_one_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_one_in_n_sptr_start(self)

    def stop(self):
        """stop(keep_one_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_one_in_n_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(keep_one_in_n_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.keep_one_in_n_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(keep_one_in_n_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.keep_one_in_n_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(keep_one_in_n_sptr self, int m)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(keep_one_in_n_sptr self)"""
        return _blocks_swig9.keep_one_in_n_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(keep_one_in_n_sptr self) -> bool"""
        return _blocks_swig9.keep_one_in_n_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(keep_one_in_n_sptr self, int m)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(keep_one_in_n_sptr self, int i) -> long"""
        return _blocks_swig9.keep_one_in_n_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(keep_one_in_n_sptr self, long max_output_buffer)
        set_max_output_buffer(keep_one_in_n_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.keep_one_in_n_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(keep_one_in_n_sptr self, int i) -> long"""
        return _blocks_swig9.keep_one_in_n_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(keep_one_in_n_sptr self, long min_output_buffer)
        set_min_output_buffer(keep_one_in_n_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.keep_one_in_n_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(keep_one_in_n_sptr self, int which) -> float
        pc_input_buffers_full(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(keep_one_in_n_sptr self, int which) -> float
        pc_input_buffers_full_avg(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(keep_one_in_n_sptr self, int which) -> float
        pc_input_buffers_full_var(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(keep_one_in_n_sptr self, int which) -> float
        pc_output_buffers_full(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(keep_one_in_n_sptr self, int which) -> float
        pc_output_buffers_full_avg(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(keep_one_in_n_sptr self, int which) -> float
        pc_output_buffers_full_var(keep_one_in_n_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.keep_one_in_n_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(keep_one_in_n_sptr self) -> float"""
        return _blocks_swig9.keep_one_in_n_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(keep_one_in_n_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(keep_one_in_n_sptr self)"""
        return _blocks_swig9.keep_one_in_n_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(keep_one_in_n_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.keep_one_in_n_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(keep_one_in_n_sptr self) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(keep_one_in_n_sptr self, int priority) -> int"""
        return _blocks_swig9.keep_one_in_n_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(keep_one_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_one_in_n_sptr_name(self)

    def symbol_name(self):
        """symbol_name(keep_one_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_one_in_n_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(keep_one_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.keep_one_in_n_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(keep_one_in_n_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.keep_one_in_n_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(keep_one_in_n_sptr self) -> long"""
        return _blocks_swig9.keep_one_in_n_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(keep_one_in_n_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.keep_one_in_n_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(keep_one_in_n_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.keep_one_in_n_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(keep_one_in_n_sptr self) -> std::string"""
        return _blocks_swig9.keep_one_in_n_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(keep_one_in_n_sptr self, std::string name)"""
        return _blocks_swig9.keep_one_in_n_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(keep_one_in_n_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.keep_one_in_n_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(keep_one_in_n_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.keep_one_in_n_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(keep_one_in_n_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.keep_one_in_n_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(keep_one_in_n_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.keep_one_in_n_sptr_message_subscribers(self, *args, **kwargs)

keep_one_in_n_sptr_swigregister = _blocks_swig9.keep_one_in_n_sptr_swigregister
keep_one_in_n_sptr_swigregister(keep_one_in_n_sptr)

keep_one_in_n_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
keep_one_in_n = keep_one_in_n.make;

class lfsr_32k_source_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::lfsr_32k_source_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::lfsr_32k_source_s)> self) -> lfsr_32k_source_s_sptr
        __init__(boost::shared_ptr<(gr::blocks::lfsr_32k_source_s)> self, lfsr_32k_source_s p) -> lfsr_32k_source_s_sptr
        """
        this = _blocks_swig9.new_lfsr_32k_source_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(lfsr_32k_source_s_sptr self) -> lfsr_32k_source_s"""
        return _blocks_swig9.lfsr_32k_source_s_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_lfsr_32k_source_s_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(lfsr_32k_source_s_sptr self) -> lfsr_32k_source_s_sptr

        LFSR pseudo-random source with period of 2^15 bits (2^11 shorts)

        This source is typically used along with gr::blocks::check_lfsr_32k_s to test the USRP using its digital loopback mode.

        Constructor Specific Documentation:

        Make a LFSR 32k source block.
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_make(self)

    def history(self):
        """history(lfsr_32k_source_s_sptr self) -> unsigned int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(lfsr_32k_source_s_sptr self, int which, int delay)
        declare_sample_delay(lfsr_32k_source_s_sptr self, unsigned int delay)
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(lfsr_32k_source_s_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(lfsr_32k_source_s_sptr self) -> double"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_relative_rate(self)

    def start(self):
        """start(lfsr_32k_source_s_sptr self) -> bool"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_start(self)

    def stop(self):
        """stop(lfsr_32k_source_s_sptr self) -> bool"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(lfsr_32k_source_s_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(lfsr_32k_source_s_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(lfsr_32k_source_s_sptr self, int m)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(lfsr_32k_source_s_sptr self)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(lfsr_32k_source_s_sptr self) -> bool"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(lfsr_32k_source_s_sptr self, int m)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(lfsr_32k_source_s_sptr self, int i) -> long"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(lfsr_32k_source_s_sptr self, long max_output_buffer)
        set_max_output_buffer(lfsr_32k_source_s_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(lfsr_32k_source_s_sptr self, int i) -> long"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(lfsr_32k_source_s_sptr self, long min_output_buffer)
        set_min_output_buffer(lfsr_32k_source_s_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(lfsr_32k_source_s_sptr self, int which) -> float
        pc_input_buffers_full(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(lfsr_32k_source_s_sptr self, int which) -> float
        pc_input_buffers_full_avg(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(lfsr_32k_source_s_sptr self, int which) -> float
        pc_input_buffers_full_var(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(lfsr_32k_source_s_sptr self, int which) -> float
        pc_output_buffers_full(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(lfsr_32k_source_s_sptr self, int which) -> float
        pc_output_buffers_full_avg(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(lfsr_32k_source_s_sptr self, int which) -> float
        pc_output_buffers_full_var(lfsr_32k_source_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(lfsr_32k_source_s_sptr self) -> float"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(lfsr_32k_source_s_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(lfsr_32k_source_s_sptr self)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(lfsr_32k_source_s_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(lfsr_32k_source_s_sptr self) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(lfsr_32k_source_s_sptr self, int priority) -> int"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(lfsr_32k_source_s_sptr self) -> std::string"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_name(self)

    def symbol_name(self):
        """symbol_name(lfsr_32k_source_s_sptr self) -> std::string"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(lfsr_32k_source_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(lfsr_32k_source_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(lfsr_32k_source_s_sptr self) -> long"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(lfsr_32k_source_s_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(lfsr_32k_source_s_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(lfsr_32k_source_s_sptr self) -> std::string"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(lfsr_32k_source_s_sptr self, std::string name)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(lfsr_32k_source_s_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.lfsr_32k_source_s_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(lfsr_32k_source_s_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(lfsr_32k_source_s_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(lfsr_32k_source_s_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.lfsr_32k_source_s_sptr_message_subscribers(self, *args, **kwargs)

lfsr_32k_source_s_sptr_swigregister = _blocks_swig9.lfsr_32k_source_s_sptr_swigregister
lfsr_32k_source_s_sptr_swigregister(lfsr_32k_source_s_sptr)

lfsr_32k_source_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
lfsr_32k_source_s = lfsr_32k_source_s.make;

class max_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::max_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::max_ff)> self) -> max_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::max_ff)> self, max_ff p) -> max_ff_sptr
        """
        this = _blocks_swig9.new_max_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(max_ff_sptr self) -> max_ff"""
        return _blocks_swig9.max_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_max_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(max_ff_sptr self, size_t vlen, size_t vlen_out=1) -> max_ff_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ff_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(max_ff_sptr self) -> unsigned int"""
        return _blocks_swig9.max_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(max_ff_sptr self, int which, int delay)
        declare_sample_delay(max_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig9.max_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(max_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.max_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(max_ff_sptr self) -> int"""
        return _blocks_swig9.max_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(max_ff_sptr self) -> double"""
        return _blocks_swig9.max_ff_sptr_relative_rate(self)

    def start(self):
        """start(max_ff_sptr self) -> bool"""
        return _blocks_swig9.max_ff_sptr_start(self)

    def stop(self):
        """stop(max_ff_sptr self) -> bool"""
        return _blocks_swig9.max_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(max_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.max_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(max_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.max_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(max_ff_sptr self) -> int"""
        return _blocks_swig9.max_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(max_ff_sptr self, int m)"""
        return _blocks_swig9.max_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(max_ff_sptr self)"""
        return _blocks_swig9.max_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(max_ff_sptr self) -> bool"""
        return _blocks_swig9.max_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(max_ff_sptr self, int m)"""
        return _blocks_swig9.max_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(max_ff_sptr self) -> int"""
        return _blocks_swig9.max_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(max_ff_sptr self, int i) -> long"""
        return _blocks_swig9.max_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(max_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(max_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.max_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(max_ff_sptr self, int i) -> long"""
        return _blocks_swig9.max_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(max_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(max_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.max_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(max_ff_sptr self, int which) -> float
        pc_input_buffers_full(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(max_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(max_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(max_ff_sptr self, int which) -> float
        pc_output_buffers_full(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(max_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(max_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(max_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(max_ff_sptr self) -> float"""
        return _blocks_swig9.max_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(max_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.max_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(max_ff_sptr self)"""
        return _blocks_swig9.max_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(max_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.max_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(max_ff_sptr self) -> int"""
        return _blocks_swig9.max_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(max_ff_sptr self) -> int"""
        return _blocks_swig9.max_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(max_ff_sptr self, int priority) -> int"""
        return _blocks_swig9.max_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(max_ff_sptr self) -> std::string"""
        return _blocks_swig9.max_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(max_ff_sptr self) -> std::string"""
        return _blocks_swig9.max_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(max_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(max_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(max_ff_sptr self) -> long"""
        return _blocks_swig9.max_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(max_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.max_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(max_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.max_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(max_ff_sptr self) -> std::string"""
        return _blocks_swig9.max_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(max_ff_sptr self, std::string name)"""
        return _blocks_swig9.max_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(max_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.max_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(max_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.max_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(max_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.max_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(max_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.max_ff_sptr_message_subscribers(self, *args, **kwargs)

max_ff_sptr_swigregister = _blocks_swig9.max_ff_sptr_swigregister
max_ff_sptr_swigregister(max_ff_sptr)

max_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
max_ff = max_ff.make;

class max_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::max_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::max_ii)> self) -> max_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::max_ii)> self, max_ii p) -> max_ii_sptr
        """
        this = _blocks_swig9.new_max_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(max_ii_sptr self) -> max_ii"""
        return _blocks_swig9.max_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_max_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(max_ii_sptr self, size_t vlen, size_t vlen_out=1) -> max_ii_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ii_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(max_ii_sptr self) -> unsigned int"""
        return _blocks_swig9.max_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(max_ii_sptr self, int which, int delay)
        declare_sample_delay(max_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig9.max_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(max_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.max_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(max_ii_sptr self) -> int"""
        return _blocks_swig9.max_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(max_ii_sptr self) -> double"""
        return _blocks_swig9.max_ii_sptr_relative_rate(self)

    def start(self):
        """start(max_ii_sptr self) -> bool"""
        return _blocks_swig9.max_ii_sptr_start(self)

    def stop(self):
        """stop(max_ii_sptr self) -> bool"""
        return _blocks_swig9.max_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(max_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.max_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(max_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.max_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(max_ii_sptr self) -> int"""
        return _blocks_swig9.max_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(max_ii_sptr self, int m)"""
        return _blocks_swig9.max_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(max_ii_sptr self)"""
        return _blocks_swig9.max_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(max_ii_sptr self) -> bool"""
        return _blocks_swig9.max_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(max_ii_sptr self, int m)"""
        return _blocks_swig9.max_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(max_ii_sptr self) -> int"""
        return _blocks_swig9.max_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(max_ii_sptr self, int i) -> long"""
        return _blocks_swig9.max_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(max_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(max_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.max_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(max_ii_sptr self, int i) -> long"""
        return _blocks_swig9.max_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(max_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(max_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.max_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(max_ii_sptr self, int which) -> float
        pc_input_buffers_full(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(max_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(max_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(max_ii_sptr self, int which) -> float
        pc_output_buffers_full(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(max_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(max_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(max_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(max_ii_sptr self) -> float"""
        return _blocks_swig9.max_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(max_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.max_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(max_ii_sptr self)"""
        return _blocks_swig9.max_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(max_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.max_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(max_ii_sptr self) -> int"""
        return _blocks_swig9.max_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(max_ii_sptr self) -> int"""
        return _blocks_swig9.max_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(max_ii_sptr self, int priority) -> int"""
        return _blocks_swig9.max_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(max_ii_sptr self) -> std::string"""
        return _blocks_swig9.max_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(max_ii_sptr self) -> std::string"""
        return _blocks_swig9.max_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(max_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(max_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(max_ii_sptr self) -> long"""
        return _blocks_swig9.max_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(max_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.max_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(max_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.max_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(max_ii_sptr self) -> std::string"""
        return _blocks_swig9.max_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(max_ii_sptr self, std::string name)"""
        return _blocks_swig9.max_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(max_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.max_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(max_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.max_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(max_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.max_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(max_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.max_ii_sptr_message_subscribers(self, *args, **kwargs)

max_ii_sptr_swigregister = _blocks_swig9.max_ii_sptr_swigregister
max_ii_sptr_swigregister(max_ii_sptr)

max_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
max_ii = max_ii.make;

class max_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::max_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::max_ss)> self) -> max_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::max_ss)> self, max_ss p) -> max_ss_sptr
        """
        this = _blocks_swig9.new_max_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(max_ss_sptr self) -> max_ss"""
        return _blocks_swig9.max_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig9.delete_max_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(max_ss_sptr self, size_t vlen, size_t vlen_out=1) -> max_ss_sptr

        Compares vectors from multiple streams and determines the maximum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the maximum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the maximum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig9.max_ss_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(max_ss_sptr self) -> unsigned int"""
        return _blocks_swig9.max_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(max_ss_sptr self, int which, int delay)
        declare_sample_delay(max_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig9.max_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(max_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig9.max_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(max_ss_sptr self) -> int"""
        return _blocks_swig9.max_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(max_ss_sptr self) -> double"""
        return _blocks_swig9.max_ss_sptr_relative_rate(self)

    def start(self):
        """start(max_ss_sptr self) -> bool"""
        return _blocks_swig9.max_ss_sptr_start(self)

    def stop(self):
        """stop(max_ss_sptr self) -> bool"""
        return _blocks_swig9.max_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(max_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig9.max_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(max_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig9.max_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(max_ss_sptr self) -> int"""
        return _blocks_swig9.max_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(max_ss_sptr self, int m)"""
        return _blocks_swig9.max_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(max_ss_sptr self)"""
        return _blocks_swig9.max_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(max_ss_sptr self) -> bool"""
        return _blocks_swig9.max_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(max_ss_sptr self, int m)"""
        return _blocks_swig9.max_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(max_ss_sptr self) -> int"""
        return _blocks_swig9.max_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(max_ss_sptr self, int i) -> long"""
        return _blocks_swig9.max_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(max_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(max_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig9.max_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(max_ss_sptr self, int i) -> long"""
        return _blocks_swig9.max_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(max_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(max_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig9.max_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(max_ss_sptr self, int which) -> float
        pc_input_buffers_full(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(max_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(max_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(max_ss_sptr self, int which) -> float
        pc_output_buffers_full(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(max_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(max_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(max_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig9.max_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(max_ss_sptr self) -> float"""
        return _blocks_swig9.max_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(max_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig9.max_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(max_ss_sptr self)"""
        return _blocks_swig9.max_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(max_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig9.max_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(max_ss_sptr self) -> int"""
        return _blocks_swig9.max_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(max_ss_sptr self) -> int"""
        return _blocks_swig9.max_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(max_ss_sptr self, int priority) -> int"""
        return _blocks_swig9.max_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(max_ss_sptr self) -> std::string"""
        return _blocks_swig9.max_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(max_ss_sptr self) -> std::string"""
        return _blocks_swig9.max_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(max_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(max_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig9.max_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(max_ss_sptr self) -> long"""
        return _blocks_swig9.max_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(max_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig9.max_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(max_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig9.max_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(max_ss_sptr self) -> std::string"""
        return _blocks_swig9.max_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(max_ss_sptr self, std::string name)"""
        return _blocks_swig9.max_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(max_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig9.max_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(max_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.max_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(max_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig9.max_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(max_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig9.max_ss_sptr_message_subscribers(self, *args, **kwargs)

max_ss_sptr_swigregister = _blocks_swig9.max_ss_sptr_swigregister
max_ss_sptr_swigregister(max_ss_sptr)

max_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
max_ss = max_ss.make;



